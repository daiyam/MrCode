diff --git a/src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts b/src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts
index f7826fa..8e02a04 100644
--- a/src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts
+++ b/src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts
@@ -22,7 +22,7 @@ import { KeybindingsEditorModel, KEYBINDING_ENTRY_TEMPLATE_ID } from 'vs/workben
 import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
 import { IKeybindingService, IUserFriendlyKeybinding } from 'vs/platform/keybinding/common/keybinding';
 import { DefineKeybindingWidget, KeybindingsSearchWidget } from 'vs/workbench/contrib/preferences/browser/keybindingWidgets';
-import { CONTEXT_KEYBINDING_FOCUS, CONTEXT_KEYBINDINGS_EDITOR, CONTEXT_KEYBINDINGS_SEARCH_FOCUS, KEYBINDINGS_EDITOR_COMMAND_RECORD_SEARCH_KEYS, KEYBINDINGS_EDITOR_COMMAND_SORTBY_PRECEDENCE, KEYBINDINGS_EDITOR_COMMAND_DEFINE, KEYBINDINGS_EDITOR_COMMAND_REMOVE, KEYBINDINGS_EDITOR_COMMAND_RESET, KEYBINDINGS_EDITOR_COMMAND_COPY, KEYBINDINGS_EDITOR_COMMAND_COPY_COMMAND, KEYBINDINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS, KEYBINDINGS_EDITOR_COMMAND_DEFINE_WHEN, KEYBINDINGS_EDITOR_COMMAND_SHOW_SIMILAR, KEYBINDINGS_EDITOR_COMMAND_ADD, KEYBINDINGS_EDITOR_COMMAND_COPY_COMMAND_TITLE } from 'vs/workbench/contrib/preferences/common/preferences';
+import { CONTEXT_KEYBINDING_FOCUS, CONTEXT_KEYBINDINGS_EDITOR, CONTEXT_KEYBINDINGS_SEARCH_FOCUS, KEYBINDINGS_EDITOR_COMMAND_RECORD_SEARCH_KEYS, KEYBINDINGS_EDITOR_COMMAND_SORTBY_PRECEDENCE, KEYBINDINGS_EDITOR_COMMAND_DEFINE, KEYBINDINGS_EDITOR_COMMAND_REMOVE, KEYBINDINGS_EDITOR_COMMAND_RESET, KEYBINDINGS_EDITOR_COMMAND_COPY, KEYBINDINGS_EDITOR_COMMAND_COPY_COMMAND, KEYBINDINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS, KEYBINDINGS_EDITOR_COMMAND_DEFINE_WHEN, KEYBINDINGS_EDITOR_COMMAND_SHOW_SIMILAR, KEYBINDINGS_EDITOR_COMMAND_ADD } from 'vs/workbench/contrib/preferences/common/preferences';
 import { IContextMenuService, IContextViewService } from 'vs/platform/contextview/browser/contextView';
 import { IKeybindingEditingService } from 'vs/workbench/services/keybinding/common/keybindingEditing';
 import { IListContextMenuEvent, IListEvent } from 'vs/base/browser/ui/list/list';
@@ -43,13 +43,12 @@ import { MenuRegistry, MenuId, isIMenuItem } from 'vs/platform/actions/common/ac
 import { IListAccessibilityProvider } from 'vs/base/browser/ui/list/listWidget';
 import { Color, RGBA } from 'vs/base/common/color';
 import { WORKBENCH_BACKGROUND } from 'vs/workbench/common/theme';
-import { IActionViewItemOptions } from 'vs/base/browser/ui/actionbar/actionViewItems';
+import { IBaseActionViewItemOptions } from 'vs/base/browser/ui/actionbar/actionViewItems';
 import { IKeybindingItemEntry, IKeybindingsEditorPane } from 'vs/workbench/services/preferences/common/preferences';
 import { keybindingsRecordKeysIcon, keybindingsSortIcon, keybindingsAddIcon, preferencesClearInputIcon, keybindingsEditIcon } from 'vs/workbench/contrib/preferences/browser/preferencesIcons';
 import { ITableRenderer, ITableVirtualDelegate } from 'vs/base/browser/ui/table/table';
 import { KeybindingsEditorInput } from 'vs/workbench/services/preferences/browser/keybindingsEditorInput';
 import { IEditorOptions } from 'vs/platform/editor/common/editor';
-import { ToolBar } from 'vs/base/browser/ui/toolbar/toolbar';
 
 const $ = DOM.$;
 
@@ -57,7 +56,7 @@ const evenRowBackgroundColor = new Color(new RGBA(130, 130, 130, 0.04));
 
 class ThemableCheckboxActionViewItem extends CheckboxActionViewItem {
 
-	constructor(context: any, action: IAction, options: IActionViewItemOptions, private readonly themeService: IThemeService) {
+	constructor(context: any, action: IAction, options: IBaseActionViewItemOptions | undefined, private readonly themeService: IThemeService) {
 		super(context, action, options);
 	}
 
@@ -126,10 +125,14 @@ export class KeybindingsEditor extends EditorPane implements IKeybindingsEditorP
 		this.keybindingFocusContextKey = CONTEXT_KEYBINDING_FOCUS.bindTo(this.contextKeyService);
 		this.searchHistoryDelayer = new Delayer<void>(500);
 
-		this.recordKeysAction = new Action(KEYBINDINGS_EDITOR_COMMAND_RECORD_SEARCH_KEYS, localize('recordKeysLabel', "Record Keys"), ThemeIcon.asClassName(keybindingsRecordKeysIcon));
+		const recordKeysActionKeybinding = this.keybindingsService.lookupKeybinding(KEYBINDINGS_EDITOR_COMMAND_RECORD_SEARCH_KEYS);
+		const recordKeysActionLabel = localize('recordKeysLabel', "Record Keys");
+		this.recordKeysAction = new Action(KEYBINDINGS_EDITOR_COMMAND_RECORD_SEARCH_KEYS, recordKeysActionKeybinding ? localize('recordKeysLabelWithKeybinding', "{0} ({1})", recordKeysActionLabel, recordKeysActionKeybinding.getLabel()) : recordKeysActionLabel, ThemeIcon.asClassName(keybindingsRecordKeysIcon));
 		this.recordKeysAction.checked = false;
 
-		this.sortByPrecedenceAction = new Action(KEYBINDINGS_EDITOR_COMMAND_SORTBY_PRECEDENCE, localize('sortByPrecedeneLabel', "Sort by Precedence (Highest first)"), ThemeIcon.asClassName(keybindingsSortIcon));
+		const sortByPrecedenceActionKeybinding = this.keybindingsService.lookupKeybinding(KEYBINDINGS_EDITOR_COMMAND_SORTBY_PRECEDENCE);
+		const sortByPrecedenceActionLabel = localize('sortByPrecedeneLabel', "Sort by Precedence");
+		this.sortByPrecedenceAction = new Action('keybindings.editor.sortByPrecedence', sortByPrecedenceActionKeybinding ? localize('sortByPrecedeneLabelWithKeybinding', "{0} ({1})", sortByPrecedenceActionLabel, sortByPrecedenceActionKeybinding.getLabel()) : sortByPrecedenceActionLabel, ThemeIcon.asClassName(keybindingsSortIcon));
 		this.sortByPrecedenceAction.checked = false;
 	}
 
@@ -266,12 +269,6 @@ export class KeybindingsEditor extends EditorPane implements IKeybindingsEditorP
 		await this.clipboardService.writeText(keybinding.keybindingItem.command);
 	}
 
-	private async copyKeybindingCommandTitle(keybinding: IKeybindingItemEntry): Promise<void> {
-		this.selectEntry(keybinding);
-		this.reportKeybindingAction(KEYBINDINGS_EDITOR_COMMAND_COPY_COMMAND_TITLE, keybinding.keybindingItem.command, keybinding.keybindingItem.keybinding);
-		await this.clipboardService.writeText(keybinding.keybindingItem.commandLabel);
-	}
-
 	focusSearch(): void {
 		this.searchWidget.focus();
 	}
@@ -369,18 +366,24 @@ export class KeybindingsEditor extends EditorPane implements IKeybindingsEditorP
 			}
 		}));
 
-		const actions = [this.recordKeysAction, this.sortByPrecedenceAction, clearInputAction];
-		const toolBar = this._register(new ToolBar(this.actionsContainer, this.contextMenuService, {
+		const actionBar = this._register(new ActionBar(this.actionsContainer, {
+			animated: false,
 			actionViewItemProvider: (action: IAction) => {
-				if (action.id === this.sortByPrecedenceAction.id || action.id === this.recordKeysAction.id) {
-					return new ThemableCheckboxActionViewItem(null, action, { keybinding: this.keybindingsService.lookupKeybinding(action.id)?.getLabel() }, this.themeService);
+				let checkboxViewItem: CheckboxActionViewItem | undefined;
+				if (action.id === this.sortByPrecedenceAction.id) {
+					checkboxViewItem = new ThemableCheckboxActionViewItem(null, action, undefined, this.themeService);
 				}
-				return undefined;
-			},
-			getKeyBinding: action => this.keybindingsService.lookupKeybinding(action.id)
+				else if (action.id === this.recordKeysAction.id) {
+					checkboxViewItem = new ThemableCheckboxActionViewItem(null, action, undefined, this.themeService);
+				}
+				if (checkboxViewItem) {
+
+				}
+				return checkboxViewItem;
+			}
 		}));
-		toolBar.setActions(actions);
-		this._register(this.keybindingsService.onDidUpdateKeybindings(e => toolBar.setActions(actions)));
+
+		actionBar.push([this.recordKeysAction, this.sortByPrecedenceAction, clearInputAction], { label: false, icon: true });
 	}
 
 	private updateSearchOptions(): void {
@@ -664,7 +667,6 @@ export class KeybindingsEditor extends EditorPane implements IKeybindingsEditorP
 				getActions: () => [
 					this.createCopyAction(keybindingItemEntry),
 					this.createCopyCommandAction(keybindingItemEntry),
-					this.createCopyCommandTitleAction(keybindingItemEntry),
 					new Separator(),
 					...(keybindingItemEntry.keybindingItem.keybinding
 						? [this.createDefineKeybindingAction(keybindingItemEntry), this.createAddKeybindingAction(keybindingItemEntry)]
@@ -763,15 +765,6 @@ export class KeybindingsEditor extends EditorPane implements IKeybindingsEditorP
 		};
 	}
 
-	private createCopyCommandTitleAction(keybinding: IKeybindingItemEntry): IAction {
-		return <IAction>{
-			label: localize('copyCommandTitleLabel', "Copy Command Title"),
-			enabled: !!keybinding.keybindingItem.commandLabel,
-			id: KEYBINDINGS_EDITOR_COMMAND_COPY_COMMAND_TITLE,
-			run: () => this.copyKeybindingCommandTitle(keybinding)
-		};
-	}
-
 	private reportFilteringUsed(filter: string): void {
 		if (filter) {
 			const data = {
diff --git a/src/vs/workbench/contrib/preferences/browser/media/keybindingsEditor.css b/src/vs/workbench/contrib/preferences/browser/media/keybindingsEditor.css
index b2553a8..4b043c4 100644
--- a/src/vs/workbench/contrib/preferences/browser/media/keybindingsEditor.css
+++ b/src/vs/workbench/contrib/preferences/browser/media/keybindingsEditor.css
@@ -27,7 +27,6 @@
 
 .keybindings-editor > .keybindings-header > .search-container > .keybindings-search-actions-container > .recording-badge {
 	margin-right: 8px;
-	padding: 3px;
 }
 
 .keybindings-editor > .keybindings-header.small > .search-container > .keybindings-search-actions-container > .recording-badge,
@@ -35,12 +34,12 @@
 	display: none;
 }
 
-.keybindings-editor > .keybindings-header > .search-container > .keybindings-search-actions-container .monaco-action-bar .action-item > .icon {
+.keybindings-editor > .keybindings-header > .search-container > .keybindings-search-actions-container > .monaco-action-bar .action-item > .icon {
 	width:16px;
 	height: 18px;
 }
 
-.keybindings-editor > .keybindings-header > .search-container > .keybindings-search-actions-container .monaco-action-bar .action-item {
+.keybindings-editor > .keybindings-header > .search-container > .keybindings-search-actions-container > .monaco-action-bar .action-item {
 	margin-right: 4px;
 }
 
diff --git a/src/vs/workbench/contrib/preferences/browser/media/settingsEditor2.css b/src/vs/workbench/contrib/preferences/browser/media/settingsEditor2.css
index 7aedc9c..70ca143 100644
--- a/src/vs/workbench/contrib/preferences/browser/media/settingsEditor2.css
+++ b/src/vs/workbench/contrib/preferences/browser/media/settingsEditor2.css
@@ -162,16 +162,17 @@
 	display: none !important;
 }
 
-.settings-editor.mid-width > .settings-body > .settings-tree-container .settings-editor-tree > .monaco-scrollable-element > .shadow.top {
+.settings-editor.mid-width > .settings-body > .settings-tree-container .shadow.top {
 	left: 0;
 	width: calc(100% - 48px);
 	margin-left: 24px;
 }
-.settings-editor.mid-width > .settings-body > .settings-tree-container .settings-editor-tree > .monaco-scrollable-element > .shadow.top.top-left-corner {
-	width: 24px;
-	margin-left: 0px;
-}
-.settings-editor > .settings-body > .settings-tree-container .settings-editor-tree > .monaco-scrollable-element > .shadow.top {
+
+.settings-editor > .settings-body > .settings-tree-container .shadow.top {
+	left: 50%;
+	max-width: 952px;
+	/* 1000 - 24*2 padding */
+	margin-left: -476px;
 	z-index: 11;
 }
 
diff --git a/src/vs/workbench/contrib/preferences/browser/media/settingsWidgets.css b/src/vs/workbench/contrib/preferences/browser/media/settingsWidgets.css
index 9314e96..2280bcf 100644
--- a/src/vs/workbench/contrib/preferences/browser/media/settingsWidgets.css
+++ b/src/vs/workbench/contrib/preferences/browser/media/settingsWidgets.css
@@ -84,13 +84,6 @@
 .settings-editor > .settings-body > .settings-tree-container .setting-item.setting-item-list .setting-list-row {
 	display: flex;
 }
-.settings-editor > .settings-body > .settings-tree-container .setting-item.setting-item-list .setting-list-row.draggable {
-	cursor: pointer;
-	user-select: none;
-}
-.settings-editor > .settings-body > .settings-tree-container .setting-item.setting-item-list .setting-list-row.drag-hover * {
-	pointer-events: none;
-}
 
 .settings-editor > .settings-body > .settings-tree-container .setting-item.setting-item-list .setting-list-row,
 .settings-editor > .settings-body > .settings-tree-container .setting-item.setting-item-list .setting-list-row-header {
diff --git a/src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts b/src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts
index 09424b4..2faa0e2 100644
--- a/src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts
+++ b/src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts
@@ -8,45 +8,48 @@ import { Disposable } from 'vs/base/common/lifecycle';
 import { Schemas } from 'vs/base/common/network';
 import { URI } from 'vs/base/common/uri';
 import 'vs/css!./media/preferences';
-import { registerEditorContribution } from 'vs/editor/browser/editorExtensions';
 import { Context as SuggestContext } from 'vs/editor/contrib/suggest/suggest';
 import * as nls from 'vs/nls';
 import { Action2, MenuId, MenuRegistry, registerAction2 } from 'vs/platform/actions/common/actions';
 import { CommandsRegistry, ICommandService } from 'vs/platform/commands/common/commands';
 import { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';
-import { InputFocusedContext, IsMacNativeContext } from 'vs/platform/contextkey/common/contextkeys';
+import { IsMacNativeContext } from 'vs/platform/contextkey/common/contextkeys';
 import { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';
 import { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';
 import { KeybindingsRegistry, KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';
 import { ILabelService } from 'vs/platform/label/common/label';
+import { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';
 import { Registry } from 'vs/platform/registry/common/platform';
 import { IWorkspaceContextService, IWorkspaceFolder, WorkbenchState } from 'vs/platform/workspace/common/workspace';
 import { PICK_WORKSPACE_FOLDER_COMMAND_ID } from 'vs/workbench/browser/actions/workspaceCommands';
 import { RemoteNameContext, WorkbenchStateContext } from 'vs/workbench/browser/contextkeys';
 import { EditorPaneDescriptor, IEditorPaneRegistry } from 'vs/workbench/browser/editor';
 import { Extensions as WorkbenchExtensions, IWorkbenchContribution, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';
-import { EditorExtensions, IEditorFactoryRegistry, IEditorSerializer } from 'vs/workbench/common/editor';
-import { EditorInput } from 'vs/workbench/common/editor/editorInput';
+import { IEditorSerializer, IEditorFactoryRegistry, EditorExtensions } from 'vs/workbench/common/editor';
 import { ResourceContextKey } from 'vs/workbench/common/resources';
 import { ExplorerFolderContext, ExplorerRootContext } from 'vs/workbench/contrib/files/common/files';
 import { KeybindingsEditor } from 'vs/workbench/contrib/preferences/browser/keybindingsEditor';
 import { ConfigureLanguageBasedSettingsAction } from 'vs/workbench/contrib/preferences/browser/preferencesActions';
-import { SettingsEditorContribution } from 'vs/workbench/contrib/preferences/browser/preferencesEditor';
-import { preferencesOpenSettingsIcon } from 'vs/workbench/contrib/preferences/browser/preferencesIcons';
+import { PreferencesEditor } from 'vs/workbench/contrib/preferences/browser/preferencesEditor';
 import { SettingsEditor2, SettingsFocusContext } from 'vs/workbench/contrib/preferences/browser/settingsEditor2';
-import { CONTEXT_KEYBINDINGS_EDITOR, CONTEXT_KEYBINDINGS_SEARCH_FOCUS, CONTEXT_KEYBINDING_FOCUS, CONTEXT_SETTINGS_EDITOR, CONTEXT_SETTINGS_JSON_EDITOR, CONTEXT_SETTINGS_ROW_FOCUS, CONTEXT_SETTINGS_SEARCH_FOCUS, CONTEXT_TOC_ROW_FOCUS, KEYBINDINGS_EDITOR_COMMAND_ADD, KEYBINDINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS, KEYBINDINGS_EDITOR_COMMAND_COPY, KEYBINDINGS_EDITOR_COMMAND_COPY_COMMAND, KEYBINDINGS_EDITOR_COMMAND_DEFINE, KEYBINDINGS_EDITOR_COMMAND_DEFINE_WHEN, KEYBINDINGS_EDITOR_COMMAND_FOCUS_KEYBINDINGS, KEYBINDINGS_EDITOR_COMMAND_RECORD_SEARCH_KEYS, KEYBINDINGS_EDITOR_COMMAND_REMOVE, KEYBINDINGS_EDITOR_COMMAND_RESET, KEYBINDINGS_EDITOR_COMMAND_SEARCH, KEYBINDINGS_EDITOR_COMMAND_SHOW_SIMILAR, KEYBINDINGS_EDITOR_COMMAND_SORTBY_PRECEDENCE, KEYBINDINGS_EDITOR_SHOW_DEFAULT_KEYBINDINGS, KEYBINDINGS_EDITOR_SHOW_EXTENSION_KEYBINDINGS, KEYBINDINGS_EDITOR_SHOW_USER_KEYBINDINGS, MODIFIED_SETTING_TAG, REQUIRE_TRUSTED_WORKSPACE_SETTING_TAG, SETTINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS, SETTINGS_EDITOR_COMMAND_SHOW_CONTEXT_MENU } from 'vs/workbench/contrib/preferences/common/preferences';
+import { CONTEXT_KEYBINDINGS_EDITOR, CONTEXT_KEYBINDINGS_SEARCH_FOCUS, CONTEXT_KEYBINDING_FOCUS, CONTEXT_SETTINGS_EDITOR, CONTEXT_SETTINGS_JSON_EDITOR, CONTEXT_SETTINGS_ROW_FOCUS, CONTEXT_SETTINGS_SEARCH_FOCUS, CONTEXT_TOC_ROW_FOCUS, KEYBINDINGS_EDITOR_COMMAND_ADD, KEYBINDINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS, KEYBINDINGS_EDITOR_COMMAND_COPY, KEYBINDINGS_EDITOR_COMMAND_COPY_COMMAND, KEYBINDINGS_EDITOR_COMMAND_DEFINE, KEYBINDINGS_EDITOR_COMMAND_DEFINE_WHEN, KEYBINDINGS_EDITOR_COMMAND_FOCUS_KEYBINDINGS, KEYBINDINGS_EDITOR_COMMAND_RECORD_SEARCH_KEYS, KEYBINDINGS_EDITOR_COMMAND_REMOVE, KEYBINDINGS_EDITOR_COMMAND_RESET, KEYBINDINGS_EDITOR_COMMAND_SEARCH, KEYBINDINGS_EDITOR_COMMAND_SHOW_SIMILAR, KEYBINDINGS_EDITOR_COMMAND_SORTBY_PRECEDENCE, KEYBINDINGS_EDITOR_SHOW_DEFAULT_KEYBINDINGS, KEYBINDINGS_EDITOR_SHOW_EXTENSION_KEYBINDINGS, KEYBINDINGS_EDITOR_SHOW_USER_KEYBINDINGS, MODIFIED_SETTING_TAG, SETTINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS, SETTINGS_EDITOR_COMMAND_SHOW_CONTEXT_MENU, REQUIRE_TRUSTED_WORKSPACE_SETTING_TAG } from 'vs/workbench/contrib/preferences/common/preferences';
 import { PreferencesContribution } from 'vs/workbench/contrib/preferences/common/preferencesContribution';
 import { IEditorService } from 'vs/workbench/services/editor/common/editorService';
 import { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';
 import { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';
-import { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';
-import { KeybindingsEditorInput } from 'vs/workbench/services/preferences/browser/keybindingsEditorInput';
 import { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';
-import { SettingsEditor2Input } from 'vs/workbench/services/preferences/common/preferencesEditorInput';
+import { DefaultPreferencesEditorInput, PreferencesEditorInput, SettingsEditor2Input } from 'vs/workbench/services/preferences/common/preferencesEditorInput';
+import { preferencesOpenSettingsIcon } from 'vs/workbench/contrib/preferences/browser/preferencesIcons';
+import { KeybindingsEditorInput } from 'vs/workbench/services/preferences/browser/keybindingsEditorInput';
+import { EditorInput } from 'vs/workbench/common/editor/editorInput';
+import { AbstractSideBySideEditorInputSerializer } from 'vs/workbench/common/editor/sideBySideEditorInput';
 
 const SETTINGS_EDITOR_COMMAND_SEARCH = 'settings.action.search';
 
+const SETTINGS_EDITOR_COMMAND_FOCUS_NEXT_SETTING = 'settings.action.focusNextSetting';
+const SETTINGS_EDITOR_COMMAND_FOCUS_PREVIOUS_SETTING = 'settings.action.focusPreviousSetting';
 const SETTINGS_EDITOR_COMMAND_FOCUS_FILE = 'settings.action.focusSettingsFile';
+const SETTINGS_EDITOR_COMMAND_EDIT_FOCUSED_SETTING = 'settings.action.editFocusedSetting';
 const SETTINGS_EDITOR_COMMAND_FOCUS_SETTINGS_FROM_SEARCH = 'settings.action.focusSettingsFromSearch';
 const SETTINGS_EDITOR_COMMAND_FOCUS_SETTINGS_LIST = 'settings.action.focusSettingsList';
 const SETTINGS_EDITOR_COMMAND_FOCUS_TOC = 'settings.action.focusTOC';
@@ -56,11 +59,21 @@ const SETTINGS_EDITOR_COMMAND_FOCUS_UP = 'settings.action.focusLevelUp';
 const SETTINGS_EDITOR_COMMAND_SWITCH_TO_JSON = 'settings.switchToJSON';
 const SETTINGS_EDITOR_COMMAND_FILTER_MODIFIED = 'settings.filterByModified';
 const SETTINGS_EDITOR_COMMAND_FILTER_ONLINE = 'settings.filterByOnline';
-const SETTINGS_EDITOR_COMMAND_FILTER_TELEMETRY = 'settings.filterByTelemetry';
 const SETTINGS_EDITOR_COMMAND_FILTER_UNTRUSTED = 'settings.filterUntrusted';
 
 const SETTINGS_COMMAND_OPEN_SETTINGS = 'workbench.action.openSettings';
 
+Registry.as<IEditorPaneRegistry>(EditorExtensions.EditorPane).registerEditorPane(
+	EditorPaneDescriptor.create(
+		PreferencesEditor,
+		PreferencesEditor.ID,
+		nls.localize('defaultPreferencesEditor', "Default Preferences Editor")
+	),
+	[
+		new SyncDescriptor(PreferencesEditorInput)
+	]
+);
+
 Registry.as<IEditorPaneRegistry>(EditorExtensions.EditorPane).registerEditorPane(
 	EditorPaneDescriptor.create(
 		SettingsEditor2,
@@ -83,6 +96,14 @@ Registry.as<IEditorPaneRegistry>(EditorExtensions.EditorPane).registerEditorPane
 	]
 );
 
+// Register Preferences Editor Input Serializer
+class PreferencesEditorInputSerializer extends AbstractSideBySideEditorInputSerializer {
+
+	protected createEditorInput(instantiationService: IInstantiationService, name: string, description: string | undefined, secondaryInput: EditorInput, primaryInput: EditorInput): EditorInput {
+		return new PreferencesEditorInput(name, description, secondaryInput, primaryInput);
+	}
+}
+
 class KeybindingsEditorInputSerializer implements IEditorSerializer {
 
 	canSerialize(editorInput: EditorInput): boolean {
@@ -113,6 +134,34 @@ class SettingsEditor2InputSerializer implements IEditorSerializer {
 	}
 }
 
+interface ISerializedDefaultPreferencesEditorInput {
+	resource: string;
+}
+
+// Register Default Preferences Editor Input Serializer
+class DefaultPreferencesEditorInputSerializer implements IEditorSerializer {
+
+	canSerialize(editorInput: EditorInput): boolean {
+		return true;
+	}
+
+	serialize(editorInput: EditorInput): string {
+		const input = <DefaultPreferencesEditorInput>editorInput;
+
+		const serialized: ISerializedDefaultPreferencesEditorInput = { resource: input.resource.toString() };
+
+		return JSON.stringify(serialized);
+	}
+
+	deserialize(instantiationService: IInstantiationService, serializedEditorInput: string): EditorInput {
+		const deserialized: ISerializedDefaultPreferencesEditorInput = JSON.parse(serializedEditorInput);
+
+		return instantiationService.createInstance(DefaultPreferencesEditorInput, URI.parse(deserialized.resource));
+	}
+}
+
+Registry.as<IEditorFactoryRegistry>(EditorExtensions.EditorFactory).registerEditorSerializer(PreferencesEditorInput.ID, PreferencesEditorInputSerializer);
+Registry.as<IEditorFactoryRegistry>(EditorExtensions.EditorFactory).registerEditorSerializer(DefaultPreferencesEditorInput.ID, DefaultPreferencesEditorInputSerializer);
 Registry.as<IEditorFactoryRegistry>(EditorExtensions.EditorFactory).registerEditorSerializer(KeybindingsEditorInput.ID, KeybindingsEditorInputSerializer);
 Registry.as<IEditorFactoryRegistry>(EditorExtensions.EditorFactory).registerEditorSerializer(SettingsEditor2Input.ID, SettingsEditor2InputSerializer);
 
@@ -427,28 +476,6 @@ class PreferencesActionsContribution extends Disposable implements IWorkbenchCon
 			order: 2
 		});
 
-		registerAction2(class extends Action2 {
-			constructor() {
-				super({
-					id: SETTINGS_EDITOR_COMMAND_FILTER_TELEMETRY,
-					title: { value: nls.localize('showTelemtrySettings', "Telemetry Settings"), original: 'Telemetry Settings' },
-					menu: {
-						id: MenuId.MenubarPreferencesMenu,
-						group: '1_settings',
-						order: 3,
-					}
-				});
-			}
-			run(accessor: ServicesAccessor) {
-				const editorPane = accessor.get(IEditorService).activeEditorPane;
-				if (editorPane instanceof SettingsEditor2) {
-					editorPane.focusSearch('@tag:telemetry');
-				} else {
-					accessor.get(IPreferencesService).openSettings(false, '@tag:telemetry');
-				}
-			}
-		});
-
 		registerAction2(class extends Action2 {
 			constructor() {
 				super({
@@ -488,9 +515,9 @@ class PreferencesActionsContribution extends Disposable implements IWorkbenchCon
 	}
 
 	private registerSettingsEditorActions() {
-		function getPreferencesEditor(accessor: ServicesAccessor): SettingsEditor2 | null {
+		function getPreferencesEditor(accessor: ServicesAccessor): PreferencesEditor | SettingsEditor2 | null {
 			const activeEditorPane = accessor.get(IEditorService).activeEditorPane;
-			if (activeEditorPane instanceof SettingsEditor2) {
+			if (activeEditorPane instanceof PreferencesEditor || activeEditorPane instanceof SettingsEditor2) {
 				return activeEditorPane;
 			}
 			return null;
@@ -562,7 +589,11 @@ class PreferencesActionsContribution extends Disposable implements IWorkbenchCon
 
 			run(accessor: ServicesAccessor, args: any): void {
 				const preferencesEditor = getPreferencesEditor(accessor);
-				preferencesEditor?.focusSettings();
+				if (preferencesEditor instanceof PreferencesEditor) {
+					preferencesEditor.focusSettingsFileEditor();
+				} else if (preferencesEditor) {
+					preferencesEditor.focusSettings();
+				}
 			}
 		});
 
@@ -582,7 +613,77 @@ class PreferencesActionsContribution extends Disposable implements IWorkbenchCon
 
 			run(accessor: ServicesAccessor, args: any): void {
 				const preferencesEditor = getPreferencesEditor(accessor);
-				preferencesEditor?.focusSettings();
+				if (preferencesEditor instanceof PreferencesEditor) {
+					preferencesEditor.focusSettingsFileEditor();
+				} else if (preferencesEditor) {
+					preferencesEditor.focusSettings();
+				}
+			}
+		});
+
+		registerAction2(class extends Action2 {
+			constructor() {
+				super({
+					id: SETTINGS_EDITOR_COMMAND_FOCUS_NEXT_SETTING,
+					precondition: CONTEXT_SETTINGS_SEARCH_FOCUS,
+					keybinding: {
+						primary: KeyCode.Enter,
+						weight: KeybindingWeight.EditorContrib,
+						when: null
+					},
+					title: nls.localize('settings.focusNextSetting', "Focus next setting")
+				});
+			}
+
+			run(accessor: ServicesAccessor): void {
+				const preferencesEditor = getPreferencesEditor(accessor);
+				if (preferencesEditor instanceof PreferencesEditor) {
+					preferencesEditor.focusNextResult();
+				}
+			}
+		});
+
+		registerAction2(class extends Action2 {
+			constructor() {
+				super({
+					id: SETTINGS_EDITOR_COMMAND_FOCUS_PREVIOUS_SETTING,
+					precondition: CONTEXT_SETTINGS_SEARCH_FOCUS,
+					keybinding: {
+						primary: KeyMod.Shift | KeyCode.Enter,
+						weight: KeybindingWeight.EditorContrib,
+						when: null
+					},
+					title: nls.localize('settings.focusPreviousSetting', "Focus previous setting")
+				});
+			}
+
+			run(accessor: ServicesAccessor): void {
+				const preferencesEditor = getPreferencesEditor(accessor);
+				if (preferencesEditor instanceof PreferencesEditor) {
+					preferencesEditor.focusPreviousResult();
+				}
+			}
+		});
+
+		registerAction2(class extends Action2 {
+			constructor() {
+				super({
+					id: SETTINGS_EDITOR_COMMAND_EDIT_FOCUSED_SETTING,
+					precondition: CONTEXT_SETTINGS_SEARCH_FOCUS,
+					keybinding: {
+						primary: KeyMod.CtrlCmd | KeyCode.US_DOT,
+						weight: KeybindingWeight.EditorContrib,
+						when: null
+					},
+					title: nls.localize('settings.editFocusedSetting', "Edit focused setting")
+				});
+			}
+
+			run(accessor: ServicesAccessor): void {
+				const preferencesEditor = getPreferencesEditor(accessor);
+				if (preferencesEditor instanceof PreferencesEditor) {
+					preferencesEditor.editFocusedPreference();
+				}
 			}
 		});
 
@@ -927,7 +1028,7 @@ class PreferencesActionsContribution extends Disposable implements IWorkbenchCon
 		KeybindingsRegistry.registerCommandAndKeybindingRule({
 			id: KEYBINDINGS_EDITOR_COMMAND_REMOVE,
 			weight: KeybindingWeight.WorkbenchContrib,
-			when: ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR, CONTEXT_KEYBINDING_FOCUS, InputFocusedContext.toNegated()),
+			when: ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR, CONTEXT_KEYBINDING_FOCUS),
 			primary: KeyCode.Delete,
 			mac: {
 				primary: KeyMod.CtrlCmd | KeyCode.Backspace
@@ -1095,8 +1196,6 @@ const workbenchContributionsRegistry = Registry.as<IWorkbenchContributionsRegist
 workbenchContributionsRegistry.registerWorkbenchContribution(PreferencesActionsContribution, LifecyclePhase.Starting);
 workbenchContributionsRegistry.registerWorkbenchContribution(PreferencesContribution, LifecyclePhase.Starting);
 
-registerEditorContribution(SettingsEditorContribution.ID, SettingsEditorContribution);
-
 // Preferences menu
 
 MenuRegistry.appendMenuItem(MenuId.MenubarFileMenu, {
diff --git a/src/vs/workbench/contrib/preferences/browser/preferencesEditor.ts b/src/vs/workbench/contrib/preferences/browser/preferencesEditor.ts
index 57ff47b..f1451a8 100644
--- a/src/vs/workbench/contrib/preferences/browser/preferencesEditor.ts
+++ b/src/vs/workbench/contrib/preferences/browser/preferencesEditor.ts
@@ -3,51 +3,1209 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { Disposable } from 'vs/base/common/lifecycle';
+import * as DOM from 'vs/base/browser/dom';
+import { Orientation, Sizing, SplitView } from 'vs/base/browser/ui/splitview/splitview';
+import { Widget } from 'vs/base/browser/ui/widget';
+import { Delayer, ThrottledDelayer } from 'vs/base/common/async';
+import { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';
+import { IStringDictionary } from 'vs/base/common/collections';
+import { getErrorMessage, isPromiseCanceledError, onUnexpectedError } from 'vs/base/common/errors';
+import { Emitter, Event } from 'vs/base/common/event';
+import { Disposable, dispose, IDisposable } from 'vs/base/common/lifecycle';
+import { ArrayNavigator } from 'vs/base/common/navigator';
+import { assertIsDefined, withNullAsUndefined, withUndefinedAsNull } from 'vs/base/common/types';
+import { URI } from 'vs/base/common/uri';
 import { ICodeEditor } from 'vs/editor/browser/editorBrowser';
+import { EditorExtensionsRegistry, IEditorContributionDescription, registerEditorContribution } from 'vs/editor/browser/editorExtensions';
+import { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';
+import { IEditorOptions as ICodeEditorOptions } from 'vs/editor/common/config/editorOptions';
+import * as editorCommon from 'vs/editor/common/editorCommon';
+import { ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfigurationService';
+import { FindController } from 'vs/editor/contrib/find/findController';
+import { FoldingController } from 'vs/editor/contrib/folding/folding';
+import { MessageController } from 'vs/editor/contrib/message/messageController';
+import { SelectionHighlighter } from 'vs/editor/contrib/multicursor/multicursor';
+import * as nls from 'vs/nls';
 import { ConfigurationTarget } from 'vs/platform/configuration/common/configuration';
-import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
+import { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
+import { IConstructorSignature1, IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
+import { ILogService } from 'vs/platform/log/common/log';
+import { IEditorProgressService } from 'vs/platform/progress/common/progress';
+import { Registry } from 'vs/platform/registry/common/platform';
+import { IStorageService } from 'vs/platform/storage/common/storage';
+import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
+import { scrollbarShadow } from 'vs/platform/theme/common/colorRegistry';
+import { attachStylerCallback } from 'vs/platform/theme/common/styler';
+import { IThemeService } from 'vs/platform/theme/common/themeService';
 import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
-import { IPreferencesRenderer, UserSettingsRenderer, WorkspaceSettingsRenderer } from 'vs/workbench/contrib/preferences/browser/preferencesRenderers';
-import { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';
-import { SettingsEditorModel } from 'vs/workbench/services/preferences/common/preferencesModels';
+import { IEditorPaneRegistry } from 'vs/workbench/browser/editor';
+import { EditorPane } from 'vs/workbench/browser/parts/editor/editorPane';
+import { BaseTextEditor } from 'vs/workbench/browser/parts/editor/textEditor';
+import { EditorExtensions, IEditorControl, IEditorOpenContext } from 'vs/workbench/common/editor';
+import { EditorInput } from 'vs/workbench/common/editor/editorInput';
+import { TextResourceEditorModel } from 'vs/workbench/common/editor/textResourceEditorModel';
+import { DefaultSettingsRenderer, FolderSettingsRenderer, IPreferencesRenderer, UserSettingsRenderer, WorkspaceSettingsRenderer } from 'vs/workbench/contrib/preferences/browser/preferencesRenderers';
+import { SearchWidget, SettingsTarget, SettingsTargetsWidget } from 'vs/workbench/contrib/preferences/browser/preferencesWidgets';
+import { CONTEXT_SETTINGS_EDITOR, CONTEXT_SETTINGS_JSON_EDITOR, CONTEXT_SETTINGS_SEARCH_FOCUS, IPreferencesSearchService, ISearchProvider } from 'vs/workbench/contrib/preferences/common/preferences';
+import { IEditorGroup, IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';
+import { IEditorService } from 'vs/workbench/services/editor/common/editorService';
+import { IFilterResult, IPreferencesService, ISetting, ISettingsEditorModel, ISettingsEditorOptions, ISettingsGroup } from 'vs/workbench/services/preferences/common/preferences';
+import { DefaultPreferencesEditorInput, PreferencesEditorInput } from 'vs/workbench/services/preferences/common/preferencesEditorInput';
+import { DefaultSettingsEditorModel, SettingsEditorModel } from 'vs/workbench/services/preferences/common/preferencesModels';
 
-export class SettingsEditorContribution extends Disposable {
-	static readonly ID: string = 'editor.contrib.settings';
+export class PreferencesEditor extends EditorPane {
+
+	static readonly ID: string = 'workbench.editor.preferencesEditor';
+
+	private defaultSettingsEditorContextKey: IContextKey<boolean>;
+	private defaultSettingsJSONEditorContextKey: IContextKey<boolean>;
+	private searchFocusContextKey: IContextKey<boolean>;
+	private headerContainer!: HTMLElement;
+	private searchWidget!: SearchWidget;
+	private sideBySidePreferencesWidget!: SideBySidePreferencesWidget;
+	private preferencesRenderers!: PreferencesRenderersController;
+
+	private delayedFilterLogging: Delayer<void>;
+	private localSearchDelayer: Delayer<void>;
+	private remoteSearchThrottle: ThrottledDelayer<void>;
+	private _lastReportedFilter: string | null = null;
+
+	private lastFocusedWidget: SearchWidget | SideBySidePreferencesWidget | undefined = undefined;
+
+	override get minimumWidth(): number { return this.sideBySidePreferencesWidget ? this.sideBySidePreferencesWidget.minimumWidth : 0; }
+	override get maximumWidth(): number { return this.sideBySidePreferencesWidget ? this.sideBySidePreferencesWidget.maximumWidth : Number.POSITIVE_INFINITY; }
+
+	// these setters need to exist because this extends from EditorPane
+	override set minimumWidth(value: number) { /*noop*/ }
+	override set maximumWidth(value: number) { /*noop*/ }
 
-	private _currentRenderer: IPreferencesRenderer | undefined;
+	override get minimumHeight() { return 260; }
+
+	private _onDidCreateWidget = this._register(new Emitter<{ width: number; height: number; } | undefined>());
+	override readonly onDidChangeSizeConstraints: Event<{ width: number; height: number; } | undefined> = this._onDidCreateWidget.event;
 
 	constructor(
-		private readonly editor: ICodeEditor,
+		@IPreferencesService private readonly preferencesService: IPreferencesService,
+		@ITelemetryService telemetryService: ITelemetryService,
+		@IEditorService private readonly editorService: IEditorService,
+		@IContextKeyService private readonly contextKeyService: IContextKeyService,
 		@IInstantiationService private readonly instantiationService: IInstantiationService,
+		@IThemeService themeService: IThemeService,
+		@IEditorProgressService private readonly editorProgressService: IEditorProgressService,
+		@IStorageService storageService: IStorageService,
+	) {
+		super(PreferencesEditor.ID, telemetryService, themeService, storageService);
+		this.defaultSettingsEditorContextKey = CONTEXT_SETTINGS_EDITOR.bindTo(this.contextKeyService);
+		this.defaultSettingsJSONEditorContextKey = CONTEXT_SETTINGS_JSON_EDITOR.bindTo(this.contextKeyService);
+		this.searchFocusContextKey = CONTEXT_SETTINGS_SEARCH_FOCUS.bindTo(this.contextKeyService);
+		this.delayedFilterLogging = new Delayer<void>(1000);
+		this.localSearchDelayer = new Delayer(100);
+		this.remoteSearchThrottle = new ThrottledDelayer(200);
+	}
+
+	createEditor(parent: HTMLElement): void {
+		parent.classList.add('preferences-editor');
+
+		this.headerContainer = DOM.append(parent, DOM.$('.preferences-header'));
+		this.searchWidget = this._register(this.instantiationService.createInstance(SearchWidget, this.headerContainer, {
+			ariaLabel: nls.localize('SearchSettingsWidget.AriaLabel', "Search settings"),
+			placeholder: nls.localize('SearchSettingsWidget.Placeholder', "Search Settings"),
+			focusKey: this.searchFocusContextKey,
+			showResultCount: true,
+			ariaLive: 'assertive',
+			history: [],
+		}));
+		this._register(this.searchWidget.onDidChange(value => this.onInputChanged()));
+		this._register(this.searchWidget.onFocus(() => this.lastFocusedWidget = this.searchWidget));
+		this.lastFocusedWidget = this.searchWidget;
+
+		const editorsContainer = DOM.append(parent, DOM.$('.preferences-editors-container'));
+		this.sideBySidePreferencesWidget = this._register(this.instantiationService.createInstance(SideBySidePreferencesWidget, editorsContainer));
+		this._onDidCreateWidget.fire(undefined);
+		this._register(this.sideBySidePreferencesWidget.onFocus(() => this.lastFocusedWidget = this.sideBySidePreferencesWidget));
+		this._register(this.sideBySidePreferencesWidget.onDidSettingsTargetChange(target => this.switchSettings(target)));
+
+		this.preferencesRenderers = this._register(this.instantiationService.createInstance(PreferencesRenderersController));
+
+		this._register(this.preferencesRenderers.onDidFilterResultsCountChange(count => this.showSearchResultsMessage(count)));
+	}
+
+	clearSearchResults(): void {
+		if (this.searchWidget) {
+			this.searchWidget.clear();
+		}
+	}
+
+	focusNextResult(): void {
+		if (this.preferencesRenderers) {
+			this.preferencesRenderers.focusNextPreference(true);
+		}
+	}
+
+	focusPreviousResult(): void {
+		if (this.preferencesRenderers) {
+			this.preferencesRenderers.focusNextPreference(false);
+		}
+	}
+
+	editFocusedPreference(): void {
+		this.preferencesRenderers.editFocusedPreference();
+	}
+
+	override setInput(input: PreferencesEditorInput, options: ISettingsEditorOptions | undefined, context: IEditorOpenContext, token: CancellationToken): Promise<void> {
+		this.defaultSettingsEditorContextKey.set(true);
+		this.defaultSettingsJSONEditorContextKey.set(true);
+		if (options && options.query) {
+			this.focusSearch(options.query);
+		}
+
+		return super.setInput(input, options, context, token).then(() => this.updateInput(input, options, context, token));
+	}
+
+	layout(dimension: DOM.Dimension): void {
+		this.searchWidget.layout(dimension);
+		const headerHeight = DOM.getTotalHeight(this.headerContainer);
+		this.sideBySidePreferencesWidget.layout(new DOM.Dimension(dimension.width, dimension.height - headerHeight));
+	}
+
+	override getControl(): IEditorControl | undefined {
+		return this.sideBySidePreferencesWidget.getControl();
+	}
+
+	override focus(): void {
+		if (this.lastFocusedWidget) {
+			this.lastFocusedWidget.focus();
+		}
+	}
+
+	focusSearch(filter?: string): void {
+		if (filter) {
+			this.searchWidget.setValue(filter);
+		}
+
+		this.searchWidget.focus();
+	}
+
+	focusSettingsFileEditor(): void {
+		if (this.sideBySidePreferencesWidget) {
+			this.sideBySidePreferencesWidget.focus();
+		}
+	}
+
+	override clearInput(): void {
+		this.defaultSettingsEditorContextKey.set(false);
+		this.defaultSettingsJSONEditorContextKey.set(false);
+		this.sideBySidePreferencesWidget.clearInput();
+		this.preferencesRenderers.onHidden();
+		super.clearInput();
+	}
+
+	protected override setEditorVisible(visible: boolean, group: IEditorGroup | undefined): void {
+		this.sideBySidePreferencesWidget.setEditorVisible(visible, group);
+		super.setEditorVisible(visible, group);
+	}
+
+	private updateInput(newInput: PreferencesEditorInput, options: ISettingsEditorOptions | undefined, context: IEditorOpenContext, token: CancellationToken): Promise<void> {
+		return this.sideBySidePreferencesWidget.setInput(<DefaultPreferencesEditorInput>newInput.secondary, newInput.primary, options, context, token).then(({ defaultPreferencesRenderer, editablePreferencesRenderer }) => {
+			if (token.isCancellationRequested) {
+				return;
+			}
+
+			this.preferencesRenderers.defaultPreferencesRenderer = defaultPreferencesRenderer!;
+			this.preferencesRenderers.editablePreferencesRenderer = editablePreferencesRenderer!;
+			this.onInputChanged();
+		});
+	}
+
+	private onInputChanged(): void {
+		const query = this.searchWidget.getValue().trim();
+		this.delayedFilterLogging.cancel();
+		this.triggerSearch(query)
+			.then(() => {
+				const result = this.preferencesRenderers.lastFilterResult;
+				if (result) {
+					this.delayedFilterLogging.trigger(() => this.reportFilteringUsed(
+						query,
+						this.preferencesRenderers.lastFilterResult));
+				}
+			});
+	}
+
+	private triggerSearch(query: string): Promise<void> {
+		if (query) {
+			return Promise.all([
+				this.localSearchDelayer.trigger(() => this.preferencesRenderers.localFilterPreferences(query).then(() => { })),
+				this.remoteSearchThrottle.trigger(() => Promise.resolve(this.editorProgressService.showWhile(this.preferencesRenderers.remoteSearchPreferences(query), 500)))
+			]).then(() => { });
+		} else {
+			// When clearing the input, update immediately to clear it
+			this.localSearchDelayer.cancel();
+			this.preferencesRenderers.localFilterPreferences(query);
+
+			this.remoteSearchThrottle.cancel();
+			return this.preferencesRenderers.remoteSearchPreferences(query);
+		}
+	}
+
+	private switchSettings(target: SettingsTarget): void {
+		// Focus the editor if this editor is not active editor
+		if (this.editorService.activeEditorPane !== this) {
+			this.focus();
+		}
+		const promise = this.input && this.input.isDirty() ? this.editorService.save({ editor: this.input, groupId: this.group!.id }) : Promise.resolve(true);
+		promise.then(() => {
+			if (target === ConfigurationTarget.USER_LOCAL) {
+				this.preferencesService.switchSettings(ConfigurationTarget.USER_LOCAL, this.preferencesService.userSettingsResource);
+			} else if (target === ConfigurationTarget.WORKSPACE) {
+				this.preferencesService.switchSettings(ConfigurationTarget.WORKSPACE, this.preferencesService.workspaceSettingsResource!);
+			} else if (target instanceof URI) {
+				this.preferencesService.switchSettings(ConfigurationTarget.WORKSPACE_FOLDER, target);
+			}
+		});
+	}
+
+	private showSearchResultsMessage(count: IPreferencesCount): void {
+		const countValue = count.count;
+		if (count.target) {
+			this.sideBySidePreferencesWidget.setResultCount(count.target, count.count);
+		} else if (this.searchWidget.getValue()) {
+			if (countValue === 0) {
+				this.searchWidget.showMessage(nls.localize('noSettingsFound', "No Settings Found"));
+			} else if (countValue === 1) {
+				this.searchWidget.showMessage(nls.localize('oneSettingFound', "1 Setting Found"));
+			} else {
+				this.searchWidget.showMessage(nls.localize('settingsFound', "{0} Settings Found", countValue));
+			}
+		} else {
+			this.searchWidget.showMessage(nls.localize('totalSettingsMessage', "Total {0} Settings", countValue));
+		}
+	}
+
+	private _countById(settingsGroups: ISettingsGroup[]): IStringDictionary<number> {
+		const result: IStringDictionary<number> = {};
+
+		for (const group of settingsGroups) {
+			let i = 0;
+			for (const section of group.sections) {
+				i += section.settings.length;
+			}
+
+			result[group.id] = i;
+		}
+
+		return result;
+	}
+
+	private reportFilteringUsed(filter: string, filterResult: IFilterResult | null): void {
+		if (filter && filter !== this._lastReportedFilter) {
+			const metadata = filterResult && filterResult.metadata;
+			const counts = filterResult && this._countById(filterResult.filteredGroups);
+
+			let durations: Record<string, number> | undefined;
+			if (metadata) {
+				durations = Object.create(null);
+				Object.keys(metadata).forEach(key => durations![key] = metadata[key].duration);
+			}
+
+			const data = {
+				durations,
+				counts,
+				requestCount: metadata && metadata['nlpResult'] && metadata['nlpResult'].requestCount
+			};
+
+			/* __GDPR__
+				"defaultSettings.filter" : {
+					"durations.nlpresult" : { "classification": "SystemMetaData", "purpose": "FeatureInsight", "isMeasurement": true },
+					"counts.nlpresult" : { "classification": "SystemMetaData", "purpose": "FeatureInsight", "isMeasurement": true },
+					"durations.filterresult" : { "classification": "SystemMetaData", "purpose": "FeatureInsight", "isMeasurement": true },
+					"counts.filterresult" : { "classification": "SystemMetaData", "purpose": "FeatureInsight", "isMeasurement": true },
+					"requestCount" : { "classification": "SystemMetaData", "purpose": "FeatureInsight", "isMeasurement": true }
+				}
+			*/
+			this.telemetryService.publicLog('defaultSettings.filter', data);
+			this._lastReportedFilter = filter;
+		}
+	}
+}
+
+class SettingsNavigator extends ArrayNavigator<ISetting> {
+
+	override next(): ISetting | null {
+		return super.next() || super.first();
+	}
+
+	override previous(): ISetting | null {
+		return super.previous() || super.last();
+	}
+
+	reset(): void {
+		this.index = this.start - 1;
+	}
+}
+
+interface IPreferencesCount {
+	target?: SettingsTarget;
+	count: number;
+}
+
+class PreferencesRenderersController extends Disposable {
+
+	private _defaultPreferencesRenderer!: IPreferencesRenderer<ISetting>;
+	private _defaultPreferencesRendererDisposables: IDisposable[] = [];
+
+	private _editablePreferencesRenderer!: IPreferencesRenderer<ISetting>;
+	private _editablePreferencesRendererDisposables: IDisposable[] = [];
+
+	private _settingsNavigator: SettingsNavigator | null = null;
+	private _remoteFilterCancelToken: CancellationTokenSource | null = null;
+	private _prefsModelsForSearch = new Map<string, ISettingsEditorModel>();
+
+	private _currentLocalSearchProvider: ISearchProvider | null = null;
+	private _currentRemoteSearchProvider: ISearchProvider | null = null;
+	private _lastQuery = '';
+	private _lastFilterResult: IFilterResult | null = null;
+
+	private readonly _onDidFilterResultsCountChange: Emitter<IPreferencesCount> = this._register(new Emitter<IPreferencesCount>());
+	readonly onDidFilterResultsCountChange: Event<IPreferencesCount> = this._onDidFilterResultsCountChange.event;
+
+	constructor(
+		@IPreferencesSearchService private readonly preferencesSearchService: IPreferencesSearchService,
+		@ITelemetryService private readonly telemetryService: ITelemetryService,
 		@IPreferencesService private readonly preferencesService: IPreferencesService,
-		@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService
+		@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,
+		@ILogService private readonly logService: ILogService
 	) {
 		super();
-		this._createPreferencesRenderer();
-		this._register(this.editor.onDidChangeModel(e => this._createPreferencesRenderer()));
-		this._register(this.workspaceContextService.onDidChangeWorkbenchState(() => this._createPreferencesRenderer()));
 	}
 
-	private async _createPreferencesRenderer(): Promise<void> {
-		this._currentRenderer?.dispose();
-		this._currentRenderer = undefined;
+	get lastFilterResult(): IFilterResult | null {
+		return this._lastFilterResult;
+	}
+
+	get defaultPreferencesRenderer(): IPreferencesRenderer<ISetting> {
+		return this._defaultPreferencesRenderer;
+	}
+
+	get editablePreferencesRenderer(): IPreferencesRenderer<ISetting> {
+		return this._editablePreferencesRenderer;
+	}
+
+	set defaultPreferencesRenderer(defaultPreferencesRenderer: IPreferencesRenderer<ISetting>) {
+		if (this._defaultPreferencesRenderer !== defaultPreferencesRenderer) {
+			this._defaultPreferencesRenderer = defaultPreferencesRenderer;
+
+			this._defaultPreferencesRendererDisposables = dispose(this._defaultPreferencesRendererDisposables);
+
+			if (this._defaultPreferencesRenderer) {
+				this._defaultPreferencesRenderer.onUpdatePreference(({ key, value, source }) => {
+					this._editablePreferencesRenderer.updatePreference(key, value, source);
+					this._updatePreference(key, value, source);
+				}, this, this._defaultPreferencesRendererDisposables);
+				this._defaultPreferencesRenderer.onFocusPreference(preference => this._focusPreference(preference, this._editablePreferencesRenderer), this, this._defaultPreferencesRendererDisposables);
+				this._defaultPreferencesRenderer.onClearFocusPreference(preference => this._clearFocus(preference, this._editablePreferencesRenderer), this, this._defaultPreferencesRendererDisposables);
+			}
+		}
+	}
+
+	set editablePreferencesRenderer(editableSettingsRenderer: IPreferencesRenderer<ISetting>) {
+		if (this._editablePreferencesRenderer !== editableSettingsRenderer) {
+			this._editablePreferencesRenderer = editableSettingsRenderer;
+			this._editablePreferencesRendererDisposables = dispose(this._editablePreferencesRendererDisposables);
+			if (this._editablePreferencesRenderer) {
+				(<ISettingsEditorModel>this._editablePreferencesRenderer.preferencesModel)
+					.onDidChangeGroups(this._onEditableContentDidChange, this, this._editablePreferencesRendererDisposables);
+
+				this._editablePreferencesRenderer.onUpdatePreference(({ key, value, source }) => this._updatePreference(key, value, source, true), this, this._defaultPreferencesRendererDisposables);
+			}
+		}
+	}
+
+	private async _onEditableContentDidChange(): Promise<void> {
+		const foundExactMatch = await this.localFilterPreferences(this._lastQuery, true);
+		if (!foundExactMatch) {
+			await this.remoteSearchPreferences(this._lastQuery, true);
+		}
+	}
+
+	onHidden(): void {
+		this._prefsModelsForSearch.forEach(model => model.dispose());
+		this._prefsModelsForSearch = new Map<string, ISettingsEditorModel>();
+	}
+
+	remoteSearchPreferences(query: string, updateCurrentResults?: boolean): Promise<void> {
+		if (this.lastFilterResult && this.lastFilterResult.exactMatch) {
+			// Skip and clear remote search
+			query = '';
+		}
+
+		if (this._remoteFilterCancelToken) {
+			this._remoteFilterCancelToken.cancel();
+			this._remoteFilterCancelToken.dispose();
+			this._remoteFilterCancelToken = null;
+		}
+
+		this._currentRemoteSearchProvider = (updateCurrentResults && this._currentRemoteSearchProvider) || this.preferencesSearchService.getRemoteSearchProvider(query) || null;
+
+		this._remoteFilterCancelToken = new CancellationTokenSource();
+		return this.filterOrSearchPreferences(query, this._currentRemoteSearchProvider!, 'nlpResult', nls.localize('nlpResult', "Natural Language Results"), 1, this._remoteFilterCancelToken.token, updateCurrentResults).then(() => {
+			if (this._remoteFilterCancelToken) {
+				this._remoteFilterCancelToken.dispose();
+				this._remoteFilterCancelToken = null;
+			}
+		}, err => {
+			if (isPromiseCanceledError(err)) {
+				return;
+			} else {
+				onUnexpectedError(err);
+			}
+		});
+	}
+
+	localFilterPreferences(query: string, updateCurrentResults?: boolean): Promise<boolean> {
+		if (this._settingsNavigator) {
+			this._settingsNavigator.reset();
+		}
+
+		this._currentLocalSearchProvider = (updateCurrentResults && this._currentLocalSearchProvider) || this.preferencesSearchService.getLocalSearchProvider(query);
+		return this.filterOrSearchPreferences(query, this._currentLocalSearchProvider, 'filterResult', nls.localize('filterResult', "Filtered Results"), 0, undefined, updateCurrentResults);
+	}
+
+	private filterOrSearchPreferences(query: string, searchProvider: ISearchProvider, groupId: string, groupLabel: string, groupOrder: number, token?: CancellationToken, editableContentOnly?: boolean): Promise<boolean> {
+		this._lastQuery = query;
+
+		const filterPs: Promise<IFilterResult | undefined>[] = [this._filterOrSearchPreferences(query, this.editablePreferencesRenderer, searchProvider, groupId, groupLabel, groupOrder, token)];
+		if (!editableContentOnly) {
+			filterPs.push(
+				this._filterOrSearchPreferences(query, this.defaultPreferencesRenderer, searchProvider, groupId, groupLabel, groupOrder, token));
+			filterPs.push(
+				this.searchAllSettingsTargets(query, searchProvider, groupId, groupLabel, groupOrder, token).then(() => undefined));
+		}
+
+		return Promise.all(filterPs).then(results => {
+			let [editableFilterResult, defaultFilterResult] = results;
+
+			if (!defaultFilterResult && editableContentOnly) {
+				defaultFilterResult = this.lastFilterResult!;
+			}
+
+			this.consolidateAndUpdate(defaultFilterResult, editableFilterResult);
+			this._lastFilterResult = withUndefinedAsNull(defaultFilterResult);
+
+			return !!(defaultFilterResult && defaultFilterResult.exactMatch);
+		});
+	}
+
+	private searchAllSettingsTargets(query: string, searchProvider: ISearchProvider, groupId: string, groupLabel: string, groupOrder: number, token?: CancellationToken): Promise<void> {
+		const searchPs = [
+			this.searchSettingsTarget(query, searchProvider, ConfigurationTarget.WORKSPACE, groupId, groupLabel, groupOrder, token),
+			this.searchSettingsTarget(query, searchProvider, ConfigurationTarget.USER_LOCAL, groupId, groupLabel, groupOrder, token)
+		];
+
+		for (const folder of this.workspaceContextService.getWorkspace().folders) {
+			const folderSettingsResource = this.preferencesService.getFolderSettingsResource(folder.uri);
+			searchPs.push(this.searchSettingsTarget(query, searchProvider, withNullAsUndefined(folderSettingsResource), groupId, groupLabel, groupOrder, token));
+		}
+
+
+		return Promise.all(searchPs).then(() => { });
+	}
+
+	private searchSettingsTarget(query: string, provider: ISearchProvider, target: SettingsTarget | undefined, groupId: string, groupLabel: string, groupOrder: number, token?: CancellationToken): Promise<void> {
+		if (!query) {
+			// Don't open the other settings targets when query is empty
+			this._onDidFilterResultsCountChange.fire({ target, count: 0 });
+			return Promise.resolve();
+		}
+
+		return this.getPreferencesEditorModel(target).then<IFilterResult | undefined>(model => {
+			return model && this._filterOrSearchPreferencesModel('', <ISettingsEditorModel>model, provider, groupId, groupLabel, groupOrder, token);
+		}).then(result => {
+			const count = result ? this._flatten(result.filteredGroups).length : 0;
+			this._onDidFilterResultsCountChange.fire({ target, count });
+		}, err => {
+			if (!isPromiseCanceledError(err)) {
+				return Promise.reject(err);
+			}
+
+			return undefined;
+		});
+	}
+
+	private async getPreferencesEditorModel(target: SettingsTarget | undefined): Promise<ISettingsEditorModel | undefined> {
+		const resource = target === ConfigurationTarget.USER_LOCAL ? this.preferencesService.userSettingsResource :
+			target === ConfigurationTarget.USER_REMOTE ? this.preferencesService.userSettingsResource :
+				target === ConfigurationTarget.WORKSPACE ? this.preferencesService.workspaceSettingsResource :
+					target;
+
+		if (!resource) {
+			return undefined;
+		}
+
+		const targetKey = resource.toString();
+		if (!this._prefsModelsForSearch.has(targetKey)) {
+			try {
+				const model = await this.preferencesService.createPreferencesEditorModel(resource);
+				if (model) {
+					this._register(model);
+					this._prefsModelsForSearch.set(targetKey, <ISettingsEditorModel>model);
+				}
+			} catch (e) {
+				// Will throw when the settings file doesn't exist.
+				return undefined;
+			}
+		}
+
+		return this._prefsModelsForSearch.get(targetKey);
+	}
+
+	focusNextPreference(forward: boolean = true) {
+		if (!this._settingsNavigator) {
+			return;
+		}
+
+		const setting = forward ? this._settingsNavigator.next() : this._settingsNavigator.previous();
+		this._focusPreference(setting, this._defaultPreferencesRenderer);
+		this._focusPreference(setting, this._editablePreferencesRenderer);
+	}
+
+	editFocusedPreference(): void {
+		if (!this._settingsNavigator || !this._settingsNavigator.current()) {
+			return;
+		}
+
+		const setting = this._settingsNavigator.current();
+		const shownInEditableRenderer = this._editablePreferencesRenderer.editPreference(setting!);
+		if (!shownInEditableRenderer) {
+			this.defaultPreferencesRenderer.editPreference(setting!);
+		}
+	}
+
+	private _filterOrSearchPreferences(filter: string, preferencesRenderer: IPreferencesRenderer<ISetting>, provider: ISearchProvider, groupId: string, groupLabel: string, groupOrder: number, token?: CancellationToken): Promise<IFilterResult | undefined> {
+		if (!preferencesRenderer) {
+			return Promise.resolve(undefined);
+		}
+
+		const model = <ISettingsEditorModel>preferencesRenderer.preferencesModel;
+		return this._filterOrSearchPreferencesModel(filter, model, provider, groupId, groupLabel, groupOrder, token).then(filterResult => {
+			preferencesRenderer.filterPreferences(filterResult);
+			return filterResult;
+		});
+	}
+
+	private _filterOrSearchPreferencesModel(filter: string, model: ISettingsEditorModel, provider: ISearchProvider, groupId: string, groupLabel: string, groupOrder: number, token?: CancellationToken): Promise<IFilterResult | undefined> {
+		const searchP = provider ? provider.searchModel(model, token) : Promise.resolve(null);
+		return searchP
+			.then(null, err => {
+				if (isPromiseCanceledError(err)) {
+					return Promise.reject(err);
+				} else {
+					/* __GDPR__
+						"defaultSettings.searchError" : {
+							"message": { "classification": "CallstackOrException", "purpose": "FeatureInsight" }
+						}
+					*/
+					const message = getErrorMessage(err).trim();
+					if (message && message !== 'Error') {
+						// "Error" = any generic network error
+						this.telemetryService.publicLogError('defaultSettings.searchError', { message });
+						this.logService.info('Setting search error: ' + message);
+					}
+					return undefined;
+				}
+			})
+			.then(searchResult => {
+				if (token && token.isCancellationRequested) {
+					searchResult = null;
+				}
+
+				const filterResult = searchResult ?
+					model.updateResultGroup(groupId, {
+						id: groupId,
+						label: groupLabel,
+						result: searchResult,
+						order: groupOrder
+					}) :
+					model.updateResultGroup(groupId, undefined);
+
+				if (filterResult) {
+					filterResult.query = filter;
+					filterResult.exactMatch = !!searchResult && searchResult.exactMatch;
+				}
+
+				return filterResult;
+			});
+	}
+
+	private consolidateAndUpdate(defaultFilterResult: IFilterResult | undefined, editableFilterResult: IFilterResult | undefined): void {
+		const defaultPreferencesFilteredGroups = defaultFilterResult ? defaultFilterResult.filteredGroups : this._getAllPreferences(this._defaultPreferencesRenderer);
+		const editablePreferencesFilteredGroups = editableFilterResult ? editableFilterResult.filteredGroups : this._getAllPreferences(this._editablePreferencesRenderer);
+		const consolidatedSettings = this._consolidateSettings(editablePreferencesFilteredGroups, defaultPreferencesFilteredGroups);
+
+		// Maintain the current navigation position when updating SettingsNavigator
+		const current = this._settingsNavigator && this._settingsNavigator.current();
+		const navigatorSettings = this._lastQuery ? consolidatedSettings : [];
+		const currentIndex = current ?
+			navigatorSettings.findIndex(s => s.key === current.key) :
+			-1;
+
+		this._settingsNavigator = new SettingsNavigator(navigatorSettings, Math.max(currentIndex, 0));
+
+		if (currentIndex >= 0) {
+			this._settingsNavigator.next();
+			const newCurrent = this._settingsNavigator.current();
+			this._focusPreference(newCurrent, this._defaultPreferencesRenderer);
+			this._focusPreference(newCurrent, this._editablePreferencesRenderer);
+		}
 
+		const totalCount = consolidatedSettings.length;
+		this._onDidFilterResultsCountChange.fire({ count: totalCount });
+	}
+
+	private _getAllPreferences(preferencesRenderer: IPreferencesRenderer<ISetting>): ISettingsGroup[] {
+		return preferencesRenderer ? (<ISettingsEditorModel>preferencesRenderer.preferencesModel).settingsGroups : [];
+	}
+
+	private _focusPreference(preference: ISetting | null, preferencesRenderer: IPreferencesRenderer<ISetting>): void {
+		if (preference && preferencesRenderer) {
+			preferencesRenderer.focusPreference(preference);
+		}
+	}
+
+	private _clearFocus(preference: ISetting, preferencesRenderer: IPreferencesRenderer<ISetting>): void {
+		if (preference && preferencesRenderer) {
+			preferencesRenderer.clearFocus(preference);
+		}
+	}
+
+	private _updatePreference(key: string, value: any, source: ISetting, fromEditableSettings?: boolean): void {
+		const data: { [key: string]: any; } = {
+			userConfigurationKeys: [key]
+		};
+
+		if (this.lastFilterResult) {
+			data['editableSide'] = !!fromEditableSettings;
+
+			const nlpMetadata = this.lastFilterResult.metadata && this.lastFilterResult.metadata['nlpResult'];
+			if (nlpMetadata) {
+				const sortedKeys = Object.keys(nlpMetadata.scoredResults).sort((a, b) => nlpMetadata.scoredResults[b].score - nlpMetadata.scoredResults[a].score);
+				const suffix = '##' + key;
+				data['nlpIndex'] = sortedKeys.findIndex(key => key.endsWith(suffix));
+			}
+
+			const settingLocation = this._findSetting(this.lastFilterResult, key);
+			if (settingLocation) {
+				data['groupId'] = this.lastFilterResult.filteredGroups[settingLocation.groupIdx].id;
+				data['displayIdx'] = settingLocation.overallSettingIdx;
+			}
+		}
+
+		/* __GDPR__
+			"defaultSettingsActions.copySetting" : {
+				"userConfigurationKeys" : { "classification": "SystemMetaData", "purpose": "FeatureInsight" },
+				"nlpIndex" : { "classification": "SystemMetaData", "purpose": "FeatureInsight", "isMeasurement": true },
+				"groupId" : { "classification": "SystemMetaData", "purpose": "FeatureInsight" },
+				"displayIdx" : { "classification": "SystemMetaData", "purpose": "FeatureInsight", "isMeasurement": true },
+				"editableSide" : { "classification": "SystemMetaData", "purpose": "FeatureInsight", "isMeasurement": true }
+			}
+		*/
+		this.telemetryService.publicLog('defaultSettingsActions.copySetting', data);
+	}
+
+	private _findSetting(filterResult: IFilterResult, key: string): { groupIdx: number, settingIdx: number, overallSettingIdx: number; } | undefined {
+		let overallSettingIdx = 0;
+
+		for (let groupIdx = 0; groupIdx < filterResult.filteredGroups.length; groupIdx++) {
+			const group = filterResult.filteredGroups[groupIdx];
+			for (let settingIdx = 0; settingIdx < group.sections[0].settings.length; settingIdx++) {
+				const setting = group.sections[0].settings[settingIdx];
+				if (key === setting.key) {
+					return { groupIdx, settingIdx, overallSettingIdx };
+				}
+
+				overallSettingIdx++;
+			}
+		}
+
+		return undefined;
+	}
+
+	private _consolidateSettings(editableSettingsGroups: ISettingsGroup[], defaultSettingsGroups: ISettingsGroup[]): ISetting[] {
+		const defaultSettings = this._flatten(defaultSettingsGroups);
+		const editableSettings = this._flatten(editableSettingsGroups).filter(secondarySetting => defaultSettings.every(primarySetting => primarySetting.key !== secondarySetting.key));
+		return [...defaultSettings, ...editableSettings];
+	}
+
+	private _flatten(settingsGroups: ISettingsGroup[]): ISetting[] {
+		const settings: ISetting[] = [];
+		for (const group of settingsGroups) {
+			for (const section of group.sections) {
+				settings.push(...section.settings);
+			}
+		}
+
+		return settings;
+	}
+
+	override dispose(): void {
+		dispose(this._defaultPreferencesRendererDisposables);
+		dispose(this._editablePreferencesRendererDisposables);
+		super.dispose();
+	}
+}
+
+class SideBySidePreferencesWidget extends Widget {
+
+	private dimension: DOM.Dimension = new DOM.Dimension(0, 0);
+
+	private defaultPreferencesHeader: HTMLElement;
+	private defaultPreferencesEditor: DefaultPreferencesEditor;
+	private editablePreferencesEditor: EditorPane | null = null;
+	private defaultPreferencesEditorContainer: HTMLElement;
+	private editablePreferencesEditorContainer: HTMLElement;
+
+	private settingsTargetsWidget: SettingsTargetsWidget;
+
+	private readonly _onFocus = this._register(new Emitter<void>());
+	readonly onFocus: Event<void> = this._onFocus.event;
+
+	private readonly _onDidSettingsTargetChange = this._register(new Emitter<SettingsTarget>());
+	readonly onDidSettingsTargetChange: Event<SettingsTarget> = this._onDidSettingsTargetChange.event;
+
+	private splitview: SplitView;
+
+	private isVisible = false;
+	private group: IEditorGroup | undefined;
+
+	get minimumWidth(): number { return this.splitview.minimumSize; }
+	get maximumWidth(): number { return this.splitview.maximumSize; }
+
+	constructor(
+		parentElement: HTMLElement,
+		@IInstantiationService private readonly instantiationService: IInstantiationService,
+		@IThemeService private readonly themeService: IThemeService,
+		@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,
+		@IPreferencesService private readonly preferencesService: IPreferencesService,
+	) {
+		super();
+
+		parentElement.classList.add('side-by-side-preferences-editor');
+
+		this.splitview = new SplitView(parentElement, { orientation: Orientation.HORIZONTAL });
+		this._register(this.splitview);
+		this._register(this.splitview.onDidSashReset(() => this.splitview.distributeViewSizes()));
+
+		this.defaultPreferencesEditorContainer = DOM.$('.default-preferences-editor-container');
+
+		const defaultPreferencesHeaderContainer = DOM.append(this.defaultPreferencesEditorContainer, DOM.$('.preferences-header-container'));
+		this.defaultPreferencesHeader = DOM.append(defaultPreferencesHeaderContainer, DOM.$('div.default-preferences-header'));
+		this.defaultPreferencesHeader.textContent = nls.localize('defaultSettings', "Default Settings");
+
+		this.defaultPreferencesEditor = this._register(this.instantiationService.createInstance(DefaultPreferencesEditor));
+		this.defaultPreferencesEditor.create(this.defaultPreferencesEditorContainer);
+
+		this.splitview.addView({
+			element: this.defaultPreferencesEditorContainer,
+			layout: size => this.defaultPreferencesEditor.layout(new DOM.Dimension(size, this.dimension.height - 34 /* height of header container */)),
+			minimumSize: 220,
+			maximumSize: Number.POSITIVE_INFINITY,
+			onDidChange: Event.None
+		}, Sizing.Distribute);
+
+		this.editablePreferencesEditorContainer = DOM.$('.editable-preferences-editor-container');
+		const editablePreferencesHeaderContainer = DOM.append(this.editablePreferencesEditorContainer, DOM.$('.preferences-header-container'));
+		this.settingsTargetsWidget = this._register(this.instantiationService.createInstance(SettingsTargetsWidget, editablePreferencesHeaderContainer, undefined));
+		this._register(this.settingsTargetsWidget.onDidTargetChange(target => this._onDidSettingsTargetChange.fire(target)));
+
+		this._register(attachStylerCallback(this.themeService, { scrollbarShadow }, colors => {
+			const shadow = colors.scrollbarShadow ? colors.scrollbarShadow.toString() : null;
+
+			this.editablePreferencesEditorContainer.style.boxShadow = shadow ? `-6px 0 5px -5px ${shadow}` : '';
+		}));
+
+		this.splitview.addView({
+			element: this.editablePreferencesEditorContainer,
+			layout: size => this.editablePreferencesEditor && this.editablePreferencesEditor.layout(new DOM.Dimension(size, this.dimension.height - 34 /* height of header container */)),
+			minimumSize: 220,
+			maximumSize: Number.POSITIVE_INFINITY,
+			onDidChange: Event.None
+		}, Sizing.Distribute);
+
+		const focusTracker = this._register(DOM.trackFocus(parentElement));
+		this._register(focusTracker.onDidFocus(() => this._onFocus.fire()));
+	}
+
+	setInput(defaultPreferencesEditorInput: DefaultPreferencesEditorInput, editablePreferencesEditorInput: EditorInput, options: ISettingsEditorOptions | undefined, context: IEditorOpenContext, token: CancellationToken): Promise<{ defaultPreferencesRenderer?: IPreferencesRenderer<ISetting>, editablePreferencesRenderer?: IPreferencesRenderer<ISetting>; }> {
+		this.getOrCreateEditablePreferencesEditor(editablePreferencesEditorInput);
+		this.settingsTargetsWidget.settingsTarget = this.getSettingsTarget(editablePreferencesEditorInput.resource!);
+		return Promise.all([
+			this.updateInput(this.defaultPreferencesEditor, defaultPreferencesEditorInput, DefaultSettingsEditorContribution.ID, editablePreferencesEditorInput.resource!, options, context, token),
+			this.updateInput(this.editablePreferencesEditor!, editablePreferencesEditorInput, SettingsEditorContribution.ID, defaultPreferencesEditorInput.resource!, options, context, token)
+		])
+			.then(([defaultPreferencesRenderer, editablePreferencesRenderer]) => {
+				if (token.isCancellationRequested) {
+					return {};
+				}
+
+				this.defaultPreferencesHeader.textContent = withUndefinedAsNull(defaultPreferencesRenderer && this.getDefaultPreferencesHeaderText((<DefaultSettingsEditorModel>defaultPreferencesRenderer.preferencesModel).target));
+				return { defaultPreferencesRenderer, editablePreferencesRenderer };
+			});
+	}
+
+	private getDefaultPreferencesHeaderText(target: ConfigurationTarget): string {
+		switch (target) {
+			case ConfigurationTarget.USER_LOCAL:
+				return nls.localize('defaultUserSettings', "Default User Settings");
+			case ConfigurationTarget.WORKSPACE:
+				return nls.localize('defaultWorkspaceSettings', "Default Workspace Settings");
+			case ConfigurationTarget.WORKSPACE_FOLDER:
+				return nls.localize('defaultFolderSettings', "Default Folder Settings");
+		}
+		return '';
+	}
+
+	setResultCount(settingsTarget: SettingsTarget, count: number): void {
+		this.settingsTargetsWidget.setResultCount(settingsTarget, count);
+	}
+
+	layout(dimension: DOM.Dimension = this.dimension): void {
+		this.dimension = dimension;
+		this.splitview.layout(dimension.width);
+	}
+
+	focus(): void {
+		if (this.editablePreferencesEditor) {
+			this.editablePreferencesEditor.focus();
+		}
+	}
+
+	getControl(): IEditorControl | undefined {
+		return this.editablePreferencesEditor ? this.editablePreferencesEditor.getControl() : undefined;
+	}
+
+	clearInput(): void {
+		if (this.defaultPreferencesEditor) {
+			this.defaultPreferencesEditor.clearInput();
+		}
+		if (this.editablePreferencesEditor) {
+			this.editablePreferencesEditor.clearInput();
+		}
+	}
+
+	setEditorVisible(visible: boolean, group: IEditorGroup | undefined): void {
+		this.isVisible = visible;
+		this.group = group;
+
+		if (this.defaultPreferencesEditor) {
+			this.defaultPreferencesEditor.setVisible(this.isVisible, this.group);
+		}
+		if (this.editablePreferencesEditor) {
+			this.editablePreferencesEditor.setVisible(this.isVisible, this.group);
+		}
+	}
+
+	private getOrCreateEditablePreferencesEditor(editorInput: EditorInput): EditorPane {
+		if (this.editablePreferencesEditor) {
+			return this.editablePreferencesEditor;
+		}
+		const descriptor = Registry.as<IEditorPaneRegistry>(EditorExtensions.EditorPane).getEditorPane(editorInput);
+		const editor = descriptor!.instantiate(this.instantiationService);
+		this.editablePreferencesEditor = editor;
+		this.editablePreferencesEditor.create(this.editablePreferencesEditorContainer);
+		this.editablePreferencesEditor.setVisible(this.isVisible, this.group);
+		this.layout();
+
+		return editor;
+	}
+
+	private async updateInput(editor: EditorPane, input: EditorInput, editorContributionId: string, associatedPreferencesModelUri: URI, options: ISettingsEditorOptions | undefined, context: IEditorOpenContext, token: CancellationToken): Promise<IPreferencesRenderer<ISetting> | undefined> {
+		await editor.setInput(input, options, context, token);
+
+		if (token.isCancellationRequested) {
+			return undefined;
+		}
+
+		return withNullAsUndefined(
+			await (<CodeEditorWidget>editor.getControl()).getContribution<ISettingsEditorContribution>(editorContributionId).updatePreferencesRenderer(associatedPreferencesModelUri));
+	}
+
+	private getSettingsTarget(resource: URI): SettingsTarget {
+		if (this.preferencesService.userSettingsResource.toString() === resource.toString()) {
+			return ConfigurationTarget.USER_LOCAL;
+		}
+
+		const workspaceSettingsResource = this.preferencesService.workspaceSettingsResource;
+		if (workspaceSettingsResource && workspaceSettingsResource.toString() === resource.toString()) {
+			return ConfigurationTarget.WORKSPACE;
+		}
+
+		const folder = this.workspaceContextService.getWorkspaceFolder(resource);
+		if (folder) {
+			return folder.uri;
+		}
+
+		return ConfigurationTarget.USER_LOCAL;
+	}
+
+	private disposeEditors(): void {
+		if (this.defaultPreferencesEditor) {
+			this.defaultPreferencesEditor.dispose();
+		}
+		if (this.editablePreferencesEditor) {
+			this.editablePreferencesEditor.dispose();
+		}
+	}
+
+	override dispose(): void {
+		this.disposeEditors();
+		super.dispose();
+	}
+}
+
+export class DefaultPreferencesEditor extends BaseTextEditor {
+
+	static readonly ID: string = 'workbench.editor.defaultPreferences';
+
+	constructor(
+		@ITelemetryService telemetryService: ITelemetryService,
+		@IInstantiationService instantiationService: IInstantiationService,
+		@IStorageService storageService: IStorageService,
+		@ITextResourceConfigurationService configurationService: ITextResourceConfigurationService,
+		@IThemeService themeService: IThemeService,
+		@IEditorGroupsService editorGroupService: IEditorGroupsService,
+		@IEditorService editorService: IEditorService
+	) {
+		super(DefaultPreferencesEditor.ID, telemetryService, instantiationService, storageService, configurationService, themeService, editorService, editorGroupService);
+	}
+
+	private static _getContributions(): IEditorContributionDescription[] {
+		const skipContributions = [FoldingController.ID, SelectionHighlighter.ID, FindController.ID];
+		const contributions = EditorExtensionsRegistry.getEditorContributions().filter(c => skipContributions.indexOf(c.id) === -1);
+		contributions.push({ id: DefaultSettingsEditorContribution.ID, ctor: DefaultSettingsEditorContribution as IConstructorSignature1<ICodeEditor, editorCommon.IEditorContribution> });
+		return contributions;
+	}
+
+	override createEditorControl(parent: HTMLElement, configuration: ICodeEditorOptions): editorCommon.IEditor {
+		const editor = this.instantiationService.createInstance(CodeEditorWidget, parent, configuration, { contributions: DefaultPreferencesEditor._getContributions() });
+
+		// Inform user about editor being readonly if user starts type
+		this._register(editor.onDidType(() => this.showReadonlyHint(editor)));
+		this._register(editor.onDidPaste(() => this.showReadonlyHint(editor)));
+
+		return editor;
+	}
+
+	private showReadonlyHint(editor: ICodeEditor): void {
+		const messageController = MessageController.get(editor);
+		if (!messageController.isVisible()) {
+			messageController.showMessage(nls.localize('defaultEditorReadonly', "Edit in the right hand side editor to override defaults."), editor.getSelection()!.getPosition());
+		}
+	}
+
+	protected override getConfigurationOverrides(): ICodeEditorOptions {
+		const options = super.getConfigurationOverrides();
+		options.readOnly = true;
+		if (this.input) {
+			options.lineNumbers = 'off';
+			options.renderLineHighlight = 'none';
+			options.scrollBeyondLastLine = false;
+			options.folding = false;
+			options.renderWhitespace = 'none';
+			options.wordWrap = 'on';
+			options.renderIndentGuides = false;
+			options.rulers = [];
+			options.glyphMargin = true;
+			options.minimap = {
+				enabled: false
+			};
+			options.renderValidationDecorations = 'editable';
+		}
+		return options;
+	}
+
+	override async setInput(input: DefaultPreferencesEditorInput, options: ISettingsEditorOptions | undefined, context: IEditorOpenContext, token: CancellationToken): Promise<void> {
+		await super.setInput(input, options, context, token);
+		const editorModel = await this.input!.resolve();
+		if (!editorModel) {
+			return;
+		}
+		if (token.isCancellationRequested) {
+			return;
+		}
+		await editorModel.resolve();
+		if (token.isCancellationRequested) {
+			return;
+		}
+		const editor = assertIsDefined(this.getControl());
+		editor.setModel((<TextResourceEditorModel>editorModel).textEditorModel);
+	}
+
+	override clearInput(): void {
+		// Clear Model
+		const editor = this.getControl();
+		if (editor) {
+			editor.setModel(null);
+		}
+
+		// Pass to super
+		super.clearInput();
+	}
+
+	override layout(dimension: DOM.Dimension) {
+		const editor = assertIsDefined(this.getControl());
+		editor.layout(dimension);
+	}
+
+	protected getAriaLabel(): string {
+		return nls.localize('preferencesAriaLabel', "Default preferences. Readonly.");
+	}
+}
+
+interface ISettingsEditorContribution extends editorCommon.IEditorContribution {
+
+	updatePreferencesRenderer(associatedPreferencesModelUri: URI): Promise<IPreferencesRenderer<ISetting> | null>;
+
+}
+
+abstract class AbstractSettingsEditorContribution extends Disposable implements ISettingsEditorContribution {
+
+	private preferencesRendererCreationPromise: Promise<IPreferencesRenderer<ISetting> | null> | null = null;
+
+	constructor(protected editor: ICodeEditor,
+		@IInstantiationService protected instantiationService: IInstantiationService,
+		@IPreferencesService protected preferencesService: IPreferencesService,
+		@IWorkspaceContextService protected workspaceContextService: IWorkspaceContextService
+	) {
+		super();
+		this._register(this.editor.onDidChangeModel(() => this._onModelChanged()));
+	}
+
+	updatePreferencesRenderer(associatedPreferencesModelUri: URI): Promise<IPreferencesRenderer<ISetting> | null> {
+		if (!this.preferencesRendererCreationPromise) {
+			this.preferencesRendererCreationPromise = this._createPreferencesRenderer();
+		}
+
+		if (this.preferencesRendererCreationPromise) {
+			return this._hasAssociatedPreferencesModelChanged(associatedPreferencesModelUri)
+				.then(changed => changed ? this._updatePreferencesRenderer(associatedPreferencesModelUri) : this.preferencesRendererCreationPromise);
+		}
+
+		return Promise.resolve(null);
+	}
+
+	protected _onModelChanged(): void {
 		const model = this.editor.getModel();
+		this.disposePreferencesRenderer();
 		if (model) {
-			const settingsModel = await this.preferencesService.createPreferencesEditorModel(model.uri);
-			if (settingsModel instanceof SettingsEditorModel && this.editor.getModel()) {
-				switch (settingsModel.configurationTarget) {
-					case ConfigurationTarget.WORKSPACE:
-						this._currentRenderer = this.instantiationService.createInstance(WorkspaceSettingsRenderer, this.editor, settingsModel);
-						break;
-					default:
-						this._currentRenderer = this.instantiationService.createInstance(UserSettingsRenderer, this.editor, settingsModel);
-						break;
+			this.preferencesRendererCreationPromise = this._createPreferencesRenderer();
+		}
+	}
+
+	private _hasAssociatedPreferencesModelChanged(associatedPreferencesModelUri: URI): Promise<boolean> {
+		return this.preferencesRendererCreationPromise!.then(preferencesRenderer => {
+			return !(preferencesRenderer && preferencesRenderer.getAssociatedPreferencesModel() && preferencesRenderer.getAssociatedPreferencesModel().uri!.toString() === associatedPreferencesModelUri.toString());
+		});
+	}
+
+	private _updatePreferencesRenderer(associatedPreferencesModelUri: URI): Promise<IPreferencesRenderer<ISetting> | null> {
+		return this.preferencesService.createPreferencesEditorModel<ISetting>(associatedPreferencesModelUri)
+			.then(associatedPreferencesEditorModel => {
+				if (associatedPreferencesEditorModel) {
+					return this.preferencesRendererCreationPromise!.then(preferencesRenderer => {
+						if (preferencesRenderer) {
+							const associatedPreferencesModel = preferencesRenderer.getAssociatedPreferencesModel();
+							if (associatedPreferencesModel) {
+								associatedPreferencesModel.dispose();
+							}
+							preferencesRenderer.setAssociatedPreferencesModel(associatedPreferencesEditorModel);
+						}
+						return preferencesRenderer;
+					});
 				}
-			}
+				return null;
+			});
+	}
+
+	private disposePreferencesRenderer(): void {
+		if (this.preferencesRendererCreationPromise) {
+			this.preferencesRendererCreationPromise.then(preferencesRenderer => {
+				if (preferencesRenderer) {
+					const associatedPreferencesModel = preferencesRenderer.getAssociatedPreferencesModel();
+					if (associatedPreferencesModel) {
+						associatedPreferencesModel.dispose();
+					}
+					preferencesRenderer.preferencesModel.dispose();
+					preferencesRenderer.dispose();
+				}
+			});
+			this.preferencesRendererCreationPromise = Promise.resolve(null);
+		}
+	}
+
+	override dispose() {
+		this.disposePreferencesRenderer();
+		super.dispose();
+	}
+
+	protected abstract _createPreferencesRenderer(): Promise<IPreferencesRenderer<ISetting> | null> | null;
+}
+
+export class DefaultSettingsEditorContribution extends AbstractSettingsEditorContribution implements ISettingsEditorContribution {
+
+	static readonly ID: string = 'editor.contrib.defaultsettings';
+
+	protected _createPreferencesRenderer(): Promise<IPreferencesRenderer<ISetting> | null> | null {
+		return this.preferencesService.createPreferencesEditorModel(this.editor.getModel()!.uri)
+			.then(editorModel => {
+				if (editorModel instanceof DefaultSettingsEditorModel && this.editor.getModel()) {
+					const preferencesRenderer = this.instantiationService.createInstance(DefaultSettingsRenderer, this.editor, editorModel);
+					preferencesRenderer.render();
+					return preferencesRenderer;
+				}
+				return null;
+			});
+	}
+}
+
+class SettingsEditorContribution extends AbstractSettingsEditorContribution implements ISettingsEditorContribution {
+
+	static readonly ID: string = 'editor.contrib.settings';
 
-			this._currentRenderer?.render();
+	constructor(editor: ICodeEditor,
+		@IInstantiationService instantiationService: IInstantiationService,
+		@IPreferencesService preferencesService: IPreferencesService,
+		@IWorkspaceContextService workspaceContextService: IWorkspaceContextService
+	) {
+		super(editor, instantiationService, preferencesService, workspaceContextService);
+		this._register(this.workspaceContextService.onDidChangeWorkbenchState(() => this._onModelChanged()));
+	}
+
+	protected _createPreferencesRenderer(): Promise<IPreferencesRenderer<ISetting> | null> | null {
+		const model = this.editor.getModel();
+		if (model) {
+			return this.preferencesService.createPreferencesEditorModel(model.uri)
+				.then(settingsModel => {
+					if (settingsModel instanceof SettingsEditorModel && this.editor.getModel()) {
+						switch (settingsModel.configurationTarget) {
+							case ConfigurationTarget.USER_LOCAL:
+							case ConfigurationTarget.USER_REMOTE:
+								return this.instantiationService.createInstance(UserSettingsRenderer, this.editor, settingsModel);
+							case ConfigurationTarget.WORKSPACE:
+								return this.instantiationService.createInstance(WorkspaceSettingsRenderer, this.editor, settingsModel);
+							case ConfigurationTarget.WORKSPACE_FOLDER:
+								return this.instantiationService.createInstance(FolderSettingsRenderer, this.editor, settingsModel);
+						}
+					}
+					return null;
+				})
+				.then(preferencesRenderer => {
+					if (preferencesRenderer) {
+						preferencesRenderer.render();
+					}
+					return preferencesRenderer;
+				});
 		}
+		return null;
 	}
 }
+
+registerEditorContribution(SettingsEditorContribution.ID, SettingsEditorContribution);
diff --git a/src/vs/workbench/contrib/preferences/browser/preferencesRenderers.ts b/src/vs/workbench/contrib/preferences/browser/preferencesRenderers.ts
index 234adcc..8e0e385 100644
--- a/src/vs/workbench/contrib/preferences/browser/preferencesRenderers.ts
+++ b/src/vs/workbench/contrib/preferences/browser/preferencesRenderers.ts
@@ -6,75 +6,124 @@
 import { EventHelper, getDomNodePagePosition } from 'vs/base/browser/dom';
 import { IAction, SubmenuAction } from 'vs/base/common/actions';
 import { Delayer } from 'vs/base/common/async';
-import { CancellationToken } from 'vs/base/common/cancellation';
 import { Emitter, Event } from 'vs/base/common/event';
 import { IJSONSchema } from 'vs/base/common/jsonSchema';
-import { Disposable, IDisposable } from 'vs/base/common/lifecycle';
-import { ResourceMap } from 'vs/base/common/map';
+import { Disposable, IDisposable, DisposableStore } from 'vs/base/common/lifecycle';
 import { ICodeEditor, IEditorMouseEvent, MouseTargetType } from 'vs/editor/browser/editorBrowser';
-import { EditorOption } from 'vs/editor/common/config/editorOptions';
 import { ICursorPositionChangedEvent } from 'vs/editor/common/controller/cursorEvents';
 import { Position } from 'vs/editor/common/core/position';
 import { IRange, Range } from 'vs/editor/common/core/range';
-import { Selection } from 'vs/editor/common/core/selection';
 import * as editorCommon from 'vs/editor/common/editorCommon';
-import { IModelDeltaDecoration, ITextModel, TrackedRangeStickiness } from 'vs/editor/common/model';
+import { IModelDeltaDecoration, TrackedRangeStickiness, ITextModel } from 'vs/editor/common/model';
 import { ModelDecorationOptions } from 'vs/editor/common/model/textModel';
-import * as modes from 'vs/editor/common/modes';
-import { CodeActionKind } from 'vs/editor/contrib/codeAction/types';
 import * as nls from 'vs/nls';
 import { ConfigurationTarget, IConfigurationService } from 'vs/platform/configuration/common/configuration';
-import { ConfigurationScope, Extensions as ConfigurationExtensions, IConfigurationPropertySchema, IConfigurationRegistry, overrideIdentifierFromKey, OVERRIDE_PROPERTY_PATTERN } from 'vs/platform/configuration/common/configurationRegistry';
+import { ConfigurationScope, Extensions as ConfigurationExtensions, IConfigurationPropertySchema, IConfigurationRegistry, OVERRIDE_PROPERTY_PATTERN, overrideIdentifierFromKey } from 'vs/platform/configuration/common/configurationRegistry';
 import { IContextMenuService } from 'vs/platform/contextview/browser/contextView';
 import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
-import { IMarkerData, IMarkerService, MarkerSeverity, MarkerTag } from 'vs/platform/markers/common/markers';
 import { Registry } from 'vs/platform/registry/common/platform';
-import { ThemeIcon } from 'vs/platform/theme/common/themeService';
+import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
 import { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';
-import { IWorkspaceTrustManagementService } from 'vs/platform/workspace/common/workspaceTrust';
 import { RangeHighlightDecorations } from 'vs/workbench/browser/codeeditor';
-import { settingsEditIcon } from 'vs/workbench/contrib/preferences/browser/preferencesIcons';
-import { EditPreferenceWidget } from 'vs/workbench/contrib/preferences/browser/preferencesWidgets';
-import { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';
-import { IPreferencesEditorModel, IPreferencesService, ISetting, ISettingsEditorModel, ISettingsGroup } from 'vs/workbench/services/preferences/common/preferences';
+import { DefaultSettingsHeaderWidget, EditPreferenceWidget, SettingsGroupTitleWidget, SettingsHeaderWidget } from 'vs/workbench/contrib/preferences/browser/preferencesWidgets';
+import { IFilterResult, IPreferencesEditorModel, IPreferencesService, ISetting, ISettingsEditorModel, ISettingsGroup } from 'vs/workbench/services/preferences/common/preferences';
 import { DefaultSettingsEditorModel, SettingsEditorModel, WorkspaceConfigurationEditorModel } from 'vs/workbench/services/preferences/common/preferencesModels';
+import { IMarkerService, IMarkerData, MarkerSeverity, MarkerTag } from 'vs/platform/markers/common/markers';
+import { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';
+import { EditorOption } from 'vs/editor/common/config/editorOptions';
+import { FindDecorations } from 'vs/editor/contrib/find/findDecorations';
+import { ThemeIcon } from 'vs/platform/theme/common/themeService';
+import { settingsEditIcon } from 'vs/workbench/contrib/preferences/browser/preferencesIcons';
+import { IWorkspaceTrustManagementService } from 'vs/platform/workspace/common/workspaceTrust';
+import * as modes from 'vs/editor/common/modes';
+import { CancellationToken } from 'vs/base/common/cancellation';
 import { IUriIdentityService } from 'vs/workbench/services/uriIdentity/common/uriIdentity';
+import { CodeActionKind } from 'vs/editor/contrib/codeAction/types';
+import { ResourceMap } from 'vs/base/common/map';
+import { Selection } from 'vs/editor/common/core/selection';
+
+export interface IPreferencesRenderer<T> extends IDisposable {
+	readonly preferencesModel: IPreferencesEditorModel<T>;
+
+	getAssociatedPreferencesModel(): IPreferencesEditorModel<T>;
+	setAssociatedPreferencesModel(associatedPreferencesModel: IPreferencesEditorModel<T>): void;
+
+	onFocusPreference: Event<T>;
+	onClearFocusPreference: Event<T>;
+	onUpdatePreference: Event<{ key: string, value: any, source: T }>;
 
-export interface IPreferencesRenderer extends IDisposable {
 	render(): void;
-	updatePreference(key: string, value: any, source: ISetting): void;
-	focusPreference(setting: ISetting): void;
-	clearFocus(setting: ISetting): void;
-	editPreference(setting: ISetting): boolean;
+	updatePreference(key: string, value: any, source: T): void;
+	focusPreference(setting: T): void;
+	clearFocus(setting: T): void;
+	filterPreferences(filterResult: IFilterResult | undefined): void;
+	editPreference(setting: T): boolean;
 }
 
-export class UserSettingsRenderer extends Disposable implements IPreferencesRenderer {
+export class UserSettingsRenderer extends Disposable implements IPreferencesRenderer<ISetting> {
 
 	private settingHighlighter: SettingHighlighter;
 	private editSettingActionRenderer: EditSettingRenderer;
+	private highlightMatchesRenderer: HighlightMatchesRenderer;
 	private modelChangeDelayer: Delayer<void> = new Delayer<void>(200);
 	private associatedPreferencesModel!: IPreferencesEditorModel<ISetting>;
 
+	private readonly _onFocusPreference = this._register(new Emitter<ISetting>());
+	readonly onFocusPreference: Event<ISetting> = this._onFocusPreference.event;
+
+	private readonly _onClearFocusPreference = this._register(new Emitter<ISetting>());
+	readonly onClearFocusPreference: Event<ISetting> = this._onClearFocusPreference.event;
+
+	private readonly _onUpdatePreference = this._register(new Emitter<{ key: string, value: any, source: IIndexedSetting }>());
+	readonly onUpdatePreference: Event<{ key: string, value: any, source: IIndexedSetting }> = this._onUpdatePreference.event;
+
 	private unsupportedSettingsRenderer: UnsupportedSettingsRenderer;
 
+	private filterResult: IFilterResult | undefined;
+
 	constructor(protected editor: ICodeEditor, readonly preferencesModel: SettingsEditorModel,
 		@IPreferencesService protected preferencesService: IPreferencesService,
 		@IConfigurationService private readonly configurationService: IConfigurationService,
 		@IInstantiationService protected instantiationService: IInstantiationService
 	) {
 		super();
-		this.settingHighlighter = this._register(instantiationService.createInstance(SettingHighlighter, editor));
+		this.settingHighlighter = this._register(instantiationService.createInstance(SettingHighlighter, editor, this._onFocusPreference, this._onClearFocusPreference));
+		this.highlightMatchesRenderer = this._register(instantiationService.createInstance(HighlightMatchesRenderer, editor));
 		this.editSettingActionRenderer = this._register(this.instantiationService.createInstance(EditSettingRenderer, this.editor, this.preferencesModel, this.settingHighlighter));
-		this._register(this.editSettingActionRenderer.onUpdateSetting(({ key, value, source }) => this.updatePreference(key, value, source)));
+		this._register(this.editSettingActionRenderer.onUpdateSetting(({ key, value, source }) => this._updatePreference(key, value, source)));
 		this._register(this.editor.getModel()!.onDidChangeContent(() => this.modelChangeDelayer.trigger(() => this.onModelChanged())));
 		this.unsupportedSettingsRenderer = this._register(instantiationService.createInstance(UnsupportedSettingsRenderer, editor, preferencesModel));
 	}
 
+	getAssociatedPreferencesModel(): IPreferencesEditorModel<ISetting> {
+		return this.associatedPreferencesModel;
+	}
+
+	setAssociatedPreferencesModel(associatedPreferencesModel: IPreferencesEditorModel<ISetting>): void {
+		this.associatedPreferencesModel = associatedPreferencesModel;
+		this.editSettingActionRenderer.associatedPreferencesModel = associatedPreferencesModel;
+
+		// Create header only in Settings editor mode
+		this.createHeader();
+	}
+
+	protected createHeader(): void {
+		this._register(new SettingsHeaderWidget(this.editor, '')).setMessage(nls.localize('emptyUserSettingsHeader', "Place your settings here to override the Default Settings."));
+	}
+
 	render(): void {
 		this.editSettingActionRenderer.render(this.preferencesModel.settingsGroups, this.associatedPreferencesModel);
+		if (this.filterResult) {
+			this.filterPreferences(this.filterResult);
+		}
 		this.unsupportedSettingsRenderer.render();
 	}
 
+	private _updatePreference(key: string, value: any, source: IIndexedSetting): void {
+		this._onUpdatePreference.fire({ key, value, source });
+		this.updatePreference(key, value, source);
+	}
+
 	updatePreference(key: string, value: any, source: IIndexedSetting): void {
 		const overrideIdentifier = source.overrideOf ? overrideIdentifierFromKey(source.overrideOf.key) : null;
 		const resource = this.preferencesModel.uri;
@@ -115,6 +164,12 @@ export class UserSettingsRenderer extends Disposable implements IPreferencesRend
 		return this.preferencesModel.getPreference(key);
 	}
 
+	filterPreferences(filterResult: IFilterResult | undefined): void {
+		this.filterResult = filterResult;
+		this.settingHighlighter.clear(true);
+		this.highlightMatchesRenderer.render(filterResult ? filterResult.matches : []);
+	}
+
 	focusPreference(setting: ISetting): void {
 		const s = this.getSetting(setting);
 		if (s) {
@@ -135,12 +190,13 @@ export class UserSettingsRenderer extends Disposable implements IPreferencesRend
 	}
 }
 
-export class WorkspaceSettingsRenderer extends UserSettingsRenderer implements IPreferencesRenderer {
+export class WorkspaceSettingsRenderer extends UserSettingsRenderer implements IPreferencesRenderer<ISetting> {
 
 	private workspaceConfigurationRenderer: WorkspaceConfigurationRenderer;
 
 	constructor(editor: ICodeEditor, preferencesModel: SettingsEditorModel,
 		@IPreferencesService preferencesService: IPreferencesService,
+		@ITelemetryService telemetryService: ITelemetryService,
 		@IConfigurationService configurationService: IConfigurationService,
 		@IInstantiationService instantiationService: IInstantiationService
 	) {
@@ -148,9 +204,431 @@ export class WorkspaceSettingsRenderer extends UserSettingsRenderer implements I
 		this.workspaceConfigurationRenderer = this._register(instantiationService.createInstance(WorkspaceConfigurationRenderer, editor, preferencesModel));
 	}
 
+	protected override createHeader(): void {
+		this._register(new SettingsHeaderWidget(this.editor, '')).setMessage(nls.localize('emptyWorkspaceSettingsHeader', "Place your settings here to override the User Settings."));
+	}
+
+	override setAssociatedPreferencesModel(associatedPreferencesModel: IPreferencesEditorModel<ISetting>): void {
+		super.setAssociatedPreferencesModel(associatedPreferencesModel);
+		this.workspaceConfigurationRenderer.render(this.getAssociatedPreferencesModel());
+	}
+
 	override render(): void {
 		super.render();
-		this.workspaceConfigurationRenderer.render();
+		this.workspaceConfigurationRenderer.render(this.getAssociatedPreferencesModel());
+	}
+}
+
+export class FolderSettingsRenderer extends UserSettingsRenderer implements IPreferencesRenderer<ISetting> {
+
+	constructor(editor: ICodeEditor, preferencesModel: SettingsEditorModel,
+		@IPreferencesService preferencesService: IPreferencesService,
+		@ITelemetryService telemetryService: ITelemetryService,
+		@IConfigurationService configurationService: IConfigurationService,
+		@IInstantiationService instantiationService: IInstantiationService
+	) {
+		super(editor, preferencesModel, preferencesService, configurationService, instantiationService);
+	}
+
+	protected override createHeader(): void {
+		this._register(new SettingsHeaderWidget(this.editor, '')).setMessage(nls.localize('emptyFolderSettingsHeader', "Place your folder settings here to override those from the Workspace Settings."));
+	}
+
+}
+
+export class DefaultSettingsRenderer extends Disposable implements IPreferencesRenderer<ISetting> {
+
+	private _associatedPreferencesModel!: IPreferencesEditorModel<ISetting>;
+	private settingHighlighter: SettingHighlighter;
+	private settingsHeaderRenderer: DefaultSettingsHeaderRenderer;
+	private settingsGroupTitleRenderer: SettingsGroupTitleRenderer;
+	private filteredMatchesRenderer: FilteredMatchesRenderer;
+	private hiddenAreasRenderer: HiddenAreasRenderer;
+	private editSettingActionRenderer: EditSettingRenderer;
+	private bracesHidingRenderer: BracesHidingRenderer;
+	private filterResult: IFilterResult | undefined;
+
+	private readonly _onUpdatePreference = this._register(new Emitter<{ key: string, value: any, source: IIndexedSetting }>());
+	readonly onUpdatePreference: Event<{ key: string, value: any, source: IIndexedSetting }> = this._onUpdatePreference.event;
+
+	private readonly _onFocusPreference = this._register(new Emitter<ISetting>());
+	readonly onFocusPreference: Event<ISetting> = this._onFocusPreference.event;
+
+	private readonly _onClearFocusPreference = this._register(new Emitter<ISetting>());
+	readonly onClearFocusPreference: Event<ISetting> = this._onClearFocusPreference.event;
+
+	constructor(protected editor: ICodeEditor, readonly preferencesModel: DefaultSettingsEditorModel,
+		@IPreferencesService protected preferencesService: IPreferencesService,
+		@IInstantiationService protected instantiationService: IInstantiationService,
+	) {
+		super();
+		this.settingHighlighter = this._register(instantiationService.createInstance(SettingHighlighter, editor, this._onFocusPreference, this._onClearFocusPreference));
+		this.settingsHeaderRenderer = this._register(instantiationService.createInstance(DefaultSettingsHeaderRenderer, editor));
+		this.settingsGroupTitleRenderer = this._register(instantiationService.createInstance(SettingsGroupTitleRenderer, editor));
+		this.filteredMatchesRenderer = this._register(instantiationService.createInstance(FilteredMatchesRenderer, editor));
+		this.editSettingActionRenderer = this._register(instantiationService.createInstance(EditSettingRenderer, editor, preferencesModel, this.settingHighlighter));
+		this.bracesHidingRenderer = this._register(instantiationService.createInstance(BracesHidingRenderer, editor));
+		this.hiddenAreasRenderer = this._register(instantiationService.createInstance(HiddenAreasRenderer, editor, [this.settingsGroupTitleRenderer, this.filteredMatchesRenderer, this.bracesHidingRenderer]));
+
+		this._register(this.editSettingActionRenderer.onUpdateSetting(e => this._onUpdatePreference.fire(e)));
+		this._register(this.settingsGroupTitleRenderer.onHiddenAreasChanged(() => this.hiddenAreasRenderer.render()));
+		this._register(preferencesModel.onDidChangeGroups(() => this.render()));
+	}
+
+	getAssociatedPreferencesModel(): IPreferencesEditorModel<ISetting> {
+		return this._associatedPreferencesModel;
+	}
+
+	setAssociatedPreferencesModel(associatedPreferencesModel: IPreferencesEditorModel<ISetting>): void {
+		this._associatedPreferencesModel = associatedPreferencesModel;
+		this.editSettingActionRenderer.associatedPreferencesModel = associatedPreferencesModel;
+	}
+
+	render() {
+		this.settingsGroupTitleRenderer.render(this.preferencesModel.settingsGroups);
+		this.editSettingActionRenderer.render(this.preferencesModel.settingsGroups, this._associatedPreferencesModel);
+		this.settingHighlighter.clear(true);
+		this.bracesHidingRenderer.render(undefined, this.preferencesModel.settingsGroups);
+		this.settingsGroupTitleRenderer.showGroup(0);
+		this.hiddenAreasRenderer.render();
+	}
+
+	filterPreferences(filterResult: IFilterResult | undefined): void {
+		this.filterResult = filterResult;
+
+		if (filterResult) {
+			this.filteredMatchesRenderer.render(filterResult, this.preferencesModel.settingsGroups);
+			this.settingsGroupTitleRenderer.render(undefined);
+			this.settingsHeaderRenderer.render(filterResult);
+			this.settingHighlighter.clear(true);
+			this.bracesHidingRenderer.render(filterResult, this.preferencesModel.settingsGroups);
+			this.editSettingActionRenderer.render(filterResult.filteredGroups, this._associatedPreferencesModel);
+		} else {
+			this.settingHighlighter.clear(true);
+			this.filteredMatchesRenderer.render(undefined, this.preferencesModel.settingsGroups);
+			this.settingsHeaderRenderer.render(undefined);
+			this.settingsGroupTitleRenderer.render(this.preferencesModel.settingsGroups);
+			this.settingsGroupTitleRenderer.showGroup(0);
+			this.bracesHidingRenderer.render(undefined, this.preferencesModel.settingsGroups);
+			this.editSettingActionRenderer.render(this.preferencesModel.settingsGroups, this._associatedPreferencesModel);
+		}
+
+		this.hiddenAreasRenderer.render();
+	}
+
+	focusPreference(s: ISetting): void {
+		const setting = this.getSetting(s);
+		if (setting) {
+			this.settingsGroupTitleRenderer.showSetting(setting);
+			this.settingHighlighter.highlight(setting, true);
+		} else {
+			this.settingHighlighter.clear(true);
+		}
+	}
+
+	private getSetting(setting: ISetting): ISetting | undefined {
+		const { key, overrideOf } = setting;
+		if (overrideOf) {
+			const setting = this.getSetting(overrideOf);
+			return setting!.overrides!.find(override => override.key === key);
+		}
+		const settingsGroups = this.filterResult ? this.filterResult.filteredGroups : this.preferencesModel.settingsGroups;
+		return this.getPreference(key, settingsGroups);
+	}
+
+	private getPreference(key: string, settingsGroups: ISettingsGroup[]): ISetting | undefined {
+		for (const group of settingsGroups) {
+			for (const section of group.sections) {
+				for (const setting of section.settings) {
+					if (setting.key === key) {
+						return setting;
+					}
+				}
+			}
+		}
+		return undefined;
+	}
+
+	clearFocus(setting: ISetting): void {
+		this.settingHighlighter.clear(true);
+	}
+
+	updatePreference(key: string, value: any, source: ISetting): void {
+	}
+
+	editPreference(setting: ISetting): boolean {
+		return this.editSettingActionRenderer.activateOnSetting(setting);
+	}
+}
+
+export interface HiddenAreasProvider {
+	hiddenAreas: IRange[];
+}
+
+export class BracesHidingRenderer extends Disposable implements HiddenAreasProvider {
+	private _result: IFilterResult | undefined;
+	private _settingsGroups!: ISettingsGroup[];
+
+	constructor(private editor: ICodeEditor) {
+		super();
+	}
+
+	render(result: IFilterResult | undefined, settingsGroups: ISettingsGroup[]): void {
+		this._result = result;
+		this._settingsGroups = settingsGroups;
+	}
+
+	get hiddenAreas(): IRange[] {
+		// Opening square brace
+		const hiddenAreas = [
+			{
+				startLineNumber: 1,
+				startColumn: 1,
+				endLineNumber: 2,
+				endColumn: 1
+			}
+		];
+
+		const hideBraces = (group: ISettingsGroup, hideExtraLine?: boolean) => {
+			// Opening curly brace
+			hiddenAreas.push({
+				startLineNumber: group.range.startLineNumber - 3,
+				startColumn: 1,
+				endLineNumber: group.range.startLineNumber - (hideExtraLine ? 1 : 3),
+				endColumn: 1
+			});
+
+			// Closing curly brace
+			hiddenAreas.push({
+				startLineNumber: group.range.endLineNumber + 1,
+				startColumn: 1,
+				endLineNumber: group.range.endLineNumber + 4,
+				endColumn: 1
+			});
+		};
+
+		this._settingsGroups.forEach(g => hideBraces(g));
+		if (this._result) {
+			this._result.filteredGroups.forEach((g, i) => hideBraces(g, true));
+		}
+
+		// Closing square brace
+		const lineCount = this.editor.getModel()!.getLineCount();
+		hiddenAreas.push({
+			startLineNumber: lineCount,
+			startColumn: 1,
+			endLineNumber: lineCount,
+			endColumn: 1
+		});
+
+
+		return hiddenAreas;
+	}
+
+}
+
+class DefaultSettingsHeaderRenderer extends Disposable {
+
+	private settingsHeaderWidget: DefaultSettingsHeaderWidget;
+	readonly onClick: Event<void>;
+
+	constructor(editor: ICodeEditor) {
+		super();
+		this.settingsHeaderWidget = this._register(new DefaultSettingsHeaderWidget(editor, ''));
+		this.onClick = this.settingsHeaderWidget.onClick;
+	}
+
+	render(filterResult: IFilterResult | undefined) {
+		const hasSettings = !filterResult || filterResult.filteredGroups.length > 0;
+		this.settingsHeaderWidget.toggleMessage(hasSettings);
+	}
+}
+
+export class SettingsGroupTitleRenderer extends Disposable implements HiddenAreasProvider {
+
+	private readonly _onHiddenAreasChanged = this._register(new Emitter<void>());
+	readonly onHiddenAreasChanged: Event<void> = this._onHiddenAreasChanged.event;
+
+	private settingsGroups!: ISettingsGroup[];
+	private hiddenGroups: ISettingsGroup[] = [];
+	private settingsGroupTitleWidgets!: SettingsGroupTitleWidget[];
+	private readonly renderDisposables = this._register(new DisposableStore());
+
+	constructor(private editor: ICodeEditor,
+		@IInstantiationService private readonly instantiationService: IInstantiationService
+	) {
+		super();
+	}
+
+	get hiddenAreas(): IRange[] {
+		const hiddenAreas: IRange[] = [];
+		for (const group of this.hiddenGroups) {
+			hiddenAreas.push(group.range);
+		}
+		return hiddenAreas;
+	}
+
+	render(settingsGroups: ISettingsGroup[] | undefined) {
+		this.disposeWidgets();
+		if (!settingsGroups) {
+			return;
+		}
+
+		this.settingsGroups = settingsGroups.slice();
+		this.settingsGroupTitleWidgets = [];
+		for (const group of this.settingsGroups.slice().reverse()) {
+			if (group.sections.every(sect => sect.settings.length === 0)) {
+				continue;
+			}
+
+			const settingsGroupTitleWidget = this.instantiationService.createInstance(SettingsGroupTitleWidget, this.editor, group);
+			settingsGroupTitleWidget.render();
+			this.settingsGroupTitleWidgets.push(settingsGroupTitleWidget);
+			this.renderDisposables.add(settingsGroupTitleWidget);
+			this.renderDisposables.add(settingsGroupTitleWidget.onToggled(collapsed => this.onToggled(collapsed, settingsGroupTitleWidget.settingsGroup)));
+		}
+		this.settingsGroupTitleWidgets.reverse();
+	}
+
+	showGroup(groupIdx: number) {
+		const shownGroup = this.settingsGroupTitleWidgets[groupIdx].settingsGroup;
+
+		this.hiddenGroups = this.settingsGroups.filter(g => g !== shownGroup);
+		for (const groupTitleWidget of this.settingsGroupTitleWidgets.filter(widget => widget.settingsGroup !== shownGroup)) {
+			groupTitleWidget.toggleCollapse(true);
+		}
+		this._onHiddenAreasChanged.fire();
+	}
+
+	showSetting(setting: ISetting): void {
+		const settingsGroupTitleWidget = this.settingsGroupTitleWidgets.filter(widget => Range.containsRange(widget.settingsGroup.range, setting.range))[0];
+		if (settingsGroupTitleWidget && settingsGroupTitleWidget.isCollapsed()) {
+			settingsGroupTitleWidget.toggleCollapse(false);
+			this.hiddenGroups.splice(this.hiddenGroups.indexOf(settingsGroupTitleWidget.settingsGroup), 1);
+			this._onHiddenAreasChanged.fire();
+		}
+	}
+
+	private onToggled(collapsed: boolean, group: ISettingsGroup) {
+		const index = this.hiddenGroups.indexOf(group);
+		if (collapsed) {
+			const currentPosition = this.editor.getPosition();
+			if (group.range.startLineNumber <= currentPosition!.lineNumber && group.range.endLineNumber >= currentPosition!.lineNumber) {
+				this.editor.setPosition({ lineNumber: group.range.startLineNumber - 1, column: 1 });
+			}
+			this.hiddenGroups.push(group);
+		} else {
+			this.hiddenGroups.splice(index, 1);
+		}
+		this._onHiddenAreasChanged.fire();
+	}
+
+	private disposeWidgets() {
+		this.hiddenGroups = [];
+		this.renderDisposables.clear();
+	}
+
+	override dispose() {
+		this.disposeWidgets();
+		super.dispose();
+	}
+}
+
+export class HiddenAreasRenderer extends Disposable {
+
+	constructor(private editor: ICodeEditor, private hiddenAreasProviders: HiddenAreasProvider[]
+	) {
+		super();
+	}
+
+	render() {
+		const ranges: IRange[] = [];
+		for (const hiddenAreaProvider of this.hiddenAreasProviders) {
+			ranges.push(...hiddenAreaProvider.hiddenAreas);
+		}
+		this.editor.setHiddenAreas(ranges);
+	}
+
+	override dispose() {
+		this.editor.setHiddenAreas([]);
+		super.dispose();
+	}
+}
+
+export class FilteredMatchesRenderer extends Disposable implements HiddenAreasProvider {
+
+	private decorationIds: string[] = [];
+	hiddenAreas: IRange[] = [];
+
+	constructor(private editor: ICodeEditor
+	) {
+		super();
+	}
+
+	render(result: IFilterResult | undefined, allSettingsGroups: ISettingsGroup[]): void {
+		this.hiddenAreas = [];
+		if (result) {
+			this.hiddenAreas = this.computeHiddenRanges(result.filteredGroups, result.allGroups);
+			this.decorationIds = this.editor.deltaDecorations(this.decorationIds, result.matches.map(match => this.createDecoration(match)));
+		} else {
+			this.hiddenAreas = this.computeHiddenRanges(undefined, allSettingsGroups);
+			this.decorationIds = this.editor.deltaDecorations(this.decorationIds, []);
+		}
+	}
+
+	private createDecoration(range: IRange): IModelDeltaDecoration {
+		return {
+			range,
+			options: FindDecorations._FIND_MATCH_DECORATION
+		};
+	}
+
+	private computeHiddenRanges(filteredGroups: ISettingsGroup[] | undefined, allSettingsGroups: ISettingsGroup[]): IRange[] {
+		// Hide the contents of hidden groups
+		const notMatchesRanges: IRange[] = [];
+		if (filteredGroups) {
+			allSettingsGroups.forEach((group, i) => {
+				notMatchesRanges.push({
+					startLineNumber: group.range.startLineNumber - 1,
+					startColumn: group.range.startColumn,
+					endLineNumber: group.range.endLineNumber,
+					endColumn: group.range.endColumn
+				});
+			});
+		}
+
+		return notMatchesRanges;
+	}
+
+	override dispose() {
+		this.decorationIds = this.editor.deltaDecorations(this.decorationIds, []);
+		super.dispose();
+	}
+}
+
+export class HighlightMatchesRenderer extends Disposable {
+
+	private decorationIds: string[] = [];
+
+	constructor(private editor: ICodeEditor
+	) {
+		super();
+	}
+
+	render(matches: IRange[]): void {
+		this.decorationIds = this.editor.deltaDecorations(this.decorationIds, matches.map(match => this.createDecoration(match)));
+	}
+
+	private createDecoration(range: IRange): IModelDeltaDecoration {
+		return {
+			range,
+			options: FindDecorations._FIND_MATCH_DECORATION
+		};
+	}
+
+	override dispose() {
+		this.decorationIds = this.editor.deltaDecorations(this.decorationIds, []);
+		super.dispose();
 	}
 }
 
@@ -432,14 +910,20 @@ class SettingHighlighter extends Disposable {
 
 	private fixedHighlighter: RangeHighlightDecorations;
 	private volatileHighlighter: RangeHighlightDecorations;
+	private highlightedSetting!: ISetting;
 
-	constructor(private editor: ICodeEditor, @IInstantiationService instantiationService: IInstantiationService) {
+	constructor(private editor: ICodeEditor, private readonly focusEventEmitter: Emitter<ISetting>, private readonly clearFocusEventEmitter: Emitter<ISetting>,
+		@IInstantiationService instantiationService: IInstantiationService
+	) {
 		super();
 		this.fixedHighlighter = this._register(instantiationService.createInstance(RangeHighlightDecorations));
 		this.volatileHighlighter = this._register(instantiationService.createInstance(RangeHighlightDecorations));
+		this.fixedHighlighter.onHighlightRemoved(() => this.clearFocusEventEmitter.fire(this.highlightedSetting));
+		this.volatileHighlighter.onHighlightRemoved(() => this.clearFocusEventEmitter.fire(this.highlightedSetting));
 	}
 
 	highlight(setting: ISetting, fix: boolean = false) {
+		this.highlightedSetting = setting;
 		this.volatileHighlighter.removeHighlightRange();
 		this.fixedHighlighter.removeHighlightRange();
 
@@ -450,6 +934,7 @@ class SettingHighlighter extends Disposable {
 		}, this.editor);
 
 		this.editor.revealLineInCenterIfOutsideViewport(setting.valueRange.startLineNumber, editorCommon.ScrollType.Smooth);
+		this.focusEventEmitter.fire(setting);
 	}
 
 	clear(fix: boolean = false): void {
@@ -457,6 +942,7 @@ class SettingHighlighter extends Disposable {
 		if (fix) {
 			this.fixedHighlighter.removeHighlightRange();
 		}
+		this.clearFocusEventEmitter.fire(this.highlightedSetting);
 	}
 }
 
@@ -663,9 +1149,9 @@ class UnsupportedSettingsRenderer extends Disposable implements modes.CodeAction
 }
 
 class WorkspaceConfigurationRenderer extends Disposable {
-	private static readonly supportedKeys = ['folders', 'tasks', 'launch', 'extensions', 'settings', 'remoteAuthority', 'transient'];
 
 	private decorationIds: string[] = [];
+	private associatedSettingsEditorModel!: IPreferencesEditorModel<ISetting>;
 	private renderingDelayer: Delayer<void> = new Delayer<void>(200);
 
 	constructor(private editor: ICodeEditor, private workspaceSettingsEditorModel: SettingsEditorModel,
@@ -673,17 +1159,28 @@ class WorkspaceConfigurationRenderer extends Disposable {
 		@IMarkerService private readonly markerService: IMarkerService
 	) {
 		super();
-		this._register(this.editor.getModel()!.onDidChangeContent(() => this.renderingDelayer.trigger(() => this.render())));
+		this._register(this.editor.getModel()!.onDidChangeContent(() => this.renderingDelayer.trigger(() => this.render(this.associatedSettingsEditorModel))));
 	}
 
-	render(): void {
+	render(associatedSettingsEditorModel: IPreferencesEditorModel<ISetting>): void {
+		this.associatedSettingsEditorModel = associatedSettingsEditorModel;
 		const markerData: IMarkerData[] = [];
 		if (this.workspaceContextService.getWorkbenchState() === WorkbenchState.WORKSPACE && this.workspaceSettingsEditorModel instanceof WorkspaceConfigurationEditorModel) {
 			const ranges: IRange[] = [];
 			for (const settingsGroup of this.workspaceSettingsEditorModel.configurationGroups) {
 				for (const section of settingsGroup.sections) {
 					for (const setting of section.settings) {
-						if (!WorkspaceConfigurationRenderer.supportedKeys.includes(setting.key)) {
+						if (setting.key === 'folders' || setting.key === 'tasks' || setting.key === 'launch' || setting.key === 'extensions') {
+							if (this.associatedSettingsEditorModel) {
+								// Dim other configurations in workspace configuration file only in the context of Settings Editor
+								ranges.push({
+									startLineNumber: setting.keyRange.startLineNumber,
+									startColumn: setting.keyRange.startColumn - 1,
+									endLineNumber: setting.valueRange.endLineNumber,
+									endColumn: setting.valueRange.endColumn
+								});
+							}
+						} else if (setting.key !== 'settings' && setting.key !== 'remoteAuthority' && setting.key !== 'transient') {
 							markerData.push({
 								severity: MarkerSeverity.Hint,
 								tags: [MarkerTag.Unnecessary],
diff --git a/src/vs/workbench/contrib/preferences/browser/preferencesWidgets.ts b/src/vs/workbench/contrib/preferences/browser/preferencesWidgets.ts
index 273cb11..31199fe 100644
--- a/src/vs/workbench/contrib/preferences/browser/preferencesWidgets.ts
+++ b/src/vs/workbench/contrib/preferences/browser/preferencesWidgets.ts
@@ -4,9 +4,8 @@
  *--------------------------------------------------------------------------------------------*/
 
 import * as DOM from 'vs/base/browser/dom';
-import { StandardKeyboardEvent } from 'vs/base/browser/keyboardEvent';
+import { IKeyboardEvent, StandardKeyboardEvent } from 'vs/base/browser/keyboardEvent';
 import { ActionBar, ActionsOrientation } from 'vs/base/browser/ui/actionbar/actionbar';
-import { BaseActionViewItem } from 'vs/base/browser/ui/actionbar/actionViewItems';
 import { HistoryInputBox, IHistoryInputOptions } from 'vs/base/browser/ui/inputbox/inputBox';
 import { Widget } from 'vs/base/browser/ui/widget';
 import { Action, IAction } from 'vs/base/common/actions';
@@ -14,27 +13,302 @@ import { Emitter, Event } from 'vs/base/common/event';
 import { MarkdownString } from 'vs/base/common/htmlContent';
 import { KeyCode } from 'vs/base/common/keyCodes';
 import { Disposable } from 'vs/base/common/lifecycle';
-import { Schemas } from 'vs/base/common/network';
-import { isEqual } from 'vs/base/common/resources';
 import { URI } from 'vs/base/common/uri';
 import { IMarginData } from 'vs/editor/browser/controller/mouseTarget';
-import { ICodeEditor, IEditorMouseEvent, MouseTargetType } from 'vs/editor/browser/editorBrowser';
+import { ICodeEditor, IEditorMouseEvent, IViewZone, MouseTargetType } from 'vs/editor/browser/editorBrowser';
+import { ICursorPositionChangedEvent } from 'vs/editor/common/controller/cursorEvents';
+import { Position } from 'vs/editor/common/core/position';
 import { IModelDeltaDecoration, TrackedRangeStickiness } from 'vs/editor/common/model';
 import { localize } from 'vs/nls';
-import { ContextScopedHistoryInputBox } from 'vs/platform/browser/contextScopedHistoryWidget';
 import { ConfigurationTarget } from 'vs/platform/configuration/common/configuration';
 import { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
 import { IContextMenuService, IContextViewService } from 'vs/platform/contextview/browser/contextView';
 import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
 import { ILabelService } from 'vs/platform/label/common/label';
+import { Schemas } from 'vs/base/common/network';
 import { activeContrastBorder, badgeBackground, badgeForeground, contrastBorder, focusBorder } from 'vs/platform/theme/common/colorRegistry';
 import { attachInputBoxStyler, attachStylerCallback } from 'vs/platform/theme/common/styler';
-import { IColorTheme, ICssStyleCollector, IThemeService, registerThemingParticipant, ThemeIcon } from 'vs/platform/theme/common/themeService';
+import { ICssStyleCollector, IColorTheme, IThemeService, registerThemingParticipant, ThemeIcon } from 'vs/platform/theme/common/themeService';
 import { isWorkspaceFolder, IWorkspaceContextService, IWorkspaceFolder, WorkbenchState } from 'vs/platform/workspace/common/workspace';
 import { PANEL_ACTIVE_TITLE_BORDER, PANEL_ACTIVE_TITLE_FOREGROUND, PANEL_INACTIVE_TITLE_FOREGROUND } from 'vs/workbench/common/theme';
-import { settingsEditIcon, settingsScopeDropDownIcon } from 'vs/workbench/contrib/preferences/browser/preferencesIcons';
 import { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';
-import { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';
+import { ISettingsGroup, IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';
+import { EditorOption } from 'vs/editor/common/config/editorOptions';
+import { isEqual } from 'vs/base/common/resources';
+import { BaseActionViewItem } from 'vs/base/browser/ui/actionbar/actionViewItems';
+import { settingsEditIcon, settingsGroupCollapsedIcon, settingsGroupExpandedIcon, settingsScopeDropDownIcon } from 'vs/workbench/contrib/preferences/browser/preferencesIcons';
+import { ContextScopedHistoryInputBox } from 'vs/platform/browser/contextScopedHistoryWidget';
+
+export class SettingsHeaderWidget extends Widget implements IViewZone {
+
+	private id!: string;
+	private _domNode!: HTMLElement;
+
+	protected titleContainer!: HTMLElement;
+	private messageElement!: HTMLElement;
+
+	constructor(protected editor: ICodeEditor, private title: string) {
+		super();
+		this.create();
+		this._register(this.editor.onDidChangeConfiguration(() => this.layout()));
+		this._register(this.editor.onDidLayoutChange(() => this.layout()));
+	}
+
+	get domNode(): HTMLElement {
+		return this._domNode;
+	}
+
+	get heightInLines(): number {
+		return 1;
+	}
+
+	get afterLineNumber(): number {
+		return 0;
+	}
+
+	protected create() {
+		this._domNode = DOM.$('.settings-header-widget');
+
+		this.titleContainer = DOM.append(this._domNode, DOM.$('.title-container'));
+		if (this.title) {
+			DOM.append(this.titleContainer, DOM.$('.title')).textContent = this.title;
+		}
+		this.messageElement = DOM.append(this.titleContainer, DOM.$('.message'));
+		if (this.title) {
+			this.messageElement.style.paddingLeft = '12px';
+		}
+
+		this.editor.changeViewZones(accessor => {
+			this.id = accessor.addZone(this);
+			this.layout();
+		});
+	}
+
+	setMessage(message: string): void {
+		this.messageElement.textContent = message;
+	}
+
+	private layout(): void {
+		const options = this.editor.getOptions();
+		const fontInfo = options.get(EditorOption.fontInfo);
+		this.titleContainer.style.fontSize = fontInfo.fontSize + 'px';
+		if (!options.get(EditorOption.folding)) {
+			this.titleContainer.style.paddingLeft = '6px';
+		}
+	}
+
+	override dispose() {
+		this.editor.changeViewZones(accessor => {
+			accessor.removeZone(this.id);
+		});
+		super.dispose();
+	}
+}
+
+export class DefaultSettingsHeaderWidget extends SettingsHeaderWidget {
+
+	private _onClick = this._register(new Emitter<void>());
+	readonly onClick: Event<void> = this._onClick.event;
+
+	protected override create() {
+		super.create();
+
+		this.toggleMessage(true);
+	}
+
+	toggleMessage(hasSettings: boolean): void {
+		if (hasSettings) {
+			this.setMessage(localize('defaultSettings', "Place your settings in the right hand side editor to override."));
+		} else {
+			this.setMessage(localize('noSettingsFound', "No Settings Found."));
+		}
+	}
+}
+
+export class SettingsGroupTitleWidget extends Widget implements IViewZone {
+
+	private id!: string;
+	private _afterLineNumber!: number;
+	private _domNode!: HTMLElement;
+
+	private titleContainer!: HTMLElement;
+	private icon!: HTMLElement;
+	private title!: HTMLElement;
+
+	private _onToggled = this._register(new Emitter<boolean>());
+	readonly onToggled: Event<boolean> = this._onToggled.event;
+
+	private previousPosition: Position | null = null;
+
+	constructor(private editor: ICodeEditor, public settingsGroup: ISettingsGroup) {
+		super();
+		this.create();
+		this._register(this.editor.onDidChangeConfiguration(() => this.layout()));
+		this._register(this.editor.onDidLayoutChange(() => this.layout()));
+		this._register(this.editor.onDidChangeCursorPosition((e) => this.onCursorChange(e)));
+	}
+
+	get domNode(): HTMLElement {
+		return this._domNode;
+	}
+
+	get heightInLines(): number {
+		return 1.5;
+	}
+
+	get afterLineNumber(): number {
+		return this._afterLineNumber;
+	}
+
+	private create() {
+		this._domNode = DOM.$('.settings-group-title-widget');
+
+		this.titleContainer = DOM.append(this._domNode, DOM.$('.title-container'));
+		this.titleContainer.tabIndex = 0;
+		this.onclick(this.titleContainer, () => this.toggle());
+		this.onkeydown(this.titleContainer, (e) => this.onKeyDown(e));
+		const focusTracker = this._register(DOM.trackFocus(this.titleContainer));
+
+		this._register(focusTracker.onDidFocus(() => this.toggleFocus(true)));
+		this._register(focusTracker.onDidBlur(() => this.toggleFocus(false)));
+
+		this.icon = DOM.append(this.titleContainer, DOM.$(''));
+		this.title = DOM.append(this.titleContainer, DOM.$('.title'));
+		this.title.textContent = this.settingsGroup.title + ` (${this.settingsGroup.sections.reduce((count, section) => count + section.settings.length, 0)})`;
+
+		this.updateTwisty(false);
+		this.layout();
+	}
+
+	private getTwistyIcon(isCollapsed: boolean): ThemeIcon {
+		return isCollapsed ? settingsGroupCollapsedIcon : settingsGroupExpandedIcon;
+	}
+
+	private updateTwisty(collapse: boolean) {
+		this.icon.classList.remove(...ThemeIcon.asClassNameArray(this.getTwistyIcon(!collapse)));
+		this.icon.classList.add(...ThemeIcon.asClassNameArray(this.getTwistyIcon(collapse)));
+	}
+
+	render() {
+		if (!this.settingsGroup.range) {
+			// #61352
+			return;
+		}
+
+		this._afterLineNumber = this.settingsGroup.range.startLineNumber - 2;
+		this.editor.changeViewZones(accessor => {
+			this.id = accessor.addZone(this);
+			this.layout();
+		});
+	}
+
+	toggleCollapse(collapse: boolean) {
+		this.titleContainer.classList.toggle('collapsed', collapse);
+		this.updateTwisty(collapse);
+	}
+
+	toggleFocus(focus: boolean): void {
+		this.titleContainer.classList.toggle('focused', focus);
+	}
+
+	isCollapsed(): boolean {
+		return this.titleContainer.classList.contains('collapsed');
+	}
+
+	private layout(): void {
+		const options = this.editor.getOptions();
+		const fontInfo = options.get(EditorOption.fontInfo);
+		const layoutInfo = this.editor.getLayoutInfo();
+		this._domNode.style.width = layoutInfo.contentWidth - layoutInfo.verticalScrollbarWidth + 'px';
+		this.titleContainer.style.lineHeight = options.get(EditorOption.lineHeight) + 3 + 'px';
+		this.titleContainer.style.height = options.get(EditorOption.lineHeight) + 3 + 'px';
+		this.titleContainer.style.fontSize = fontInfo.fontSize + 'px';
+		this.icon.style.minWidth = `${this.getIconSize(16)}px`;
+	}
+
+	private getIconSize(minSize: number): number {
+		const fontSize = this.editor.getOption(EditorOption.fontInfo).fontSize;
+		return fontSize > 8 ? Math.max(fontSize, minSize) : 12;
+	}
+
+	private onKeyDown(keyboardEvent: IKeyboardEvent): void {
+		switch (keyboardEvent.keyCode) {
+			case KeyCode.Enter:
+			case KeyCode.Space:
+				this.toggle();
+				break;
+			case KeyCode.LeftArrow:
+				this.collapse(true);
+				break;
+			case KeyCode.RightArrow:
+				this.collapse(false);
+				break;
+			case KeyCode.UpArrow:
+				if (this.settingsGroup.range.startLineNumber - 3 !== 1) {
+					this.editor.focus();
+					const lineNumber = this.settingsGroup.range.startLineNumber - 2;
+					if (this.editor.hasModel()) {
+						this.editor.setPosition({ lineNumber, column: this.editor.getModel().getLineMinColumn(lineNumber) });
+					}
+				}
+				break;
+			case KeyCode.DownArrow:
+				const lineNumber = this.isCollapsed() ? this.settingsGroup.range.startLineNumber : this.settingsGroup.range.startLineNumber - 1;
+				this.editor.focus();
+				if (this.editor.hasModel()) {
+					this.editor.setPosition({ lineNumber, column: this.editor.getModel().getLineMinColumn(lineNumber) });
+				}
+				break;
+		}
+	}
+
+	private toggle() {
+		this.collapse(!this.isCollapsed());
+	}
+
+	private collapse(collapse: boolean) {
+		if (collapse !== this.isCollapsed()) {
+			this.titleContainer.classList.toggle('collapsed', collapse);
+			this.updateTwisty(collapse);
+			this._onToggled.fire(collapse);
+		}
+	}
+
+	private onCursorChange(e: ICursorPositionChangedEvent): void {
+		if (e.source !== 'mouse' && this.focusTitle(e.position)) {
+			this.titleContainer.focus();
+		}
+	}
+
+	private focusTitle(currentPosition: Position): boolean {
+		const previousPosition = this.previousPosition;
+		this.previousPosition = currentPosition;
+		if (!previousPosition) {
+			return false;
+		}
+		if (previousPosition.lineNumber === currentPosition.lineNumber) {
+			return false;
+		}
+		if (!this.settingsGroup.range) {
+			// #60460?
+			return false;
+		}
+		if (currentPosition.lineNumber === this.settingsGroup.range.startLineNumber - 1 || currentPosition.lineNumber === this.settingsGroup.range.startLineNumber - 2) {
+			return true;
+		}
+		if (this.isCollapsed() && currentPosition.lineNumber === this.settingsGroup.range.endLineNumber) {
+			return true;
+		}
+		return false;
+	}
+
+	override dispose() {
+		this.editor.changeViewZones(accessor => {
+			accessor.removeZone(this.id);
+		});
+		super.dispose();
+	}
+}
 
 export class FolderSettingsActionViewItem extends BaseActionViewItem {
 
@@ -497,7 +771,8 @@ export class EditPreferenceWidget<T> extends Disposable {
 	private readonly _onClick = this._register(new Emitter<IEditorMouseEvent>());
 	readonly onClick: Event<IEditorMouseEvent> = this._onClick.event;
 
-	constructor(private editor: ICodeEditor) {
+	constructor(private editor: ICodeEditor
+	) {
 		super();
 		this._editPreferenceDecoration = [];
 		this._register(this.editor.onMouseDown((e: IEditorMouseEvent) => {
diff --git a/src/vs/workbench/contrib/preferences/browser/settingsEditor2.ts b/src/vs/workbench/contrib/preferences/browser/settingsEditor2.ts
index 7065e12..50efa39 100644
--- a/src/vs/workbench/contrib/preferences/browser/settingsEditor2.ts
+++ b/src/vs/workbench/contrib/preferences/browser/settingsEditor2.ts
@@ -40,7 +40,7 @@ import { IEditorMemento, IEditorOpenContext, IEditorPane } from 'vs/workbench/co
 import { attachSuggestEnabledInputBoxStyler, SuggestEnabledInput } from 'vs/workbench/contrib/codeEditor/browser/suggestEnabledInput/suggestEnabledInput';
 import { SettingsTarget, SettingsTargetsWidget } from 'vs/workbench/contrib/preferences/browser/preferencesWidgets';
 import { commonlyUsedData, tocData } from 'vs/workbench/contrib/preferences/browser/settingsLayout';
-import { AbstractSettingRenderer, HeightChangeParams, ISettingLinkClickEvent, ISettingOverrideClickEvent, resolveConfiguredUntrustedSettings, resolveExtensionsSettings, resolveSettingsTree, SettingsTree, SettingTreeRenderers } from 'vs/workbench/contrib/preferences/browser/settingsTree';
+import { AbstractSettingRenderer, ISettingLinkClickEvent, ISettingOverrideClickEvent, resolveConfiguredUntrustedSettings, resolveExtensionsSettings, resolveSettingsTree, SettingsTree, SettingTreeRenderers } from 'vs/workbench/contrib/preferences/browser/settingsTree';
 import { ISettingsEditorViewState, parseQuery, SearchResultIdx, SearchResultModel, SettingsTreeElement, SettingsTreeGroupChild, SettingsTreeGroupElement, SettingsTreeModel, SettingsTreeSettingElement } from 'vs/workbench/contrib/preferences/browser/settingsTreeModels';
 import { settingsTextInputBorder } from 'vs/workbench/contrib/preferences/browser/settingsWidgets';
 import { createTOCIterator, TOCTree, TOCTreeModel } from 'vs/workbench/contrib/preferences/browser/tocTree';
@@ -97,7 +97,6 @@ export class SettingsEditor2 extends EditorPane {
 		`@tag:${WORKSPACE_TRUST_SETTING_TAG}`,
 		'@tag:sync',
 		'@tag:usesOnlineServices',
-		'@tag:telemetry',
 		`@${ID_SETTING_TAG}`,
 		`@${EXTENSION_SETTING_TAG}`,
 		`@${FEATURE_SETTING_TAG}scm`,
@@ -123,7 +122,6 @@ export class SettingsEditor2 extends EditorPane {
 		return type === SettingValueType.Enum ||
 			type === SettingValueType.StringOrEnumArray ||
 			type === SettingValueType.BooleanObject ||
-			type === SettingValueType.Object ||
 			type === SettingValueType.Complex ||
 			type === SettingValueType.Boolean ||
 			type === SettingValueType.Exclude;
@@ -199,7 +197,7 @@ export class SettingsEditor2 extends EditorPane {
 		@IEditorGroupsService protected editorGroupService: IEditorGroupsService,
 		@IUserDataSyncWorkbenchService private readonly userDataSyncWorkbenchService: IUserDataSyncWorkbenchService,
 		@IUserDataAutoSyncEnablementService private readonly userDataAutoSyncEnablementService: IUserDataAutoSyncEnablementService,
-		@IWorkspaceTrustManagementService private readonly workspaceTrustManagementService: IWorkspaceTrustManagementService
+		@IWorkspaceTrustManagementService private readonly workspaceTrustManagementService: IWorkspaceTrustManagementService,
 	) {
 		super(SettingsEditor2.ID, telemetryService, themeService, storageService);
 		this.delayedFilterLogging = new Delayer<void>(1000);
@@ -745,14 +743,6 @@ export class SettingsEditor2 extends EditorPane {
 
 			this.searchWidget.setValue(element.targetKey);
 		}));
-		this._register(this.settingRenderers.onDidChangeSettingHeight((params: HeightChangeParams) => {
-			const { element, height } = params;
-			try {
-				this.settingsTree.updateElementHeight(element, height);
-			} catch (e) {
-				// the element was not found
-			}
-		}));
 
 		this.settingsTree = this._register(this.instantiationService.createInstance(SettingsTree,
 			this.settingsTreeContainer,
@@ -1057,7 +1047,7 @@ export class SettingsEditor2 extends EditorPane {
 			this.tocTreeModel.settingsTreeRoot = this.settingsTreeModel.root as SettingsTreeGroupElement;
 
 			const cachedState = this.restoreCachedState();
-			if (cachedState && cachedState.searchQuery || !!this.searchWidget.getValue()) {
+			if (cachedState && cachedState.searchQuery) {
 				await this.onSearchInputChanged();
 			} else {
 				this.refreshTOCTree();
diff --git a/src/vs/workbench/contrib/preferences/browser/settingsTree.ts b/src/vs/workbench/contrib/preferences/browser/settingsTree.ts
index 084f16d..16978da 100644
--- a/src/vs/workbench/contrib/preferences/browser/settingsTree.ts
+++ b/src/vs/workbench/contrib/preferences/browser/settingsTree.ts
@@ -10,7 +10,7 @@ import { IMouseEvent } from 'vs/base/browser/mouseEvent';
 import { alert as ariaAlert } from 'vs/base/browser/ui/aria/aria';
 import { Button } from 'vs/base/browser/ui/button/button';
 import { Checkbox } from 'vs/base/browser/ui/checkbox/checkbox';
-import { IInputOptions, InputBox } from 'vs/base/browser/ui/inputbox/inputBox';
+import { InputBox } from 'vs/base/browser/ui/inputbox/inputBox';
 import { CachedListVirtualDelegate } from 'vs/base/browser/ui/list/list';
 import { DefaultStyleController, IListAccessibilityProvider } from 'vs/base/browser/ui/list/listWidget';
 import { ISelectOptionItem, SelectBox } from 'vs/base/browser/ui/selectBox/selectBox';
@@ -24,7 +24,7 @@ import { Color, RGBA } from 'vs/base/common/color';
 import { onUnexpectedError } from 'vs/base/common/errors';
 import { Emitter, Event } from 'vs/base/common/event';
 import { KeyCode } from 'vs/base/common/keyCodes';
-import { Disposable, DisposableStore, dispose, toDisposable } from 'vs/base/common/lifecycle';
+import { Disposable, DisposableStore, dispose } from 'vs/base/common/lifecycle';
 import { isIOS } from 'vs/base/common/platform';
 import { escapeRegExpCharacters } from 'vs/base/common/strings';
 import { isArray, isDefined, isUndefinedOrNull } from 'vs/base/common/types';
@@ -43,7 +43,7 @@ import { ICssStyleCollector, IColorTheme, IThemeService, registerThemingParticip
 import { getIgnoredSettings } from 'vs/platform/userDataSync/common/settingsMerge';
 import { ITOCEntry } from 'vs/workbench/contrib/preferences/browser/settingsLayout';
 import { inspectSetting, ISettingsEditorViewState, settingKeyToDisplayFormat, SettingsTreeElement, SettingsTreeGroupChild, SettingsTreeGroupElement, SettingsTreeNewExtensionsElement, SettingsTreeSettingElement } from 'vs/workbench/contrib/preferences/browser/settingsTreeModels';
-import { ExcludeSettingWidget, ISettingListChangeEvent, IListDataItem, ListSettingWidget, settingsNumberInputBackground, settingsNumberInputBorder, settingsNumberInputForeground, settingsSelectBackground, settingsSelectBorder, settingsSelectForeground, settingsSelectListBorder, settingsTextInputBackground, settingsTextInputBorder, settingsTextInputForeground, ObjectSettingDropdownWidget, IObjectDataItem, IObjectEnumOption, ObjectValue, IObjectValueSuggester, IObjectKeySuggester, focusedRowBackground, focusedRowBorder, settingsHeaderForeground, rowHoverBackground, ObjectSettingCheckboxWidget } from 'vs/workbench/contrib/preferences/browser/settingsWidgets';
+import { ExcludeSettingWidget, ISettingListChangeEvent, IListDataItem, ListSettingWidget, settingsNumberInputBackground, settingsNumberInputBorder, settingsNumberInputForeground, settingsSelectBackground, settingsSelectBorder, settingsSelectForeground, settingsSelectListBorder, settingsTextInputBackground, settingsTextInputBorder, settingsTextInputForeground, ObjectSettingWidget, IObjectDataItem, IObjectEnumOption, ObjectValue, IObjectValueSuggester, IObjectKeySuggester, focusedRowBackground, focusedRowBorder, settingsHeaderForeground, rowHoverBackground, BoolObjectSettingWidget, IBoolObjectDataItem } from 'vs/workbench/contrib/preferences/browser/settingsWidgets';
 import { SETTINGS_EDITOR_COMMAND_SHOW_CONTEXT_MENU } from 'vs/workbench/contrib/preferences/common/preferences';
 import { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';
 import { ISetting, ISettingsGroup, SettingValueType } from 'vs/workbench/services/preferences/common/preferences';
@@ -145,6 +145,12 @@ function getObjectDisplayValue(element: SettingsTreeSettingElement): IObjectData
 			schema
 		}));
 
+	const additionalValueEnums = getEnumOptionsFromSchema(
+		typeof objectAdditionalProperties === 'boolean'
+			? {}
+			: objectAdditionalProperties ?? {}
+	);
+
 	const wellDefinedKeyEnumOptions = Object.entries(objectProperties ?? {}).map(
 		([key, schema]) => ({ value: key, description: schema.description })
 	);
@@ -152,23 +158,8 @@ function getObjectDisplayValue(element: SettingsTreeSettingElement): IObjectData
 	return Object.keys(data).map(key => {
 		if (isDefined(objectProperties) && key in objectProperties) {
 			const defaultValue = elementDefaultValue[key];
-
-			if (element.setting.allKeysAreBoolean) {
-				return {
-					key: {
-						type: 'string',
-						data: key
-					},
-					value: {
-						type: 'boolean',
-						data: data[key]
-					},
-					keyDescription: objectProperties[key].description,
-					removable: false
-				} as IObjectDataItem;
-			}
-
 			const valueEnumOptions = getEnumOptionsFromSchema(objectProperties[key]);
+
 			return {
 				key: {
 					type: 'enum',
@@ -180,12 +171,12 @@ function getObjectDisplayValue(element: SettingsTreeSettingElement): IObjectData
 					data: data[key],
 					options: valueEnumOptions,
 				},
-				keyDescription: objectProperties[key].description,
 				removable: isUndefinedOrNull(defaultValue),
 			} as IObjectDataItem;
 		}
 
 		const schema = patternsAndSchemas.find(({ pattern }) => pattern.test(key))?.schema;
+
 		if (schema) {
 			const valueEnumOptions = getEnumOptionsFromSchema(schema);
 			return {
@@ -195,17 +186,10 @@ function getObjectDisplayValue(element: SettingsTreeSettingElement): IObjectData
 					data: data[key],
 					options: valueEnumOptions,
 				},
-				keyDescription: schema.description,
 				removable: true,
 			} as IObjectDataItem;
 		}
 
-		const additionalValueEnums = getEnumOptionsFromSchema(
-			typeof objectAdditionalProperties === 'boolean'
-				? {}
-				: objectAdditionalProperties ?? {}
-		);
-
 		return {
 			key: { type: 'string', data: key },
 			value: {
@@ -213,23 +197,50 @@ function getObjectDisplayValue(element: SettingsTreeSettingElement): IObjectData
 				data: data[key],
 				options: additionalValueEnums,
 			},
-			keyDescription: typeof objectAdditionalProperties === 'object' ? objectAdditionalProperties.description : undefined,
 			removable: true,
 		} as IObjectDataItem;
-	}).filter(item => !isUndefinedOrNull(item.value.data));
+	});
+}
+
+function getBoolObjectDisplayValue(element: SettingsTreeSettingElement): IBoolObjectDataItem[] {
+	const elementDefaultValue: Record<string, unknown> = typeof element.defaultValue === 'object'
+		? element.defaultValue ?? {}
+		: {};
+
+	const elementScopeValue: Record<string, unknown> = typeof element.scopeValue === 'object'
+		? element.scopeValue ?? {}
+		: {};
+
+	const data = element.isConfigured ?
+		{ ...elementDefaultValue, ...elementScopeValue } :
+		elementDefaultValue;
+
+	const { objectProperties } = element.setting;
+
+	return Object.keys(data).map(key => {
+		if (objectProperties && key in objectProperties) {
+			return {
+				key,
+				value: data[key],
+				description: objectProperties[key].description
+			} as IBoolObjectDataItem;
+		}
+
+		return {
+			key,
+			value: data[key],
+		} as IBoolObjectDataItem;
+	});
 }
 
 function createArraySuggester(element: SettingsTreeSettingElement): IObjectKeySuggester {
-	return (keys, idx) => {
+	return keys => {
 		const enumOptions: IObjectEnumOption[] = [];
 
 		if (element.setting.enum) {
-			element.setting.enum.forEach((key, i) => {
-				// include the currently selected value, even if uniqueItems is true
-				if (!element.setting.uniqueItems || (idx !== undefined && key === keys[idx]) || !keys.includes(key)) {
-					const description = element.setting.enumDescriptions?.[i];
-					enumOptions.push({ value: key, description });
-				}
+			element.setting.enum.forEach((staticKey, i) => {
+				const description = element.setting.enumDescriptions?.[i];
+				enumOptions.push({ value: staticKey, description });
 			});
 		}
 
@@ -514,10 +525,12 @@ interface ISettingExcludeItemTemplate extends ISettingItemTemplate<void> {
 	excludeWidget: ListSettingWidget;
 }
 
-interface ISettingObjectItemTemplate extends ISettingItemTemplate<Record<string, unknown> | undefined> {
-	objectDropdownWidget?: ObjectSettingDropdownWidget,
-	objectCheckboxWidget?: ObjectSettingCheckboxWidget;
-	validationErrorMessageElement: HTMLElement;
+interface ISettingObjectItemTemplate extends ISettingItemTemplate<void> {
+	objectWidget: ObjectSettingWidget;
+}
+
+interface ISettingBoolObjectItemTemplate extends ISettingItemTemplate<void> {
+	objectWidget: BoolObjectSettingWidget;
 }
 
 interface ISettingNewExtensionsTemplate extends IDisposableTemplate {
@@ -532,7 +545,6 @@ interface IGroupTitleTemplate extends IDisposableTemplate {
 
 const SETTINGS_UNTRUSTED_TEMPLATE_ID = 'settings.untrusted.template';
 const SETTINGS_TEXT_TEMPLATE_ID = 'settings.text.template';
-const SETTINGS_MULTILINE_TEXT_TEMPLATE_ID = 'settings.multilineText.template';
 const SETTINGS_NUMBER_TEMPLATE_ID = 'settings.number.template';
 const SETTINGS_ENUM_TEMPLATE_ID = 'settings.enum.template';
 const SETTINGS_BOOL_TEMPLATE_ID = 'settings.bool.template';
@@ -588,11 +600,6 @@ function addChildrenToTabOrder(node: Element): void {
 	});
 }
 
-export interface HeightChangeParams {
-	element: SettingsTreeElement;
-	height: number;
-}
-
 export abstract class AbstractSettingRenderer extends Disposable implements ITreeRenderer<SettingsTreeElement, never, any> {
 	/** To override */
 	abstract get templateId(): string;
@@ -626,9 +633,6 @@ export abstract class AbstractSettingRenderer extends Disposable implements ITre
 	private readonly _onDidChangeIgnoredSettings = this._register(new Emitter<void>());
 	readonly onDidChangeIgnoredSettings: Event<void> = this._onDidChangeIgnoredSettings.event;
 
-	protected readonly _onDidChangeSettingHeight = this._register(new Emitter<HeightChangeParams>());
-	readonly onDidChangeSettingHeight: Event<HeightChangeParams> = this._onDidChangeSettingHeight.event;
-
 	constructor(
 		private readonly settingActions: IAction[],
 		private readonly disposableActionFactory: (setting: ISetting) => IAction[],
@@ -1070,14 +1074,7 @@ export class SettingArrayRenderer extends AbstractSettingRenderer implements ITr
 				newValue = [...template.context.value];
 			}
 
-			if (e.sourceIndex !== undefined) {
-				// A drag and drop occurred
-				const sourceIndex = e.sourceIndex;
-				const targetIndex = e.targetIndex!;
-				const splicedElem = newValue.splice(sourceIndex, 1)[0];
-				newValue.splice(targetIndex, 0, splicedElem);
-			} else if (e.targetIndex !== undefined) {
-				const itemValueData = e.item?.value.data.toString() ?? '';
+			if (e.targetIndex !== undefined) {
 				// Delete value
 				if (!e.item?.value.data && e.originalItem.value.data && e.targetIndex > -1) {
 					newValue.splice(e.targetIndex, 1);
@@ -1085,20 +1082,19 @@ export class SettingArrayRenderer extends AbstractSettingRenderer implements ITr
 				// Update value
 				else if (e.item?.value.data && e.originalItem.value.data) {
 					if (e.targetIndex > -1) {
-						newValue[e.targetIndex] = itemValueData;
+						newValue[e.targetIndex] = e.item.value.data.toString();
 					}
 					// For some reason, we are updating and cannot find original value
 					// Just append the value in this case
 					else {
-						newValue.push(itemValueData);
+						newValue.push(e.item.value.data.toString());
 					}
 				}
 				// Add value
 				else if (e.item?.value.data && !e.originalItem.value.data && e.targetIndex >= newValue.length) {
-					newValue.push(itemValueData);
+					newValue.push(e.item.value.data.toString());
 				}
 			}
-
 			if (
 				template.context.defaultValue &&
 				isArray(template.context.defaultValue) &&
@@ -1107,6 +1103,7 @@ export class SettingArrayRenderer extends AbstractSettingRenderer implements ITr
 			) {
 				return undefined;
 			}
+
 			return newValue;
 		}
 
@@ -1126,10 +1123,6 @@ export class SettingArrayRenderer extends AbstractSettingRenderer implements ITr
 		});
 		template.context = dataElement;
 
-		template.elementDisposables.add(toDisposable(() => {
-			template.listWidget.cancelEdit();
-		}));
-
 		template.onChange = (v) => {
 			onChange(v);
 			renderArrayValidations(dataElement, template, v, false);
@@ -1139,37 +1132,29 @@ export class SettingArrayRenderer extends AbstractSettingRenderer implements ITr
 	}
 }
 
-abstract class AbstractSettingObjectRenderer extends AbstractSettingRenderer implements ITreeRenderer<SettingsTreeSettingElement, never, ISettingObjectItemTemplate> {
+export class SettingObjectRenderer extends AbstractSettingRenderer implements ITreeRenderer<SettingsTreeSettingElement, never, ISettingObjectItemTemplate> {
+	templateId = SETTINGS_OBJECT_TEMPLATE_ID;
 
-	protected renderTemplateWithWidget(common: ISettingItemTemplate, widget: ObjectSettingCheckboxWidget | ObjectSettingDropdownWidget): ISettingObjectItemTemplate {
-		widget.domNode.classList.add(AbstractSettingRenderer.CONTROL_CLASS);
-		common.toDispose.add(widget);
+	renderTemplate(container: HTMLElement): ISettingObjectItemTemplate {
+		const common = this.renderCommonTemplate(null, container, 'list');
 
-		const descriptionElement = common.containerElement.querySelector('.setting-item-description')!;
-		const validationErrorMessageElement = $('.setting-item-validation-message');
-		descriptionElement.after(validationErrorMessageElement);
+		const objectWidget = this._instantiationService.createInstance(ObjectSettingWidget, common.controlElement);
+		objectWidget.domNode.classList.add(AbstractSettingRenderer.CONTROL_CLASS);
+		common.toDispose.add(objectWidget);
 
 		const template: ISettingObjectItemTemplate = {
 			...common,
-			validationErrorMessageElement
+			objectWidget: objectWidget,
 		};
-		if (widget instanceof ObjectSettingCheckboxWidget) {
-			template.objectCheckboxWidget = widget;
-		} else {
-			template.objectDropdownWidget = widget;
-		}
 
 		this.addSettingElementFocusHandler(template);
 
-		common.toDispose.add(widget.onDidChangeList(e => {
-			this.onDidChangeObject(template, e);
-		}));
+		common.toDispose.add(objectWidget.onDidChangeList(e => this.onDidChangeObject(template, e)));
 
 		return template;
 	}
 
-	protected onDidChangeObject(template: ISettingObjectItemTemplate, e: ISettingListChangeEvent<IObjectDataItem>): void {
-		const widget = (template.objectCheckboxWidget ?? template.objectDropdownWidget)!;
+	private onDidChangeObject(template: ISettingObjectItemTemplate, e: ISettingListChangeEvent<IObjectDataItem>): void {
 		if (template.context) {
 			const defaultValue: Record<string, unknown> = typeof template.context.defaultValue === 'object'
 				? template.context.defaultValue ?? {}
@@ -1182,7 +1167,7 @@ abstract class AbstractSettingObjectRenderer extends AbstractSettingRenderer imp
 			const newValue: Record<string, unknown> = {};
 			const newItems: IObjectDataItem[] = [];
 
-			widget.items.forEach((item, idx) => {
+			template.objectWidget.items.forEach((item, idx) => {
 				// Item was updated
 				if (isDefined(e.item) && e.targetIndex === idx) {
 					newValue[e.item.key.data] = e.item.value.data;
@@ -1210,7 +1195,7 @@ abstract class AbstractSettingObjectRenderer extends AbstractSettingRenderer imp
 				}
 			}
 			// New item was added
-			else if (widget.isItemNew(e.originalItem) && e.item.key.data !== '') {
+			else if (template.objectWidget.isItemNew(e.originalItem) && e.item.key.data !== '') {
 				newValue[e.item.key.data] = e.item.value.data;
 				newItems.push(e.item);
 			}
@@ -1222,39 +1207,25 @@ abstract class AbstractSettingObjectRenderer extends AbstractSettingRenderer imp
 				}
 			});
 
-			const newObject = Object.keys(newValue).length === 0 ? undefined : newValue;
-
-			if (template.objectCheckboxWidget) {
-				template.objectCheckboxWidget.setValue(newItems);
-			} else {
-				template.objectDropdownWidget!.setValue(newItems);
-			}
+			this._onDidChangeSetting.fire({
+				key: template.context.setting.key,
+				value: Object.keys(newValue).length === 0 ? undefined : newValue,
+				type: template.context.valueType
+			});
 
-			if (template.onChange) {
-				template.onChange(newObject);
-			}
+			template.objectWidget.setValue(newItems);
 		}
 	}
 
 	renderElement(element: ITreeNode<SettingsTreeSettingElement, never>, index: number, templateData: ISettingObjectItemTemplate): void {
 		super.renderSettingElement(element, index, templateData);
 	}
-}
 
-export class SettingObjectRenderer extends AbstractSettingObjectRenderer implements ITreeRenderer<SettingsTreeSettingElement, never, ISettingObjectItemTemplate> {
-	override templateId = SETTINGS_OBJECT_TEMPLATE_ID;
-
-	renderTemplate(container: HTMLElement): ISettingObjectItemTemplate {
-		const common = this.renderCommonTemplate(null, container, 'list');
-		const widget = this._instantiationService.createInstance(ObjectSettingDropdownWidget, common.controlElement);
-		return this.renderTemplateWithWidget(common, widget);
-	}
-
-	protected renderValue(dataElement: SettingsTreeSettingElement, template: ISettingObjectItemTemplate, onChange: (value: Record<string, unknown> | undefined) => void): void {
+	protected renderValue(dataElement: SettingsTreeSettingElement, template: ISettingObjectItemTemplate, onChange: (value: string) => void): void {
 		const items = getObjectDisplayValue(dataElement);
 		const { key, objectProperties, objectPatternProperties, objectAdditionalProperties } = dataElement.setting;
 
-		template.objectDropdownWidget!.setValue(items, {
+		template.objectWidget.setValue(items, {
 			settingKey: key,
 			showAddButton: objectAdditionalProperties === false
 				? (
@@ -1267,51 +1238,106 @@ export class SettingObjectRenderer extends AbstractSettingObjectRenderer impleme
 		});
 
 		template.context = dataElement;
-
-		template.elementDisposables.add(toDisposable(() => {
-			template.objectDropdownWidget!.cancelEdit();
-		}));
-
-		template.onChange = (v: Record<string, unknown> | undefined) => {
-			onChange(v);
-			renderArrayValidations(dataElement, template, v, false);
-		};
-		renderArrayValidations(dataElement, template, dataElement.value, true);
 	}
 }
 
-export class SettingBoolObjectRenderer extends AbstractSettingObjectRenderer implements ITreeRenderer<SettingsTreeSettingElement, never, ISettingObjectItemTemplate> {
-	override templateId = SETTINGS_BOOL_OBJECT_TEMPLATE_ID;
+export class SettingBoolObjectRenderer extends AbstractSettingRenderer implements ITreeRenderer<SettingsTreeSettingElement, never, ISettingBoolObjectItemTemplate> {
+	templateId = SETTINGS_BOOL_OBJECT_TEMPLATE_ID;
 
-	renderTemplate(container: HTMLElement): ISettingObjectItemTemplate {
+	renderTemplate(container: HTMLElement): ISettingBoolObjectItemTemplate {
 		const common = this.renderCommonTemplate(null, container, 'list');
-		const widget = this._instantiationService.createInstance(ObjectSettingCheckboxWidget, common.controlElement);
-		return this.renderTemplateWithWidget(common, widget);
+
+		const objectWidget = this._instantiationService.createInstance(BoolObjectSettingWidget, common.controlElement);
+		objectWidget.domNode.classList.add(AbstractSettingRenderer.CONTROL_CLASS);
+		common.toDispose.add(objectWidget);
+
+		const template: ISettingBoolObjectItemTemplate = {
+			...common,
+			objectWidget
+		};
+
+		this.addSettingElementFocusHandler(template);
+
+		common.toDispose.add(objectWidget.onDidChangeList(e => this.onDidChangeObject(template, e)));
+
+		return template;
 	}
 
-	override onDidChangeObject(template: ISettingObjectItemTemplate, e: ISettingListChangeEvent<IObjectDataItem>): void {
+	private onDidChangeObject(template: ISettingBoolObjectItemTemplate, e: ISettingListChangeEvent<IBoolObjectDataItem>): void {
 		if (template.context) {
-			super.onDidChangeObject(template, e);
+			const defaultValue: Record<string, boolean> = template.context?.defaultValue ?? {};
+			const scopeValue: Record<string, boolean> = template.context?.scopeValue ?? {};
+			const newValue: Record<string, boolean> = {};
+			const newItems: IBoolObjectDataItem[] = [];
+
+			template.objectWidget.items.forEach((item, idx) => {
+				// Item was updated
+				if (isDefined(e.item) && e.targetIndex === idx) {
+					newValue[e.item.key] = e.item.value;
+					newItems.push(e.item);
+				}
+				// All remaining items, but skip the one that we just updated
+				else if (isUndefinedOrNull(e.item) || e.item.key !== item.key) {
+					newValue[item.key] = item.value;
+					newItems.push(item);
+				}
+			});
+
+			// Item was deleted
+			if (isUndefinedOrNull(e.item)) {
+				delete newValue[e.originalItem.key];
+
+				const itemToDelete = newItems.findIndex(item => item.key === e.originalItem.key);
+				const defaultItemValue = defaultValue[e.originalItem.key];
+
+				// Item does not have a default
+				if (isUndefinedOrNull(defaultValue[e.originalItem.key]) && itemToDelete > -1) {
+					newItems.splice(itemToDelete, 1);
+				} else if (itemToDelete > -1) {
+					newItems[itemToDelete].value = defaultItemValue;
+				}
+			}
+			// New item was added
+			else if (template.objectWidget.isItemNew(e.originalItem) && e.item.key !== '') {
+				newValue[e.item.key] = e.item.value;
+				newItems.push(e.item);
+			}
+
+			Object.entries(newValue).forEach(([key, value]) => {
+				// value from the scope has changed back to the default
+				if (scopeValue[key] !== value && defaultValue[key] === value) {
+					delete newValue[key];
+				}
+			});
+
+			this._onDidChangeSetting.fire({
+				key: template.context.setting.key,
+				value: Object.keys(newValue).length === 0 ? undefined : newValue,
+				type: template.context.valueType
+			});
 
 			// Focus this setting explicitly, in case we were previously
 			// focused on another setting and clicked a checkbox/value container
 			// for this setting.
 			this._onDidFocusSetting.fire(template.context);
+
+			template.objectWidget.setValue(newItems);
 		}
 	}
 
-	protected renderValue(dataElement: SettingsTreeSettingElement, template: ISettingObjectItemTemplate, onChange: (value: Record<string, unknown> | undefined) => void): void {
-		const items = getObjectDisplayValue(dataElement);
+	renderElement(element: ITreeNode<SettingsTreeSettingElement, never>, index: number, templateData: ISettingBoolObjectItemTemplate): void {
+		super.renderSettingElement(element, index, templateData);
+	}
+
+	protected renderValue(dataElement: SettingsTreeSettingElement, template: ISettingBoolObjectItemTemplate, onChange: (value: string) => void): void {
+		const items = getBoolObjectDisplayValue(dataElement);
 		const { key } = dataElement.setting;
 
-		template.objectCheckboxWidget!.setValue(items, {
+		template.objectWidget.setValue(items, {
 			settingKey: key
 		});
 
 		template.context = dataElement;
-		template.onChange = (v: Record<string, unknown> | undefined) => {
-			onChange(v);
-		};
 	}
 }
 
@@ -1388,25 +1414,17 @@ export class SettingExcludeRenderer extends AbstractSettingRenderer implements I
 		const value = getExcludeDisplayValue(dataElement);
 		template.excludeWidget.setValue(value);
 		template.context = dataElement;
-		template.elementDisposables.add(toDisposable(() => {
-			template.excludeWidget.cancelEdit();
-		}));
 	}
 }
 
-abstract class AbstractSettingTextRenderer extends AbstractSettingRenderer implements ITreeRenderer<SettingsTreeSettingElement, never, ISettingTextItemTemplate> {
-	private readonly MULTILINE_MAX_HEIGHT = 150;
+export class SettingTextRenderer extends AbstractSettingRenderer implements ITreeRenderer<SettingsTreeSettingElement, never, ISettingTextItemTemplate> {
+	templateId = SETTINGS_TEXT_TEMPLATE_ID;
 
-	renderTemplate(_container: HTMLElement, useMultiline?: boolean): ISettingTextItemTemplate {
+	renderTemplate(_container: HTMLElement): ISettingTextItemTemplate {
 		const common = this.renderCommonTemplate(null, _container, 'text');
 		const validationErrorMessageElement = DOM.append(common.containerElement, $('.setting-item-validation-message'));
 
-		const inputBoxOptions: IInputOptions = {
-			flexibleHeight: useMultiline,
-			flexibleWidth: false,
-			flexibleMaxHeight: this.MULTILINE_MAX_HEIGHT
-		};
-		const inputBox = new InputBox(common.controlElement, this._contextViewService, inputBoxOptions);
+		const inputBox = new InputBox(common.controlElement, this._contextViewService);
 		common.toDispose.add(inputBox);
 		common.toDispose.add(attachInputBoxStyler(inputBox, this._themeService, {
 			inputBackground: settingsTextInputBackground,
@@ -1423,6 +1441,14 @@ abstract class AbstractSettingTextRenderer extends AbstractSettingRenderer imple
 		inputBox.inputElement.classList.add(AbstractSettingRenderer.CONTROL_CLASS);
 		inputBox.inputElement.tabIndex = 0;
 
+		// TODO@9at8: listWidget filters out all key events from input boxes, so we need to come up with a better way
+		// Disable ArrowUp and ArrowDown behaviour in favor of list navigation
+		common.toDispose.add(DOM.addStandardDisposableListener(inputBox.inputElement, DOM.EventType.KEY_DOWN, e => {
+			if (e.equals(KeyCode.UpArrow) || e.equals(KeyCode.DownArrow)) {
+				e.preventDefault();
+			}
+		}));
+
 		const template: ISettingTextItemTemplate = {
 			...common,
 			inputBox,
@@ -1451,55 +1477,6 @@ abstract class AbstractSettingTextRenderer extends AbstractSettingRenderer imple
 	}
 }
 
-export class SettingTextRenderer extends AbstractSettingTextRenderer implements ITreeRenderer<SettingsTreeSettingElement, never, ISettingTextItemTemplate> {
-	templateId = SETTINGS_TEXT_TEMPLATE_ID;
-
-	override renderTemplate(_container: HTMLElement): ISettingTextItemTemplate {
-		const template = super.renderTemplate(_container, false);
-
-		// TODO@9at8: listWidget filters out all key events from input boxes, so we need to come up with a better way
-		// Disable ArrowUp and ArrowDown behaviour in favor of list navigation
-		template.toDispose.add(DOM.addStandardDisposableListener(template.inputBox.inputElement, DOM.EventType.KEY_DOWN, e => {
-			if (e.equals(KeyCode.UpArrow) || e.equals(KeyCode.DownArrow)) {
-				e.preventDefault();
-			}
-		}));
-
-		return template;
-	}
-}
-
-export class SettingMultilineTextRenderer extends AbstractSettingTextRenderer implements ITreeRenderer<SettingsTreeSettingElement, never, ISettingTextItemTemplate> {
-	templateId = SETTINGS_MULTILINE_TEXT_TEMPLATE_ID;
-
-	override renderTemplate(_container: HTMLElement): ISettingTextItemTemplate {
-		return super.renderTemplate(_container, true);
-	}
-
-	protected override renderValue(dataElement: SettingsTreeSettingElement, template: ISettingTextItemTemplate, onChange: (value: string) => void) {
-		const onChangeOverride = (value: string) => {
-			// Ensure the model is up to date since a different value will be rendered as different height when probing the height.
-			dataElement.value = value;
-			onChange(value);
-		};
-		super.renderValue(dataElement, template, onChangeOverride);
-		template.elementDisposables.add(
-			template.inputBox.onDidHeightChange(e => {
-				const height = template.containerElement.clientHeight;
-				// Don't fire event if height is reported as 0,
-				// which sometimes happens when clicking onto a new setting.
-				if (height) {
-					this._onDidChangeSettingHeight.fire({
-						element: dataElement,
-						height: template.containerElement.clientHeight
-					});
-				}
-			})
-		);
-		template.inputBox.layout();
-	}
-}
-
 export class SettingEnumRenderer extends AbstractSettingRenderer implements ITreeRenderer<SettingsTreeSettingElement, never, ISettingEnumItemTemplate> {
 	templateId = SETTINGS_ENUM_TEMPLATE_ID;
 
@@ -1549,34 +1526,21 @@ export class SettingEnumRenderer extends AbstractSettingRenderer implements ITre
 	}
 
 	protected renderValue(dataElement: SettingsTreeSettingElement, template: ISettingEnumItemTemplate, onChange: (value: string) => void): void {
-		// Make shallow copies here so that we don't modify the actual dataElement later
-		const enumItemLabels = dataElement.setting.enumItemLabels ? [...dataElement.setting.enumItemLabels] : [];
-		const enumDescriptions = dataElement.setting.enumDescriptions ? [...dataElement.setting.enumDescriptions] : [];
-		const settingEnum = [...dataElement.setting.enum!];
+		const enumItemLabels = dataElement.setting.enumItemLabels;
+		const enumDescriptions = dataElement.setting.enumDescriptions;
 		const enumDescriptionsAreMarkdown = dataElement.setting.enumDescriptionsAreMarkdown;
 
 		const disposables = new DisposableStore();
 		template.toDispose.add(disposables);
 
-		const defaultOrEmptyString = dataElement.defaultValue ?? '';
-
-		let createdDefault = false;
-		if (!settingEnum.includes(defaultOrEmptyString)) {
-			// Add a new potentially blank default setting
-			settingEnum.unshift(defaultOrEmptyString);
-			enumDescriptions.unshift('');
-			enumItemLabels.unshift('');
-			createdDefault = true;
-		}
-
-		const displayOptions = settingEnum
+		const displayOptions = dataElement.setting.enum!
 			.map(String)
 			.map(escapeInvisibleChars)
 			.map((data, index) => {
-				const description = (enumDescriptions[index] && (enumDescriptionsAreMarkdown ? fixSettingLinks(enumDescriptions[index], false) : enumDescriptions[index]));
+				const description = (enumDescriptions && enumDescriptions[index] && (enumDescriptionsAreMarkdown ? fixSettingLinks(enumDescriptions[index], false) : enumDescriptions[index]));
 				return <ISelectOptionItem>{
-					text: enumItemLabels[index] ? enumItemLabels[index] : data,
-					detail: enumItemLabels[index] ? data : '',
+					text: enumItemLabels && enumItemLabels[index] ? enumItemLabels[index] : data,
+					detail: enumItemLabels && enumItemLabels[index] ? data : '',
 					description,
 					descriptionIsMarkdown: enumDescriptionsAreMarkdown,
 					descriptionMarkdownActionHandler: {
@@ -1585,26 +1549,23 @@ export class SettingEnumRenderer extends AbstractSettingRenderer implements ITre
 						},
 						disposeables: disposables
 					},
-					decoratorRight: (data === dataElement.defaultValue || createdDefault && index === 0 ? localize('settings.Default', "default") : '')
+					decoratorRight: (data === dataElement.defaultValue ? localize('settings.Default', "default") : '')
 				};
 			});
 
 		template.selectBox.setOptions(displayOptions);
 
-		let idx = settingEnum.indexOf(dataElement.value);
+		let idx = dataElement.setting.enum!.indexOf(dataElement.value);
 		if (idx === -1) {
-			idx = settingEnum.indexOf(defaultOrEmptyString);
+			idx = dataElement.setting.enum!.indexOf(dataElement.defaultValue);
+			if (idx === -1) {
+				idx = 0;
+			}
 		}
 
 		template.onChange = undefined;
 		template.selectBox.select(idx);
-		template.onChange = (idx) => {
-			if (createdDefault && idx === 0) {
-				onChange(dataElement.defaultValue);
-			} else {
-				onChange(settingEnum[idx]);
-			}
-		};
+		template.onChange = idx => onChange(dataElement.setting.enum![idx]);
 
 		template.enumDescriptionElement.innerText = '';
 	}
@@ -1809,8 +1770,6 @@ export class SettingTreeRenderers {
 
 	readonly onDidFocusSetting: Event<SettingsTreeSettingElement>;
 
-	readonly onDidChangeSettingHeight: Event<HeightChangeParams>;
-
 	readonly allRenderers: ITreeRenderer<SettingsTreeElement, never, any>[];
 
 	private readonly settingActions: IAction[];
@@ -1841,7 +1800,6 @@ export class SettingTreeRenderers {
 			this._instantiationService.createInstance(SettingArrayRenderer, this.settingActions, actionFactory),
 			this._instantiationService.createInstance(SettingComplexRenderer, this.settingActions, actionFactory),
 			this._instantiationService.createInstance(SettingTextRenderer, this.settingActions, actionFactory),
-			this._instantiationService.createInstance(SettingMultilineTextRenderer, this.settingActions, actionFactory),
 			this._instantiationService.createInstance(SettingExcludeRenderer, this.settingActions, actionFactory),
 			this._instantiationService.createInstance(SettingEnumRenderer, this.settingActions, actionFactory),
 			this._instantiationService.createInstance(SettingObjectRenderer, this.settingActions, actionFactory),
@@ -1857,7 +1815,6 @@ export class SettingTreeRenderers {
 		this.onDidOpenSettings = Event.any(...settingRenderers.map(r => r.onDidOpenSettings));
 		this.onDidClickSettingLink = Event.any(...settingRenderers.map(r => r.onDidClickSettingLink));
 		this.onDidFocusSetting = Event.any(...settingRenderers.map(r => r.onDidFocusSetting));
-		this.onDidChangeSettingHeight = Event.any(...settingRenderers.map(r => r.onDidChangeSettingHeight));
 
 		this.allRenderers = [
 			...settingRenderers,
@@ -1938,8 +1895,8 @@ function renderValidations(dataElement: SettingsTreeSettingElement, template: IS
 
 function renderArrayValidations(
 	dataElement: SettingsTreeSettingElement,
-	template: ISettingListItemTemplate | ISettingObjectItemTemplate,
-	value: string[] | Record<string, unknown> | undefined,
+	template: ISettingListItemTemplate,
+	value: string[] | undefined,
 	calledOnStartup: boolean
 ) {
 	template.containerElement.classList.add('invalid-input');
@@ -2071,17 +2028,10 @@ class SettingsTreeDelegate extends CachedListVirtualDelegate<SettingsTreeGroupCh
 				return SETTINGS_BOOL_TEMPLATE_ID;
 			}
 
-			if (element.valueType === SettingValueType.Integer ||
-				element.valueType === SettingValueType.Number ||
-				element.valueType === SettingValueType.NullableInteger ||
-				element.valueType === SettingValueType.NullableNumber) {
+			if (element.valueType === SettingValueType.Integer || element.valueType === SettingValueType.Number || element.valueType === SettingValueType.NullableInteger || element.valueType === SettingValueType.NullableNumber) {
 				return SETTINGS_NUMBER_TEMPLATE_ID;
 			}
 
-			if (element.valueType === SettingValueType.MultilineString) {
-				return SETTINGS_MULTILINE_TEXT_TEMPLATE_ID;
-			}
-
 			if (element.valueType === SettingValueType.String) {
 				return SETTINGS_TEXT_TEMPLATE_ID;
 			}
diff --git a/src/vs/workbench/contrib/preferences/browser/settingsTreeModels.ts b/src/vs/workbench/contrib/preferences/browser/settingsTreeModels.ts
index 0e7c14e..6e46f0e 100644
--- a/src/vs/workbench/contrib/preferences/browser/settingsTreeModels.ts
+++ b/src/vs/workbench/contrib/preferences/browser/settingsTreeModels.ts
@@ -18,7 +18,6 @@ import { FOLDER_SCOPES, WORKSPACE_SCOPES, REMOTE_MACHINE_SCOPES, LOCAL_MACHINE_S
 import { IJSONSchema } from 'vs/base/common/jsonSchema';
 import { Disposable } from 'vs/base/common/lifecycle';
 import { Emitter } from 'vs/base/common/event';
-import { EditPresentationTypes } from 'vs/platform/configuration/common/configurationRegistry';
 
 export const ONLINE_SERVICES_SETTING_TAG = 'usesOnlineServices';
 
@@ -228,11 +227,7 @@ export class SettingsTreeSettingElement extends SettingsTreeElement {
 		if (this.setting.enum && (!this.setting.type || settingTypeEnumRenderable(this.setting.type))) {
 			this.valueType = SettingValueType.Enum;
 		} else if (this.setting.type === 'string') {
-			if (this.setting.editPresentation === EditPresentationTypes.Multiline) {
-				this.valueType = SettingValueType.MultilineString;
-			} else {
-				this.valueType = SettingValueType.String;
-			}
+			this.valueType = SettingValueType.String;
 		} else if (isExcludeSetting(this.setting)) {
 			this.valueType = SettingValueType.Exclude;
 		} else if (this.setting.type === 'integer') {
@@ -243,20 +238,18 @@ export class SettingsTreeSettingElement extends SettingsTreeElement {
 			this.valueType = SettingValueType.Boolean;
 		} else if (this.setting.type === 'array' && (this.setting.arrayItemType === 'string' || this.setting.arrayItemType === 'enum')) {
 			this.valueType = SettingValueType.StringOrEnumArray;
-		} else if (isArray(this.setting.type) && this.setting.type.includes(SettingValueType.Null) && this.setting.type.length === 2) {
-			if (this.setting.type.includes(SettingValueType.Integer)) {
+		} else if (isArray(this.setting.type) && this.setting.type.indexOf(SettingValueType.Null) > -1 && this.setting.type.length === 2) {
+			if (this.setting.type.indexOf(SettingValueType.Integer) > -1) {
 				this.valueType = SettingValueType.NullableInteger;
-			} else if (this.setting.type.includes(SettingValueType.Number)) {
+			} else if (this.setting.type.indexOf(SettingValueType.Number) > -1) {
 				this.valueType = SettingValueType.NullableNumber;
 			} else {
 				this.valueType = SettingValueType.Complex;
 			}
 		} else if (isObjectSetting(this.setting)) {
-			if (this.setting.allKeysAreBoolean) {
-				this.valueType = SettingValueType.BooleanObject;
-			} else {
-				this.valueType = SettingValueType.Object;
-			}
+			this.valueType = SettingValueType.Object;
+		} else if (this.setting.allKeysAreBoolean) {
+			this.valueType = SettingValueType.BooleanObject;
 		} else {
 			this.valueType = SettingValueType.Complex;
 		}
@@ -597,7 +590,7 @@ function isObjectSetting({
 	}
 
 	// object additional properties allow it to have any shape
-	if (objectAdditionalProperties === true || objectAdditionalProperties === undefined) {
+	if (objectAdditionalProperties === true) {
 		return false;
 	}
 
@@ -615,13 +608,15 @@ function isObjectSetting({
 		return [schema];
 	}));
 
-	return flatSchemas.every(isObjectRenderableSchema);
+
+	// This should not render boolean only objects
+	return flatSchemas.every(isObjectRenderableSchema) && flatSchemas.some(({ type }) => type === 'string');
 }
 
 function settingTypeEnumRenderable(_type: string | string[]) {
 	const enumRenderableSettingTypes = ['string', 'boolean', 'null', 'integer', 'number'];
 	const type = isArray(_type) ? _type : [_type];
-	return type.every(type => enumRenderableSettingTypes.includes(type));
+	return type.every(type => enumRenderableSettingTypes.indexOf(type) > -1);
 }
 
 export const enum SearchResultIdx {
diff --git a/src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts b/src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts
index 5d8fa75..0f2a0ae 100644
--- a/src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts
+++ b/src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts
@@ -23,7 +23,7 @@ import { isDefined, isUndefinedOrNull } from 'vs/base/common/types';
 import 'vs/css!./media/settingsWidgets';
 import { localize } from 'vs/nls';
 import { IContextViewService } from 'vs/platform/contextview/browser/contextView';
-import { editorWidgetBorder, focusBorder, foreground, inputBackground, inputBorder, inputForeground, listActiveSelectionBackground, listActiveSelectionForeground, listDropBackground, listFocusBackground, listHoverBackground, listHoverForeground, listInactiveSelectionBackground, listInactiveSelectionForeground, registerColor, selectBackground, selectBorder, selectForeground, simpleCheckboxBackground, simpleCheckboxBorder, simpleCheckboxForeground, textLinkActiveForeground, textLinkForeground, textPreformatForeground, transparent } from 'vs/platform/theme/common/colorRegistry';
+import { editorWidgetBorder, focusBorder, foreground, inputBackground, inputBorder, inputForeground, listActiveSelectionBackground, listActiveSelectionForeground, listFocusBackground, listHoverBackground, listHoverForeground, listInactiveSelectionBackground, listInactiveSelectionForeground, registerColor, selectBackground, selectBorder, selectForeground, simpleCheckboxBackground, simpleCheckboxBorder, simpleCheckboxForeground, textLinkActiveForeground, textLinkForeground, textPreformatForeground, transparent } from 'vs/platform/theme/common/colorRegistry';
 import { attachButtonStyler, attachInputBoxStyler, attachSelectBoxStyler } from 'vs/platform/theme/common/styler';
 import { IColorTheme, ICssStyleCollector, IThemeService, registerThemingParticipant, ThemeIcon } from 'vs/platform/theme/common/themeService';
 import { settingsDiscardIcon, settingsEditIcon, settingsRemoveIcon } from 'vs/workbench/contrib/preferences/browser/preferencesIcons';
@@ -135,11 +135,6 @@ registerThemingParticipant((theme: IColorTheme, collector: ICssStyleCollector) =
 		collector.addRule(`.settings-editor > .settings-body > .settings-tree-container .setting-item.setting-item-list .setting-list-row:hover { color: ${listHoverForegroundColor}; }`);
 	}
 
-	const listDropBackgroundColor = theme.getColor(listDropBackground);
-	if (listDropBackgroundColor) {
-		collector.addRule(`.settings-editor > .settings-body > .settings-tree-container .setting-item.setting-item-list .setting-list-row.drag-hover { background-color: ${listDropBackgroundColor}; }`);
-	}
-
 	const listSelectBackgroundColor = theme.getColor(listActiveSelectionBackground);
 	if (listSelectBackgroundColor) {
 		collector.addRule(`.settings-editor > .settings-body > .settings-tree-container .setting-item.setting-item-list .setting-list-row.selected:focus { background-color: ${listSelectBackgroundColor}; }`);
@@ -176,12 +171,6 @@ registerThemingParticipant((theme: IColorTheme, collector: ICssStyleCollector) =
 
 type EditKey = 'none' | 'create' | number;
 
-type RowElementGroup = {
-	rowElement: HTMLElement;
-	keyElement: HTMLElement;
-	valueElement?: HTMLElement;
-};
-
 type IListViewItem<TDataItem extends object> = TDataItem & {
 	editing?: boolean;
 	selected?: boolean;
@@ -255,7 +244,6 @@ export interface ISettingListChangeEvent<TDataItem extends object> {
 	originalItem: TDataItem;
 	item?: TDataItem;
 	targetIndex?: number;
-	sourceIndex?: number;
 }
 
 export abstract class AbstractListSettingWidget<TDataItem extends object> extends Disposable {
@@ -276,10 +264,6 @@ export abstract class AbstractListSettingWidget<TDataItem extends object> extend
 		return this.model.items;
 	}
 
-	get inReadMode(): boolean {
-		return this.model.items.every(item => !item.editing);
-	}
-
 	constructor(
 		private container: HTMLElement,
 		@IThemeService protected readonly themeService: IThemeService,
@@ -319,10 +303,10 @@ export abstract class AbstractListSettingWidget<TDataItem extends object> extend
 	protected abstract getEmptyItem(): TDataItem;
 	protected abstract getContainerClasses(): string[];
 	protected abstract getActionsForItem(item: TDataItem, idx: number): IAction[];
-	protected abstract renderItem(item: TDataItem, idx: number): RowElementGroup;
+	protected abstract renderItem(item: TDataItem): HTMLElement;
 	protected abstract renderEdit(item: TDataItem, idx: number): HTMLElement;
 	protected abstract isItemNew(item: TDataItem): boolean;
-	protected abstract addTooltipsToRow(rowElement: RowElementGroup, item: TDataItem): void;
+	protected abstract getLocalizedRowTitle(item: TDataItem): string;
 	protected abstract getLocalizedStrings(): {
 		deleteActionTooltip: string
 		editActionTooltip: string
@@ -378,12 +362,13 @@ export abstract class AbstractListSettingWidget<TDataItem extends object> extend
 		return selectBox;
 	}
 
+
 	protected editSetting(idx: number): void {
 		this.model.setEditKey(idx);
 		this.renderList();
 	}
 
-	public cancelEdit(): void {
+	protected cancelEdit(): void {
 		this.model.setEditKey('none');
 		this.renderList();
 	}
@@ -411,8 +396,7 @@ export abstract class AbstractListSettingWidget<TDataItem extends object> extend
 	}
 
 	private renderDataItem(item: IListViewItem<TDataItem>, idx: number, listFocused: boolean): HTMLElement {
-		const rowElementGroup = this.renderItem(item, idx);
-		const rowElement = rowElementGroup.rowElement;
+		const rowElement = this.renderItem(item);
 
 		rowElement.setAttribute('data-index', idx + '');
 		rowElement.setAttribute('tabindex', item.selected ? '0' : '-1');
@@ -422,7 +406,8 @@ export abstract class AbstractListSettingWidget<TDataItem extends object> extend
 		this.listDisposables.add(actionBar);
 
 		actionBar.push(this.getActionsForItem(item, idx), { icon: true, label: true });
-		this.addTooltipsToRow(rowElementGroup, item);
+		rowElement.title = this.getLocalizedRowTitle(item);
+		rowElement.setAttribute('aria-label', rowElement.title);
 
 		if (item.selected && listFocused) {
 			this.listDisposables.add(disposableTimeout(() => rowElement.focus()));
@@ -532,12 +517,6 @@ export interface IListDataItem {
 	sibling?: string
 }
 
-interface ListSettingWidgetDragDetails {
-	element: HTMLElement;
-	item: IListDataItem;
-	itemIndex: number;
-}
-
 export class ListSettingWidget extends AbstractListSettingWidget<IListDataItem> {
 	private keyValueSuggester: IObjectKeySuggester | undefined;
 	private showAddButton: boolean = true;
@@ -584,15 +563,7 @@ export class ListSettingWidget extends AbstractListSettingWidget<IListDataItem>
 		] as IAction[];
 	}
 
-	private dragDetails: ListSettingWidgetDragDetails | undefined;
-
-	private getDragImage(item: IListDataItem): HTMLElement {
-		const dragImage = $('.monaco-drag-image');
-		dragImage.textContent = item.value.data;
-		return dragImage;
-	}
-
-	protected renderItem(item: IListDataItem, idx: number): RowElementGroup {
+	protected renderItem(item: IListDataItem): HTMLElement {
 		const rowElement = $('.setting-list-row');
 		const valueElement = DOM.append(rowElement, $('.setting-list-value'));
 		const siblingElement = DOM.append(rowElement, $('.setting-list-sibling'));
@@ -600,81 +571,7 @@ export class ListSettingWidget extends AbstractListSettingWidget<IListDataItem>
 		valueElement.textContent = item.value.data.toString();
 		siblingElement.textContent = item.sibling ? `when: ${item.sibling}` : null;
 
-		this.addDragAndDrop(rowElement, item, idx);
-		return { rowElement, keyElement: valueElement, valueElement: siblingElement };
-	}
-
-	protected addDragAndDrop(rowElement: HTMLElement, item: IListDataItem, idx: number) {
-		if (this.inReadMode) {
-			rowElement.draggable = true;
-			rowElement.classList.add('draggable');
-		} else {
-			rowElement.draggable = false;
-			rowElement.classList.remove('draggable');
-		}
-
-		this.listDisposables.add(DOM.addDisposableListener(rowElement, DOM.EventType.DRAG_START, (ev) => {
-			this.dragDetails = {
-				element: rowElement,
-				item,
-				itemIndex: idx
-			};
-			if (ev.dataTransfer) {
-				ev.dataTransfer.dropEffect = 'move';
-				const dragImage = this.getDragImage(item);
-				document.body.appendChild(dragImage);
-				ev.dataTransfer.setDragImage(dragImage, -10, -10);
-				setTimeout(() => document.body.removeChild(dragImage), 0);
-			}
-		}));
-		this.listDisposables.add(DOM.addDisposableListener(rowElement, DOM.EventType.DRAG_OVER, (ev) => {
-			if (!this.dragDetails) {
-				return false;
-			}
-			ev.preventDefault();
-			if (ev.dataTransfer) {
-				ev.dataTransfer.dropEffect = 'move';
-			}
-			return true;
-		}));
-		let counter = 0;
-		this.listDisposables.add(DOM.addDisposableListener(rowElement, DOM.EventType.DRAG_ENTER, (ev) => {
-			counter++;
-			rowElement.classList.add('drag-hover');
-		}));
-		this.listDisposables.add(DOM.addDisposableListener(rowElement, DOM.EventType.DRAG_LEAVE, (ev) => {
-			counter--;
-			if (!counter) {
-				rowElement.classList.remove('drag-hover');
-			}
-		}));
-		this.listDisposables.add(DOM.addDisposableListener(rowElement, DOM.EventType.DROP, (ev) => {
-			// cancel the op if we dragged to a completely different setting
-			if (!this.dragDetails) {
-				return false;
-			}
-			ev.preventDefault();
-			counter = 0;
-			if (this.dragDetails.element !== rowElement) {
-				this._onDidChangeList.fire({
-					originalItem: this.dragDetails.item,
-					sourceIndex: this.dragDetails.itemIndex,
-					item,
-					targetIndex: idx
-				});
-			}
-			return true;
-		}));
-		this.listDisposables.add(DOM.addDisposableListener(rowElement, DOM.EventType.DRAG_END, (ev) => {
-			counter = 0;
-			rowElement.classList.remove('drag-hover');
-			if (ev.dataTransfer) {
-				ev.dataTransfer.clearData();
-			}
-			if (this.dragDetails) {
-				this.dragDetails = undefined;
-			}
-		}));
+		return rowElement;
 	}
 
 	protected renderEdit(item: IListDataItem, idx: number): HTMLElement {
@@ -683,8 +580,8 @@ export class ListSettingWidget extends AbstractListSettingWidget<IListDataItem>
 		let currentDisplayValue: string;
 		let currentEnumOptions: IObjectEnumOption[] | undefined;
 
-		if (this.keyValueSuggester) {
-			const enumData = this.keyValueSuggester(this.model.items.map(({ value: { data } }) => data), idx);
+		if (this.isItemNew(item) && this.keyValueSuggester) {
+			const enumData = this.keyValueSuggester(this.model.items.map(({ value: { data } }) => data));
 			item = {
 				...item,
 				value: {
@@ -760,7 +657,7 @@ export class ListSettingWidget extends AbstractListSettingWidget<IListDataItem>
 			siblingInput.element.classList.add('setting-list-siblingInput');
 			this.listDisposables.add(siblingInput);
 			this.listDisposables.add(attachInputBoxStyler(siblingInput, this.themeService, {
-				inputBackground: settingsTextInputBackground,
+				inputBackground: settingsSelectBackground,
 				inputForeground: settingsTextInputForeground,
 				inputBorder: settingsTextInputBorder
 			}));
@@ -807,14 +704,10 @@ export class ListSettingWidget extends AbstractListSettingWidget<IListDataItem>
 		return item.value.data === '';
 	}
 
-	protected addTooltipsToRow(rowElementGroup: RowElementGroup, { value, sibling }: IListDataItem) {
-		const title = isUndefinedOrNull(sibling)
+	protected getLocalizedRowTitle({ value, sibling }: IListDataItem): string {
+		return isUndefinedOrNull(sibling)
 			? localize('listValueHintLabel', "List item `{0}`", value.data)
 			: localize('listSiblingHintLabel', "List item `{0}` with sibling `${1}`", value.data, sibling);
-
-		const { rowElement } = rowElementGroup;
-		rowElement.title = title;
-		rowElement.setAttribute('aria-label', rowElement.title);
 	}
 
 	protected getLocalizedStrings() {
@@ -834,7 +727,7 @@ export class ListSettingWidget extends AbstractListSettingWidget<IListDataItem>
 
 		valueInput.element.classList.add('setting-list-valueInput');
 		this.listDisposables.add(attachInputBoxStyler(valueInput, this.themeService, {
-			inputBackground: settingsTextInputBackground,
+			inputBackground: settingsSelectBackground,
 			inputForeground: settingsTextInputForeground,
 			inputBorder: settingsTextInputBorder
 		}));
@@ -863,18 +756,10 @@ export class ExcludeSettingWidget extends ListSettingWidget {
 		return ['setting-list-exclude-widget'];
 	}
 
-	protected override addDragAndDrop(rowElement: HTMLElement, item: IListDataItem, idx: number) {
-		return;
-	}
-
-	protected override addTooltipsToRow(rowElementGroup: RowElementGroup, { value, sibling }: IListDataItem): void {
-		const title = isUndefinedOrNull(sibling)
+	protected override getLocalizedRowTitle({ value, sibling }: IListDataItem): string {
+		return isUndefinedOrNull(sibling)
 			? localize('excludePatternHintLabel', "Exclude files matching `{0}`", value.data)
 			: localize('excludeSiblingHintLabel', "Exclude files matching `{0}`, only when a file matching `{1}` is present", value.data, sibling);
-
-		const { rowElement } = rowElementGroup;
-		rowElement.title = title;
-		rowElement.setAttribute('aria-label', rowElement.title);
 	}
 
 	protected override getLocalizedStrings() {
@@ -916,7 +801,6 @@ type ObjectWidget = InputBox | SelectBox;
 export interface IObjectDataItem {
 	key: ObjectKey;
 	value: ObjectValue;
-	keyDescription?: string;
 	removable: boolean;
 }
 
@@ -925,7 +809,7 @@ export interface IObjectValueSuggester {
 }
 
 export interface IObjectKeySuggester {
-	(existingKeys: string[], idx?: number): IObjectEnumData | undefined;
+	(existingKeys: string[]): IObjectEnumData | undefined;
 }
 
 interface IObjectSetValueOptions {
@@ -943,7 +827,7 @@ interface IObjectRenderEditWidgetOptions {
 	update(keyOrValue: ObjectKey | ObjectValue): void;
 }
 
-export class ObjectSettingDropdownWidget extends AbstractListSettingWidget<IObjectDataItem> {
+export class ObjectSettingWidget extends AbstractListSettingWidget<IObjectDataItem> {
 	private currentSettingKey: string = '';
 	private showAddButton: boolean = true;
 	private keySuggester: IObjectKeySuggester = () => undefined;
@@ -1027,7 +911,7 @@ export class ObjectSettingDropdownWidget extends AbstractListSettingWidget<IObje
 		return header;
 	}
 
-	protected renderItem(item: IObjectDataItem, idx: number): RowElementGroup {
+	protected renderItem(item: IObjectDataItem): HTMLElement {
 		const rowElement = $('.setting-list-row');
 		rowElement.classList.add('setting-list-object-row');
 
@@ -1037,7 +921,7 @@ export class ObjectSettingDropdownWidget extends AbstractListSettingWidget<IObje
 		keyElement.textContent = item.key.data;
 		valueElement.textContent = item.value.data.toString();
 
-		return { rowElement, keyElement, valueElement };
+		return rowElement;
 	}
 
 	protected renderEdit(item: IObjectDataItem, idx: number): HTMLElement {
@@ -1174,7 +1058,7 @@ export class ObjectSettingDropdownWidget extends AbstractListSettingWidget<IObje
 		inputBox.element.classList.add('setting-list-object-input');
 
 		this.listDisposables.add(attachInputBoxStyler(inputBox, this.themeService, {
-			inputBackground: settingsTextInputBackground,
+			inputBackground: settingsSelectBackground,
 			inputForeground: settingsTextInputForeground,
 			inputBorder: settingsTextInputBorder
 		}));
@@ -1201,17 +1085,17 @@ export class ObjectSettingDropdownWidget extends AbstractListSettingWidget<IObje
 
 	private renderEnumEditWidget(
 		keyOrValue: IObjectEnumData,
-		{ isKey, changedItem, update }: IObjectRenderEditWidgetOptions,
+		{ isKey, originalItem, update }: IObjectRenderEditWidgetOptions,
 	) {
 		const selectBox = this.createBasicSelectBox(keyOrValue);
 
-		const changedKeyOrValue = isKey ? changedItem.key : changedItem.value;
+		const originalKeyOrValue = isKey ? originalItem.key : originalItem.value;
 		this.listDisposables.add(
 			selectBox.onDidSelect(({ selected }) =>
 				update(
-					changedKeyOrValue.type === 'boolean'
-						? { ...changedKeyOrValue, data: selected === 'true' ? true : false }
-						: { ...changedKeyOrValue, data: selected },
+					originalKeyOrValue.type === 'boolean'
+						? { ...originalKeyOrValue, data: selected === 'true' ? true : false }
+						: { ...originalKeyOrValue, data: selected },
 				)
 			)
 		);
@@ -1223,19 +1107,6 @@ export class ObjectSettingDropdownWidget extends AbstractListSettingWidget<IObje
 
 		selectBox.render(wrapper);
 
-		// Switch to the first item if the user set something invalid in the json
-		const selected = keyOrValue.options.findIndex(option => keyOrValue.data === option.value);
-		if (selected === -1 && keyOrValue.options.length) {
-			update(
-				changedKeyOrValue.type === 'boolean'
-					? { ...changedKeyOrValue, data: true }
-					: { ...changedKeyOrValue, data: keyOrValue.options[0].value }
-			);
-		} else if (changedKeyOrValue.type === 'boolean') {
-			// https://github.com/microsoft/vscode/issues/129581
-			update({ ...changedKeyOrValue, data: keyOrValue.data === 'true' });
-		}
-
 		return { widget: selectBox, element: wrapper };
 	}
 
@@ -1268,24 +1139,19 @@ export class ObjectSettingDropdownWidget extends AbstractListSettingWidget<IObje
 		return true;
 	}
 
-	protected addTooltipsToRow(rowElementGroup: RowElementGroup, item: IObjectDataItem): void {
-		const { keyElement, valueElement, rowElement } = rowElementGroup;
-		const accessibleDescription = localize('objectPairHintLabel', "The property `{0}` is set to `{1}`.", item.key.data, item.value.data);
-
-		const keyDescription = this.getEnumDescription(item.key) ?? item.keyDescription ?? accessibleDescription;
-		keyElement.title = keyDescription;
-
-		const valueDescription = this.getEnumDescription(item.value) ?? accessibleDescription;
-		valueElement!.title = valueDescription;
+	protected getLocalizedRowTitle(item: IObjectDataItem): string {
+		let enumDescription = item.key.type === 'enum'
+			? item.key.options.find(({ value }) => item.key.data === value)?.description
+			: undefined;
 
-		rowElement.setAttribute('aria-label', accessibleDescription);
-	}
+		// avoid rendering double '.'
+		if (isDefined(enumDescription) && enumDescription.endsWith('.')) {
+			enumDescription = enumDescription.slice(0, enumDescription.length - 1);
+		}
 
-	private getEnumDescription(keyOrValue: ObjectKey | ObjectValue): string | undefined {
-		const enumDescription = keyOrValue.type === 'enum'
-			? keyOrValue.options.find(({ value }) => keyOrValue.data === value)?.description
-			: undefined;
-		return enumDescription;
+		return isDefined(enumDescription)
+			? `${enumDescription}. Currently set to ${item.value.data}.`
+			: localize('objectPairHintLabel', "The property `{0}` is set to `{1}`.", item.key.data, item.value.data);
 	}
 
 	protected getLocalizedStrings() {
@@ -1303,11 +1169,16 @@ export class ObjectSettingDropdownWidget extends AbstractListSettingWidget<IObje
 interface IBoolObjectSetValueOptions {
 	settingKey: string;
 }
+export interface IBoolObjectDataItem {
+	key: string;
+	value: boolean;
+	description?: string;
+}
 
-export class ObjectSettingCheckboxWidget extends AbstractListSettingWidget<IObjectDataItem> {
+export class BoolObjectSettingWidget extends AbstractListSettingWidget<IBoolObjectDataItem> {
 	private currentSettingKey: string = '';
 
-	override setValue(listData: IObjectDataItem[], options?: IBoolObjectSetValueOptions): void {
+	override setValue(listData: IBoolObjectDataItem[], options?: IBoolObjectSetValueOptions): void {
 		if (isDefined(options) && options.settingKey !== this.currentSettingKey) {
 			this.model.setEditKey('none');
 			this.model.select(null);
@@ -1317,15 +1188,14 @@ export class ObjectSettingCheckboxWidget extends AbstractListSettingWidget<IObje
 		super.setValue(listData);
 	}
 
-	isItemNew(item: IObjectDataItem): boolean {
-		return !item.key.data && !item.value.data;
+	isItemNew(item: IBoolObjectDataItem): boolean {
+		return !item.key && !item.value;
 	}
 
-	protected getEmptyItem(): IObjectDataItem {
+	protected getEmptyItem(): IBoolObjectDataItem {
 		return {
-			key: { type: 'string', data: '' },
-			value: { type: 'boolean', data: false },
-			removable: false
+			key: '',
+			value: false
 		};
 	}
 
@@ -1333,7 +1203,7 @@ export class ObjectSettingCheckboxWidget extends AbstractListSettingWidget<IObje
 		return ['setting-list-object-widget'];
 	}
 
-	protected getActionsForItem(item: IObjectDataItem, idx: number): IAction[] {
+	protected getActionsForItem(item: IBoolObjectDataItem, idx: number): IAction[] {
 		return [];
 	}
 
@@ -1345,38 +1215,32 @@ export class ObjectSettingCheckboxWidget extends AbstractListSettingWidget<IObje
 		return undefined;
 	}
 
-	protected override renderDataOrEditItem(item: IListViewItem<IObjectDataItem>, idx: number, listFocused: boolean): HTMLElement {
+	protected override renderDataOrEditItem(item: IListViewItem<IBoolObjectDataItem>, idx: number, listFocused: boolean): HTMLElement {
 		const rowElement = this.renderEdit(item, idx);
 		rowElement.setAttribute('role', 'listitem');
 		return rowElement;
 	}
 
-	protected renderItem(item: IObjectDataItem, idx: number): RowElementGroup {
-		// Return just the containers, since we always render in edit mode anyway
-		const rowElement = $('.blank-row');
-		const keyElement = $('.blank-row-key');
-		return { rowElement, keyElement };
+	protected renderItem(item: IBoolObjectDataItem): HTMLElement {
+		// return empty object, since we always render in edit mode
+		const rowElement = $('.setting-list-row');
+		return rowElement;
 	}
 
-	protected renderEdit(item: IObjectDataItem, idx: number): HTMLElement {
+	protected renderEdit(item: IBoolObjectDataItem, idx: number): HTMLElement {
 		const rowElement = $('.setting-list-edit-row.setting-list-object-row.setting-item-bool');
 
 		const changedItem = { ...item };
 		const onValueChange = (newValue: boolean) => {
-			changedItem.value.data = newValue;
+			changedItem.value = newValue;
 			this.handleItemChange(item, changedItem, idx);
 		};
-		const { element, widget: checkbox } = this.renderEditWidget((changedItem.value as IObjectBoolData).data, onValueChange);
+		const { element, widget: checkbox } = this.renderEditWidget(changedItem.value, onValueChange);
 		rowElement.appendChild(element);
 
 		const valueElement = DOM.append(rowElement, $('.setting-list-object-value'));
-		valueElement.textContent = changedItem.key.data;
-
-		// We add the tooltips here, because the method is not called by default
-		// for widgets in edit mode
-		const rowElementGroup = { rowElement, keyElement: valueElement, valueElement: checkbox.domNode };
-		this.addTooltipsToRow(rowElementGroup, item);
-
+		valueElement.textContent = changedItem.key;
+		valueElement.setAttribute('title', changedItem.description ?? '');
 		this._register(DOM.addDisposableListener(valueElement, DOM.EventType.MOUSE_DOWN, e => {
 			const targetElement = <HTMLElement>e.target;
 			if (targetElement.tagName.toLowerCase() !== 'a') {
@@ -1419,14 +1283,8 @@ export class ObjectSettingCheckboxWidget extends AbstractListSettingWidget<IObje
 		return { widget: checkbox, element: wrapper };
 	}
 
-	protected addTooltipsToRow(rowElementGroup: RowElementGroup, item: IObjectDataItem): void {
-		const accessibleDescription = localize('objectPairHintLabel', "The property `{0}` is set to `{1}`.", item.key.data, item.value.data);
-		const title = item.keyDescription ?? accessibleDescription;
-		const { rowElement, keyElement, valueElement } = rowElementGroup;
-
-		keyElement.title = title;
-		valueElement!.setAttribute('aria-label', accessibleDescription);
-		rowElement.setAttribute('aria-label', accessibleDescription);
+	protected getLocalizedRowTitle(item: IBoolObjectDataItem): string {
+		return localize('objectPairHintLabel', "The property `{0}` is set to `{1}`.", item.key, item.value);
 	}
 
 	protected getLocalizedStrings() {
diff --git a/src/vs/workbench/contrib/preferences/common/preferences.ts b/src/vs/workbench/contrib/preferences/common/preferences.ts
index f3c605c..c034525 100644
--- a/src/vs/workbench/contrib/preferences/common/preferences.ts
+++ b/src/vs/workbench/contrib/preferences/common/preferences.ts
@@ -63,7 +63,6 @@ export const KEYBINDINGS_EDITOR_COMMAND_REMOVE = 'keybindings.editor.removeKeybi
 export const KEYBINDINGS_EDITOR_COMMAND_RESET = 'keybindings.editor.resetKeybinding';
 export const KEYBINDINGS_EDITOR_COMMAND_COPY = 'keybindings.editor.copyKeybindingEntry';
 export const KEYBINDINGS_EDITOR_COMMAND_COPY_COMMAND = 'keybindings.editor.copyCommandKeybindingEntry';
-export const KEYBINDINGS_EDITOR_COMMAND_COPY_COMMAND_TITLE = 'keybindings.editor.copyCommandTitle';
 export const KEYBINDINGS_EDITOR_COMMAND_SHOW_SIMILAR = 'keybindings.editor.showConflicts';
 export const KEYBINDINGS_EDITOR_COMMAND_FOCUS_KEYBINDINGS = 'keybindings.editor.focusKeybindings';
 export const KEYBINDINGS_EDITOR_SHOW_DEFAULT_KEYBINDINGS = 'keybindings.editor.showDefaultKeybindings';
diff --git a/src/vs/workbench/contrib/preferences/common/preferencesContribution.ts b/src/vs/workbench/contrib/preferences/common/preferencesContribution.ts
index 7f544cd..a79ea37 100644
--- a/src/vs/workbench/contrib/preferences/common/preferencesContribution.ts
+++ b/src/vs/workbench/contrib/preferences/common/preferencesContribution.ts
@@ -20,10 +20,10 @@ import { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/
 import { workbenchConfigurationNodeBase } from 'vs/workbench/common/configuration';
 import { IWorkbenchContribution } from 'vs/workbench/common/contributions';
 import { IEditorInputWithOptions } from 'vs/workbench/common/editor';
-import { SideBySideEditorInput } from 'vs/workbench/common/editor/sideBySideEditorInput';
 import { RegisteredEditorPriority, IEditorResolverService } from 'vs/workbench/services/editor/common/editorResolverService';
 import { IEditorService } from 'vs/workbench/services/editor/common/editorService';
-import { DEFAULT_SETTINGS_EDITOR_SETTING, FOLDER_SETTINGS_PATH, IPreferencesService, USE_SPLIT_JSON_SETTING } from 'vs/workbench/services/preferences/common/preferences';
+import { FOLDER_SETTINGS_PATH, IPreferencesService, USE_SPLIT_JSON_SETTING } from 'vs/workbench/services/preferences/common/preferences';
+import { PreferencesEditorInput } from 'vs/workbench/services/preferences/common/preferencesEditorInput';
 
 const schemaRegistry = Registry.as<JSONContributionRegistry.IJSONContributionRegistry>(JSONContributionRegistry.Extensions.JSONContribution);
 
@@ -39,40 +39,39 @@ export class PreferencesContribution implements IWorkbenchContribution {
 		@IEnvironmentService private readonly environmentService: IEnvironmentService,
 		@IWorkspaceContextService private readonly workspaceService: IWorkspaceContextService,
 		@IConfigurationService private readonly configurationService: IConfigurationService,
-		@IEditorResolverService private readonly editorResolverService: IEditorResolverService,
+		@IEditorResolverService private readonly editorOverrideService: IEditorResolverService,
 		@IEditorService private readonly editorService: IEditorService,
 	) {
 		this.settingsListener = this.configurationService.onDidChangeConfiguration(e => {
-			if (e.affectsConfiguration(USE_SPLIT_JSON_SETTING) || e.affectsConfiguration(DEFAULT_SETTINGS_EDITOR_SETTING)) {
-				this.handleSettingsEditorRegistration();
+			if (e.affectsConfiguration(USE_SPLIT_JSON_SETTING)) {
+				this.handleSettingsEditorOverride();
 			}
 		});
-		this.handleSettingsEditorRegistration();
+		this.handleSettingsEditorOverride();
 
 		this.start();
 	}
 
-	private handleSettingsEditorRegistration(): void {
+	private handleSettingsEditorOverride(): void {
 
 		// dispose any old listener we had
 		dispose(this.editorOpeningListener);
 
 		// install editor opening listener unless user has disabled this
-		if (!!this.configurationService.getValue(USE_SPLIT_JSON_SETTING) || !!this.configurationService.getValue(DEFAULT_SETTINGS_EDITOR_SETTING)) {
-			this.editorOpeningListener = this.editorResolverService.registerEditor(
+		if (!!this.configurationService.getValue(USE_SPLIT_JSON_SETTING)) {
+			this.editorOpeningListener = this.editorOverrideService.registerEditor(
 				'**/settings.json',
 				{
-					id: SideBySideEditorInput.ID,
-					label: nls.localize('splitSettingsEditorLabel', "Split Settings Editor"),
+					id: PreferencesEditorInput.ID,
+					detail: 'Split Settings Editor (deprecated)',
+					label: 'label',
 					priority: RegisteredEditorPriority.builtin,
 				},
-				{
-					canHandleDiff: false,
-				},
-				({ resource, options }): IEditorInputWithOptions => {
+				{},
+				({ resource, options }, group): IEditorInputWithOptions => {
 					// Global User Settings File
 					if (isEqual(resource, this.environmentService.settingsResource)) {
-						return { editor: this.preferencesService.createSplitJsonEditorInput(ConfigurationTarget.USER_LOCAL, resource), options };
+						return { editor: this.preferencesService.getCurrentOrNewSplitJsonEditorInput(ConfigurationTarget.USER_LOCAL, resource, group), options };
 					}
 
 					// Single Folder Workspace Settings File
@@ -80,7 +79,7 @@ export class PreferencesContribution implements IWorkbenchContribution {
 					if (state === WorkbenchState.FOLDER) {
 						const folders = this.workspaceService.getWorkspace().folders;
 						if (isEqual(resource, folders[0].toResource(FOLDER_SETTINGS_PATH))) {
-							return { editor: this.preferencesService.createSplitJsonEditorInput(ConfigurationTarget.WORKSPACE, resource), options };
+							return { editor: this.preferencesService.getCurrentOrNewSplitJsonEditorInput(ConfigurationTarget.WORKSPACE, resource, group), options };
 						}
 					}
 
@@ -89,7 +88,7 @@ export class PreferencesContribution implements IWorkbenchContribution {
 						const folders = this.workspaceService.getWorkspace().folders;
 						for (const folder of folders) {
 							if (isEqual(resource, folder.toResource(FOLDER_SETTINGS_PATH))) {
-								return { editor: this.preferencesService.createSplitJsonEditorInput(ConfigurationTarget.WORKSPACE_FOLDER, resource), options };
+								return { editor: this.preferencesService.getCurrentOrNewSplitJsonEditorInput(ConfigurationTarget.WORKSPACE_FOLDER, resource, group), options };
 							}
 						}
 					}
diff --git a/src/vs/workbench/services/preferences/browser/preferencesService.ts b/src/vs/workbench/services/preferences/browser/preferencesService.ts
index 1cc65ef..93bf507 100644
--- a/src/vs/workbench/services/preferences/browser/preferencesService.ts
+++ b/src/vs/workbench/services/preferences/browser/preferencesService.ts
@@ -3,13 +3,11 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { getErrorMessage } from 'vs/base/common/errors';
 import { Emitter } from 'vs/base/common/event';
 import { parse } from 'vs/base/common/json';
 import { Disposable } from 'vs/base/common/lifecycle';
 import * as network from 'vs/base/common/network';
 import { URI } from 'vs/base/common/uri';
-import { CoreEditingCommands } from 'vs/editor/browser/controller/coreCommands';
 import { getCodeEditor, ICodeEditor } from 'vs/editor/browser/editorBrowser';
 import { IPosition } from 'vs/editor/common/core/position';
 import { ITextModel } from 'vs/editor/common/model';
@@ -17,33 +15,34 @@ import { IModelService } from 'vs/editor/common/services/modelService';
 import { IModeService } from 'vs/editor/common/services/modeService';
 import { ITextModelService } from 'vs/editor/common/services/resolverService';
 import * as nls from 'vs/nls';
-import { ICommandService } from 'vs/platform/commands/common/commands';
 import { ConfigurationTarget, IConfigurationService } from 'vs/platform/configuration/common/configuration';
-import { Extensions, getDefaultValue, IConfigurationRegistry, OVERRIDE_PROPERTY_PATTERN } from 'vs/platform/configuration/common/configurationRegistry';
-import { EditorResolution } from 'vs/platform/editor/common/editor';
 import { IEnvironmentService } from 'vs/platform/environment/common/environment';
 import { FileOperationError, FileOperationResult } from 'vs/platform/files/common/files';
-import { registerSingleton } from 'vs/platform/instantiation/common/extensions';
 import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
 import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
 import { ILabelService } from 'vs/platform/label/common/label';
 import { INotificationService } from 'vs/platform/notification/common/notification';
-import { Registry } from 'vs/platform/registry/common/platform';
 import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
 import { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';
 import { IEditorInput, IEditorPane } from 'vs/workbench/common/editor';
-import { EditorInput } from 'vs/workbench/common/editor/editorInput';
-import { SideBySideEditorInput } from 'vs/workbench/common/editor/sideBySideEditorInput';
-import { TextResourceEditorInput } from 'vs/workbench/common/editor/textResourceEditorInput';
 import { IJSONEditingService } from 'vs/workbench/services/configuration/common/jsonEditing';
-import { GroupDirection, IEditorGroup, IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';
 import { IEditorService } from 'vs/workbench/services/editor/common/editorService';
-import { KeybindingsEditorInput } from 'vs/workbench/services/preferences/browser/keybindingsEditorInput';
-import { DEFAULT_SETTINGS_EDITOR_SETTING, FOLDER_SETTINGS_PATH, IKeybindingsEditorOptions, IKeybindingsEditorPane, IPreferencesEditorModel, IPreferencesService, ISetting, ISettingsEditorOptions, USE_SPLIT_JSON_SETTING, validateSettingsEditorOptions } from 'vs/workbench/services/preferences/common/preferences';
-import { SettingsEditor2Input } from 'vs/workbench/services/preferences/common/preferencesEditorInput';
-import { defaultKeybindingsContents, DefaultKeybindingsEditorModel, DefaultRawSettingsEditorModel, DefaultSettings, DefaultSettingsEditorModel, Settings2EditorModel, SettingsEditorModel, WorkspaceConfigurationEditorModel } from 'vs/workbench/services/preferences/common/preferencesModels';
+import { GroupDirection, IEditorGroup, IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';
+import { validateSettingsEditorOptions, DEFAULT_SETTINGS_EDITOR_SETTING, FOLDER_SETTINGS_PATH, getSettingsTargetName, IKeybindingsEditorOptions, IKeybindingsEditorPane, IPreferencesEditorModel, IPreferencesService, ISetting, ISettingsEditorOptions, USE_SPLIT_JSON_SETTING } from 'vs/workbench/services/preferences/common/preferences';
+import { DefaultPreferencesEditorInput, PreferencesEditorInput, SettingsEditor2Input } from 'vs/workbench/services/preferences/common/preferencesEditorInput';
+import { defaultKeybindingsContents, DefaultKeybindingsEditorModel, DefaultSettings, DefaultSettingsEditorModel, Settings2EditorModel, SettingsEditorModel, WorkspaceConfigurationEditorModel, DefaultRawSettingsEditorModel } from 'vs/workbench/services/preferences/common/preferencesModels';
+import { registerSingleton } from 'vs/platform/instantiation/common/extensions';
 import { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';
 import { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';
+import { withNullAsUndefined } from 'vs/base/common/types';
+import { getDefaultValue, IConfigurationRegistry, Extensions, OVERRIDE_PROPERTY_PATTERN } from 'vs/platform/configuration/common/configurationRegistry';
+import { Registry } from 'vs/platform/registry/common/platform';
+import { ICommandService } from 'vs/platform/commands/common/commands';
+import { CoreEditingCommands } from 'vs/editor/browser/controller/coreCommands';
+import { getErrorMessage } from 'vs/base/common/errors';
+import { EditorResolution } from 'vs/platform/editor/common/editor';
+import { KeybindingsEditorInput } from 'vs/workbench/services/preferences/browser/keybindingsEditorInput';
+import { EditorInput } from 'vs/workbench/common/editor/editorInput';
 
 const emptyEditableSettingsContent = '{\n}';
 
@@ -51,6 +50,8 @@ export class PreferencesService extends Disposable implements IPreferencesServic
 
 	declare readonly _serviceBrand: undefined;
 
+	private lastOpenedSettingsInput: PreferencesEditorInput | null = null;
+
 	private readonly _onDispose = this._register(new Emitter<void>());
 
 	private _defaultUserSettingsUriCounter = 0;
@@ -163,7 +164,7 @@ export class PreferencesService extends Disposable implements IPreferencesServic
 		return Promise.resolve(null);
 	}
 
-	public async createPreferencesEditorModel(uri: URI): Promise<IPreferencesEditorModel<ISetting> | null> {
+	async createPreferencesEditorModel(uri: URI): Promise<IPreferencesEditorModel<any> | null> {
 		if (this.isDefaultSettingsResource(uri)) {
 			return this.createDefaultSettingsEditorModel(uri);
 		}
@@ -210,7 +211,10 @@ export class PreferencesService extends Disposable implements IPreferencesServic
 			return this.openSettings2({ query: query });
 		}
 
-		return this.openSettingsJson(ConfigurationTarget.USER_LOCAL, this.userSettingsResource, { query: query });
+		const editorInput = this.getActiveSettingsEditorInput() || this.lastOpenedSettingsInput;
+		const resource = editorInput ? editorInput.primary.resource! : this.userSettingsResource;
+		const target = this.getConfigurationTargetFromSettingsResource(resource);
+		return this.openOrSwitchSettings(target, resource, { query: query });
 	}
 
 	private openSettings2(options?: ISettingsEditorOptions): Promise<IEditorPane> {
@@ -229,7 +233,7 @@ export class PreferencesService extends Disposable implements IPreferencesServic
 			jsonEditor;
 
 		return jsonEditor ?
-			this.openSettingsJson(ConfigurationTarget.USER_LOCAL, this.userSettingsResource, options, group) :
+			this.openOrSwitchSettings(ConfigurationTarget.USER_LOCAL, this.userSettingsResource, options, group) :
 			this.openOrSwitchSettings2(ConfigurationTarget.USER_LOCAL, undefined, options, group);
 	}
 
@@ -253,7 +257,7 @@ export class PreferencesService extends Disposable implements IPreferencesServic
 		}
 
 		return jsonEditor ?
-			this.openSettingsJson(ConfigurationTarget.WORKSPACE, this.workspaceSettingsResource, options, group) :
+			this.openOrSwitchSettings(ConfigurationTarget.WORKSPACE, this.workspaceSettingsResource, options, group) :
 			this.openOrSwitchSettings2(ConfigurationTarget.WORKSPACE, undefined, options, group);
 	}
 
@@ -264,13 +268,22 @@ export class PreferencesService extends Disposable implements IPreferencesServic
 		const folderSettingsUri = await this.getEditableSettingsURI(ConfigurationTarget.WORKSPACE_FOLDER, folder);
 		if (jsonEditor) {
 			if (folderSettingsUri) {
-				return this.openSettingsJson(ConfigurationTarget.WORKSPACE_FOLDER, folderSettingsUri, options, group);
+				return this.openOrSwitchSettings(ConfigurationTarget.WORKSPACE_FOLDER, folderSettingsUri, options, group);
 			}
 			return Promise.reject(`Invalid folder URI - ${folder.toString()}`);
 		}
 		return this.openOrSwitchSettings2(ConfigurationTarget.WORKSPACE_FOLDER, folder, options, group);
 	}
 
+	switchSettings(target: ConfigurationTarget, resource: URI): Promise<void> {
+		const activeEditorPane = this.editorService.activeEditorPane;
+		if (activeEditorPane?.input instanceof PreferencesEditorInput) {
+			return this.doSwitchSettings(target, resource, activeEditorPane.input, activeEditorPane.group).then(() => undefined);
+		} else {
+			return this.doOpenSettings(target, resource).then(() => undefined);
+		}
+	}
+
 	async openGlobalKeybindingSettings(textual: boolean, options?: IKeybindingsEditorOptions): Promise<void> {
 		type OpenKeybindingsClassification = {
 			textual: { classification: 'SystemMetaData', purpose: 'FeatureInsight', isMeasurement: true };
@@ -309,8 +322,28 @@ export class PreferencesService extends Disposable implements IPreferencesServic
 		return this.editorService.openEditor({ resource: this.defaultKeybindingsResource, label: nls.localize('defaultKeybindings', "Default Keybindings") });
 	}
 
-	private async openSettingsJson(configurationTarget: ConfigurationTarget, resource: URI, options?: ISettingsEditorOptions, group: IEditorGroup = this.editorGroupService.activeGroup): Promise<IEditorPane | undefined> {
-		const editor = await this.doOpenSettingsJson(configurationTarget, resource, options, group);
+	getCurrentOrNewSplitJsonEditorInput(configurationTarget: ConfigurationTarget, resource: URI, group: IEditorGroup): IEditorInput {
+		const activeEditorInput = this.getActiveSettingsEditorInput(group);
+		if (activeEditorInput) {
+			const editorInputResource = activeEditorInput.primary.resource;
+			if (editorInputResource && editorInputResource.fsPath === resource.fsPath) {
+				return activeEditorInput;
+			}
+		}
+
+		const editableSettingsEditorInput = this.editorService.createEditorInput({ resource });
+		return this.createSplitJsonEditorInput(configurationTarget, resource, editableSettingsEditorInput);
+	}
+
+	private async openOrSwitchSettings(configurationTarget: ConfigurationTarget, resource: URI, options?: ISettingsEditorOptions, group: IEditorGroup = this.editorGroupService.activeGroup): Promise<IEditorPane | undefined> {
+		const editorInput = this.getActiveSettingsEditorInput(group);
+		if (editorInput) {
+			const editorInputResource = editorInput.primary.resource;
+			if (editorInputResource && editorInputResource.fsPath !== resource.fsPath) {
+				return this.doSwitchSettings(configurationTarget, resource, editorInput, group, options);
+			}
+		}
+		const editor = await this.doOpenSettings(configurationTarget, resource, options, group);
 		if (editor && options?.revealSetting) {
 			await this.revealSetting(options.revealSetting.key, !!options.revealSetting.edit, editor, resource);
 		}
@@ -326,37 +359,99 @@ export class PreferencesService extends Disposable implements IPreferencesServic
 		return this.openSettings2(settingsOptions);
 	}
 
-	private doOpenSettingsJson(configurationTarget: ConfigurationTarget, resource: URI, options?: ISettingsEditorOptions, group?: IEditorGroup): Promise<IEditorPane | undefined> {
+	private doOpenSettings(configurationTarget: ConfigurationTarget, resource: URI, options?: ISettingsEditorOptions, group?: IEditorGroup): Promise<IEditorPane | undefined> {
 		const openSplitJSON = !!this.configurationService.getValue(USE_SPLIT_JSON_SETTING);
-		const openDefaultSettings = !!this.configurationService.getValue(DEFAULT_SETTINGS_EDITOR_SETTING);
-		if (openSplitJSON || openDefaultSettings) {
+		if (openSplitJSON) {
 			return this.doOpenSplitJSON(configurationTarget, resource, options, group);
 		}
 
+		const openDefaultSettings = !!this.configurationService.getValue(DEFAULT_SETTINGS_EDITOR_SETTING);
+
 		return this.getOrCreateEditableSettingsEditorInput(configurationTarget, resource)
 			.then(editableSettingsEditorInput => {
 				options = { ...options, pinned: true };
-				return this.editorService.openEditor(editableSettingsEditorInput, validateSettingsEditorOptions(options), group);
+
+				if (openDefaultSettings) {
+					const activeEditorGroup = this.editorGroupService.activeGroup;
+					const sideEditorGroup = this.editorGroupService.addGroup(activeEditorGroup.id, GroupDirection.RIGHT);
+					return Promise.all([
+						this.editorService.openEditor({ resource: this.defaultSettingsRawResource, options: { pinned: true, preserveFocus: true, revealIfOpened: true, override: EditorResolution.DISABLED }, label: nls.localize('defaultSettings', "Default Settings"), description: '' }),
+						this.editorService.openEditor(editableSettingsEditorInput, { pinned: true, revealIfOpened: true, override: EditorResolution.DISABLED }, sideEditorGroup.id)
+					]).then(([defaultEditor, editor]) => withNullAsUndefined(editor));
+				} else {
+					return this.editorService.openEditor(editableSettingsEditorInput, validateSettingsEditorOptions(options), group);
+				}
 			});
 	}
 
-	private async doOpenSplitJSON(configurationTarget: ConfigurationTarget, resource: URI, options: ISettingsEditorOptions = {}, group?: IEditorGroup): Promise<IEditorPane | undefined> {
-		await this.createSettingsIfNotExists(configurationTarget, resource);
-		const preferencesEditorInput = this.createSplitJsonEditorInput(configurationTarget, resource);
-		options = { ...options, pinned: true };
+	private async doOpenSplitJSON(configurationTarget: ConfigurationTarget, resource: URI, options?: ISettingsEditorOptions, group?: IEditorGroup): Promise<IEditorPane | undefined> {
+		const editableSettingsEditorInput = await this.getOrCreateEditableSettingsEditorInput(configurationTarget, resource);
+		const preferencesEditorInput = this.createSplitJsonEditorInput(configurationTarget, resource, editableSettingsEditorInput);
+		if (!options) {
+			options = { pinned: true };
+		} else {
+			options = { ...options, pinned: true };
+		}
+
 		return this.editorService.openEditor(preferencesEditorInput, validateSettingsEditorOptions(options), group);
 	}
 
-	public createSplitJsonEditorInput(configurationTarget: ConfigurationTarget, resource: URI): IEditorInput {
-		const editableSettingsEditorInput = this.editorService.createEditorInput({ resource });
-		const defaultPreferencesEditorInput = this.instantiationService.createInstance(TextResourceEditorInput, this.getDefaultSettingsResource(configurationTarget), undefined, undefined, undefined, undefined);
-		return new SideBySideEditorInput(editableSettingsEditorInput.getName(), undefined, defaultPreferencesEditorInput, editableSettingsEditorInput);
+	private createSplitJsonEditorInput(configurationTarget: ConfigurationTarget, resource: URI, editableSettingsEditorInput: IEditorInput): IEditorInput {
+		const defaultPreferencesEditorInput = this.instantiationService.createInstance(DefaultPreferencesEditorInput, this.getDefaultSettingsResource(configurationTarget));
+		const preferencesEditorInput = new PreferencesEditorInput(this.getPreferencesEditorInputName(configurationTarget, resource), editableSettingsEditorInput.getDescription(), defaultPreferencesEditorInput, <EditorInput>editableSettingsEditorInput);
+		this.lastOpenedSettingsInput = preferencesEditorInput;
+
+		return preferencesEditorInput;
 	}
 
 	public createSettings2EditorModel(): Settings2EditorModel {
 		return this.instantiationService.createInstance(Settings2EditorModel, this.getDefaultSettings(ConfigurationTarget.USER_LOCAL));
 	}
 
+	private async doSwitchSettings(target: ConfigurationTarget, resource: URI, input: PreferencesEditorInput, group: IEditorGroup, options?: ISettingsEditorOptions): Promise<IEditorPane> {
+		const settingsURI = await this.getEditableSettingsURI(target, resource);
+		if (!settingsURI) {
+			return Promise.reject(`Invalid settings URI - ${resource.toString()}`);
+		}
+		return this.getOrCreateEditableSettingsEditorInput(target, settingsURI)
+			.then(toInput => {
+				return group.openEditor(input).then(() => {
+					const replaceWith = new PreferencesEditorInput(this.getPreferencesEditorInputName(target, resource), toInput.getDescription(), this.instantiationService.createInstance(DefaultPreferencesEditorInput, this.getDefaultSettingsResource(target)), toInput);
+
+					return group.replaceEditors([{
+						editor: input,
+						replacement: replaceWith,
+						options: validateSettingsEditorOptions(options ?? {})
+					}]).then(() => {
+						this.lastOpenedSettingsInput = replaceWith;
+						return group.activeEditorPane!;
+					});
+				});
+			});
+	}
+
+	private getActiveSettingsEditorInput(group: IEditorGroup = this.editorGroupService.activeGroup): PreferencesEditorInput {
+		return <PreferencesEditorInput>group.editors.filter(e => e instanceof PreferencesEditorInput)[0];
+	}
+
+	private getConfigurationTargetFromSettingsResource(resource: URI): ConfigurationTarget {
+		if (this.userSettingsResource.toString() === resource.toString()) {
+			return ConfigurationTarget.USER_LOCAL;
+		}
+
+		const workspaceSettingsResource = this.workspaceSettingsResource;
+		if (workspaceSettingsResource && workspaceSettingsResource.toString() === resource.toString()) {
+			return ConfigurationTarget.WORKSPACE;
+		}
+
+		const folder = this.contextService.getWorkspaceFolder(resource);
+		if (folder) {
+			return ConfigurationTarget.WORKSPACE_FOLDER;
+		}
+
+		return ConfigurationTarget.USER_LOCAL;
+	}
+
 	private getConfigurationTargetFromDefaultSettingsResource(uri: URI) {
 		return this.isDefaultWorkspaceSettingsResource(uri) ?
 			ConfigurationTarget.WORKSPACE :
@@ -391,6 +486,11 @@ export class PreferencesService extends Disposable implements IPreferencesServic
 		return URI.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: `/${this._defaultUserSettingsUriCounter++}/settings.json` });
 	}
 
+	private getPreferencesEditorInputName(target: ConfigurationTarget, resource: URI): string {
+		const name = getSettingsTargetName(target, resource, this.contextService);
+		return target === ConfigurationTarget.WORKSPACE_FOLDER ? nls.localize('folderSettingsName', "{0} (Folder Settings)", name) : name;
+	}
+
 	private getOrCreateEditableSettingsEditorInput(target: ConfigurationTarget, resource: URI): Promise<EditorInput> {
 		return this.createSettingsIfNotExists(target, resource)
 			.then(() => <EditorInput>this.editorService.createEditorInput({ resource }));
diff --git a/src/vs/workbench/services/preferences/common/preferences.ts b/src/vs/workbench/services/preferences/common/preferences.ts
index 0e8cc11..03ac1de 100644
--- a/src/vs/workbench/services/preferences/common/preferences.ts
+++ b/src/vs/workbench/services/preferences/common/preferences.ts
@@ -5,26 +5,27 @@
 
 import { IStringDictionary } from 'vs/base/common/collections';
 import { Event } from 'vs/base/common/event';
-import { IMatch } from 'vs/base/common/filters';
-import { IJSONSchema, IJSONSchemaMap } from 'vs/base/common/jsonSchema';
-import { ResolvedKeybinding } from 'vs/base/common/keyCodes';
 import { URI } from 'vs/base/common/uri';
 import { IRange } from 'vs/editor/common/core/range';
+import { IJSONSchemaMap, IJSONSchema } from 'vs/base/common/jsonSchema';
 import { ITextModel } from 'vs/editor/common/model';
+import { localize } from 'vs/nls';
 import { ConfigurationTarget } from 'vs/platform/configuration/common/configuration';
-import { ConfigurationScope, EditPresentationTypes, IConfigurationExtensionInfo } from 'vs/platform/configuration/common/configurationRegistry';
+import { ConfigurationScope, IConfigurationExtensionInfo } from 'vs/platform/configuration/common/configurationRegistry';
 import { EditorResolution, IEditorOptions } from 'vs/platform/editor/common/editor';
 import { createDecorator } from 'vs/platform/instantiation/common/instantiation';
-import { ResolvedKeybindingItem } from 'vs/platform/keybinding/common/resolvedKeybindingItem';
+import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
 import { IEditorInput, IEditorPane } from 'vs/workbench/common/editor';
 import { IEditorGroup } from 'vs/workbench/services/editor/common/editorGroupsService';
 import { Settings2EditorModel } from 'vs/workbench/services/preferences/common/preferencesModels';
+import { IMatch } from 'vs/base/common/filters';
+import { ResolvedKeybinding } from 'vs/base/common/keyCodes';
+import { ResolvedKeybindingItem } from 'vs/platform/keybinding/common/resolvedKeybindingItem';
 
 export enum SettingValueType {
 	Null = 'null',
 	Enum = 'enum',
 	String = 'string',
-	MultilineString = 'multiline-string',
 	Integer = 'integer',
 	Number = 'number',
 	Boolean = 'boolean',
@@ -83,7 +84,6 @@ export interface ISetting {
 	validator?: (value: any) => string | null;
 	enumItemLabels?: string[];
 	allKeysAreBoolean?: boolean;
-	editPresentation?: EditPresentationTypes;
 }
 
 export interface IExtensionSetting extends ISetting {
@@ -203,8 +203,8 @@ export interface IPreferencesService {
 	workspaceSettingsResource: URI | null;
 	getFolderSettingsResource(resource: URI): URI | null;
 
-	createPreferencesEditorModel(uri: URI): Promise<IPreferencesEditorModel<ISetting> | null>;
 	resolveModel(uri: URI): Promise<ITextModel | null>;
+	createPreferencesEditorModel<T>(uri: URI): Promise<IPreferencesEditorModel<T> | null>;
 	createSettings2EditorModel(): Settings2EditorModel; // TODO
 
 	openRawDefaultSettings(): Promise<IEditorPane | undefined>;
@@ -213,11 +213,26 @@ export interface IPreferencesService {
 	openRemoteSettings(): Promise<IEditorPane | undefined>;
 	openWorkspaceSettings(jsonEditor?: boolean, options?: ISettingsEditorOptions, group?: IEditorGroup): Promise<IEditorPane | undefined>;
 	openFolderSettings(folder: URI, jsonEditor?: boolean, options?: ISettingsEditorOptions, group?: IEditorGroup): Promise<IEditorPane | undefined>;
+	switchSettings(target: ConfigurationTarget, resource: URI): Promise<void>;
 	openGlobalKeybindingSettings(textual: boolean, options?: IKeybindingsEditorOptions): Promise<void>;
 	openDefaultKeybindingsFile(): Promise<IEditorPane | undefined>;
 	getEditableSettingsURI(configurationTarget: ConfigurationTarget, resource?: URI): Promise<URI | null>;
 
-	createSplitJsonEditorInput(configurationTarget: ConfigurationTarget, resource: URI): IEditorInput;
+	getCurrentOrNewSplitJsonEditorInput(configurationTarget: ConfigurationTarget, resource: URI | undefined, group: IEditorGroup): IEditorInput;
+}
+
+export function getSettingsTargetName(target: ConfigurationTarget, resource: URI, workspaceContextService: IWorkspaceContextService): string {
+	switch (target) {
+		case ConfigurationTarget.USER:
+		case ConfigurationTarget.USER_LOCAL:
+			return localize('userSettingsTarget', "User Settings");
+		case ConfigurationTarget.WORKSPACE:
+			return localize('workspaceSettingsTarget', "Workspace Settings");
+		case ConfigurationTarget.WORKSPACE_FOLDER:
+			const folder = workspaceContextService.getWorkspaceFolder(resource);
+			return folder ? folder.name : '';
+	}
+	return '';
 }
 
 export interface KeybindingMatch {
diff --git a/src/vs/workbench/services/preferences/common/preferencesEditorInput.ts b/src/vs/workbench/services/preferences/common/preferencesEditorInput.ts
index 978bf92..4ce887f 100644
--- a/src/vs/workbench/services/preferences/common/preferencesEditorInput.ts
+++ b/src/vs/workbench/services/preferences/common/preferencesEditorInput.ts
@@ -5,11 +5,66 @@
 
 import { Schemas } from 'vs/base/common/network';
 import { URI } from 'vs/base/common/uri';
+import { ITextModelService } from 'vs/editor/common/services/resolverService';
 import * as nls from 'vs/nls';
-import { IEditorInput, IUntypedEditorInput } from 'vs/workbench/common/editor';
+import { IFileService } from 'vs/platform/files/common/files';
+import { ILabelService } from 'vs/platform/label/common/label';
+import { IEditorInput, IUntypedEditorInput, Verbosity } from 'vs/workbench/common/editor';
 import { EditorInput } from 'vs/workbench/common/editor/editorInput';
+import { SideBySideEditorInput } from 'vs/workbench/common/editor/sideBySideEditorInput';
+import { TextResourceEditorInput } from 'vs/workbench/common/editor/textResourceEditorInput';
+import { IEditorService } from 'vs/workbench/services/editor/common/editorService';
 import { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';
 import { Settings2EditorModel } from 'vs/workbench/services/preferences/common/preferencesModels';
+import { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';
+
+export class PreferencesEditorInput extends SideBySideEditorInput {
+	static override readonly ID: string = 'workbench.editorinputs.preferencesEditorInput';
+
+	override get typeId(): string {
+		return PreferencesEditorInput.ID;
+	}
+
+	override get editorId(): string | undefined {
+		return this.typeId;
+	}
+
+	override getTitle(verbosity: Verbosity): string {
+		return this.primary.getTitle(verbosity);
+	}
+
+	override matches(otherInput: IEditorInput | IUntypedEditorInput): boolean {
+		return super.matches(otherInput) || this.primary.matches(otherInput);
+	}
+}
+
+export class DefaultPreferencesEditorInput extends TextResourceEditorInput {
+	static override readonly ID = 'workbench.editorinputs.defaultpreferences';
+	constructor(
+		defaultSettingsResource: URI,
+		@ITextModelService textModelResolverService: ITextModelService,
+		@ITextFileService textFileService: ITextFileService,
+		@IEditorService editorService: IEditorService,
+		@IFileService fileService: IFileService,
+		@ILabelService labelService: ILabelService
+	) {
+		super(defaultSettingsResource, nls.localize('settingsEditorName', "Default Settings"), '', undefined, undefined, textModelResolverService, textFileService, editorService, fileService, labelService);
+	}
+
+	override get typeId(): string {
+		return DefaultPreferencesEditorInput.ID;
+	}
+
+	override matches(other: IEditorInput | IUntypedEditorInput): boolean {
+		if (other instanceof DefaultPreferencesEditorInput) {
+			return true;
+		}
+		if (!super.matches(other)) {
+			return false;
+		}
+		return true;
+	}
+}
 
 export interface IKeybindingsEditorSearchOptions {
 	searchValue: string;
diff --git a/src/vs/workbench/services/preferences/common/preferencesModels.ts b/src/vs/workbench/services/preferences/common/preferencesModels.ts
index c50d332..82f3a5f 100644
--- a/src/vs/workbench/services/preferences/common/preferencesModels.ts
+++ b/src/vs/workbench/services/preferences/common/preferencesModels.ts
@@ -669,8 +669,7 @@ export class DefaultSettings extends Disposable {
 					deprecationMessageIsMarkdown: !!prop.markdownDeprecationMessage,
 					validator: createValidator(prop),
 					enumItemLabels: prop.enumItemLabels,
-					allKeysAreBoolean,
-					editPresentation: prop.editPresentation
+					allKeysAreBoolean
 				});
 			}
 		}
@@ -721,9 +720,14 @@ export class DefaultSettings extends Disposable {
 
 	private toContent(settingsGroups: ISettingsGroup[]): string {
 		const builder = new SettingsContentBuilder();
+		builder.pushLine('[');
 		settingsGroups.forEach((settingsGroup, i) => {
-			builder.pushGroup(settingsGroup, i === 0, i === settingsGroups.length - 1);
+			builder.pushGroup(settingsGroup);
+			if (i < settingsGroups.length - 1) {
+				builder.pushLine(',');
+			}
 		});
+		builder.pushLine(']');
 		return builder.getContent();
 	}
 
@@ -936,8 +940,10 @@ class SettingsContentBuilder {
 		this._contentByLines.push(...lineText);
 	}
 
-	pushGroup(settingsGroups: ISettingsGroup, isFirst?: boolean, isLast?: boolean): void {
-		this._contentByLines.push(isFirst ? '[{' : '{');
+	pushGroup(settingsGroups: ISettingsGroup): void {
+		this._contentByLines.push('{');
+		this._contentByLines.push('');
+		this._contentByLines.push('');
 		const lastSetting = this._pushGroup(settingsGroups, '  ');
 
 		if (lastSetting) {
@@ -947,7 +953,7 @@ class SettingsContentBuilder {
 			this._contentByLines[lineIdx - 2] = content.substring(0, content.length - 1);
 		}
 
-		this._contentByLines.push(isLast ? '}]' : '},');
+		this._contentByLines.push('}');
 	}
 
 	protected _pushGroup(group: ISettingsGroup, indent: string): ISetting | null {
diff --git a/src/vs/workbench/services/preferences/common/preferencesValidation.ts b/src/vs/workbench/services/preferences/common/preferencesValidation.ts
index c991e05..80d97ac 100644
--- a/src/vs/workbench/services/preferences/common/preferencesValidation.ts
+++ b/src/vs/workbench/services/preferences/common/preferencesValidation.ts
@@ -6,7 +6,7 @@
 import * as nls from 'vs/nls';
 import { JSONSchemaType } from 'vs/base/common/jsonSchema';
 import { Color } from 'vs/base/common/color';
-import { isArray, isObject, isUndefinedOrNull, isString, isStringArray } from 'vs/base/common/types';
+import { isArray } from 'vs/base/common/types';
 import { IConfigurationPropertySchema } from 'vs/platform/configuration/common/configurationRegistry';
 
 type Validator<T> = { enabled: boolean, isValid: (value: T) => boolean; message: string };
@@ -15,22 +15,18 @@ function canBeType(propTypes: (string | undefined)[], ...types: JSONSchemaType[]
 	return types.some(t => propTypes.includes(t));
 }
 
-function isNullOrEmpty(value: unknown): boolean {
-	return value === '' || isUndefinedOrNull(value);
-}
-
 export function createValidator(prop: IConfigurationPropertySchema): (value: any) => (string | null) {
-	const type: (string | undefined)[] = isArray(prop.type) ? prop.type : [prop.type];
+	const type: (string | undefined)[] = Array.isArray(prop.type) ? prop.type : [prop.type];
 	const isNullable = canBeType(type, 'null');
 	const isNumeric = (canBeType(type, 'number') || canBeType(type, 'integer')) && (type.length === 1 || type.length === 2 && isNullable);
 
 	const numericValidations = getNumericValidators(prop);
 	const stringValidations = getStringValidators(prop);
 	const stringArrayValidator = getArrayOfStringValidator(prop);
-	const objectValidator = getObjectValidator(prop);
 
 	return value => {
-		if (isNullable && isNullOrEmpty(value)) { return ''; }
+		if (prop.type === 'string' && stringValidations.length === 0) { return null; }
+		if (isNullable && value === '') { return ''; }
 
 		const errors: string[] = [];
 		if (stringArrayValidator) {
@@ -40,19 +36,8 @@ export function createValidator(prop: IConfigurationPropertySchema): (value: any
 			}
 		}
 
-		if (objectValidator) {
-			const err = objectValidator(value);
-			if (err) {
-				errors.push(err);
-			}
-		}
-
-		if (prop.type === 'boolean' && value !== true && value !== false) {
-			errors.push(nls.localize('validations.booleanIncorrectType', 'Incorrect type. Expected "boolean".'));
-		}
-
 		if (isNumeric) {
-			if (isNullOrEmpty(value) || isNaN(+value)) {
+			if (value === '' || isNaN(+value)) {
 				errors.push(nls.localize('validations.expectedNumeric', "Value must be a number."));
 			} else {
 				errors.push(...numericValidations.filter(validator => !validator.isValid(+value)).map(validator => validator.message));
@@ -60,13 +45,7 @@ export function createValidator(prop: IConfigurationPropertySchema): (value: any
 		}
 
 		if (prop.type === 'string') {
-			if (prop.enum && !isStringArray(prop.enum)) {
-				errors.push(nls.localize('validations.stringIncorrectEnumOptions', 'The enum options should be strings, but there is a non-string option. Please file an issue with the extension author.'));
-			} else if (!isString(value)) {
-				errors.push(nls.localize('validations.stringIncorrectType', 'Incorrect type. Expected "string".'));
-			} else {
-				errors.push(...stringValidations.filter(validator => !validator.isValid(value)).map(validator => validator.message));
-			}
+			errors.push(...stringValidations.filter(validator => !validator.isValid('' + value)).map(validator => validator.message));
 		}
 
 		if (errors.length) {
@@ -85,7 +64,7 @@ export function getInvalidTypeError(value: any, type: undefined | string | strin
 		return;
 	}
 
-	const typeArr = isArray(type) ? type : [type];
+	const typeArr = Array.isArray(type) ? type : [type];
 	if (!typeArr.some(_type => valueValidatesAsType(value, _type))) {
 		return nls.localize('invalidTypeError', "Setting has an invalid type, expected {0}. Fix in JSON.", JSON.stringify(type));
 	}
@@ -98,11 +77,11 @@ function valueValidatesAsType(value: any, type: string): boolean {
 	if (type === 'boolean') {
 		return valueType === 'boolean';
 	} else if (type === 'object') {
-		return value && !isArray(value) && valueType === 'object';
+		return value && !Array.isArray(value) && valueType === 'object';
 	} else if (type === 'null') {
 		return value === null;
 	} else if (type === 'array') {
-		return isArray(value);
+		return Array.isArray(value);
 	} else if (type === 'string') {
 		return valueType === 'string';
 	} else if (type === 'number' || type === 'integer') {
@@ -158,19 +137,11 @@ function getStringValidators(prop: IConfigurationPropertySchema) {
 			}),
 			message: nls.localize('validations.uriSchemeMissing', "URI with a scheme is expected.")
 		},
-		{
-			enabled: prop.enum !== undefined,
-			isValid: ((value: string) => {
-				return prop.enum!.includes(value);
-			}),
-			message: nls.localize('validations.invalidStringEnumValue', "Value is not accepted. Valid values: {0}.",
-				prop.enum ? prop.enum.map(key => `"${key}"`).join(', ') : '[]')
-		}
 	].filter(validation => validation.enabled);
 }
 
 function getNumericValidators(prop: IConfigurationPropertySchema): Validator<number>[] {
-	const type: (string | undefined)[] = isArray(prop.type) ? prop.type : [prop.type];
+	const type: (string | undefined)[] = Array.isArray(prop.type) ? prop.type : [prop.type];
 
 	const isNullable = canBeType(type, 'null');
 	const isIntegral = (canBeType(type, 'integer')) && (type.length === 1 || type.length === 2 && isNullable);
@@ -241,13 +212,7 @@ function getArrayOfStringValidator(prop: IConfigurationPropertySchema): ((value:
 
 				let message = '';
 
-				if (!isStringArray(value)) {
-					message += nls.localize('validations.stringArrayIncorrectType', 'Incorrect type. Expected a string array.');
-					message += '\n';
-					return message;
-				}
-
-				const stringArrayValue = value;
+				const stringArrayValue = value as string[];
 
 				if (prop.uniqueItems) {
 					if (new Set(stringArrayValue).size < stringArrayValue.length) {
@@ -304,66 +269,3 @@ function getArrayOfStringValidator(prop: IConfigurationPropertySchema): ((value:
 
 	return null;
 }
-
-function getObjectValidator(prop: IConfigurationPropertySchema): ((value: any) => (string | null)) | null {
-	if (prop.type === 'object') {
-		const { properties, patternProperties, additionalProperties } = prop;
-		return value => {
-			if (!value) {
-				return null;
-			}
-
-			const errors: string[] = [];
-
-			if (!isObject(value)) {
-				errors.push(nls.localize('validations.objectIncorrectType', 'Incorrect type. Expected an object.'));
-			} else {
-				Object.keys(value).forEach((key: string) => {
-					const data = value[key];
-					if (properties && key in properties) {
-						const errorMessage = getErrorsForSchema(properties[key], data);
-						if (errorMessage) {
-							errors.push(`${key}: ${errorMessage}\n`);
-						}
-						return;
-					}
-
-					if (patternProperties) {
-						for (const pattern in patternProperties) {
-							if (RegExp(pattern).test(key)) {
-								const errorMessage = getErrorsForSchema(patternProperties[pattern], data);
-								if (errorMessage) {
-									errors.push(`${key}: ${errorMessage}\n`);
-								}
-								return;
-							}
-						}
-					}
-
-					if (additionalProperties === false) {
-						errors.push(nls.localize('validations.objectPattern', 'Property {0} is not allowed.\n', key));
-					} else if (typeof additionalProperties === 'object') {
-						const errorMessage = getErrorsForSchema(additionalProperties, data);
-						if (errorMessage) {
-							errors.push(`${key}: ${errorMessage}\n`);
-						}
-					}
-				});
-			}
-
-			if (errors.length) {
-				return prop.errorMessage ? [prop.errorMessage, ...errors].join(' ') : errors.join(' ');
-			}
-
-			return '';
-		};
-	}
-
-	return null;
-}
-
-function getErrorsForSchema(propertySchema: IConfigurationPropertySchema, data: any): string | null {
-	const validator = createValidator(propertySchema);
-	const errorMessage = validator(data);
-	return errorMessage;
-}
diff --git a/src/vs/workbench/services/preferences/test/common/preferencesValidation.test.ts b/src/vs/workbench/services/preferences/test/common/preferencesValidation.test.ts
index 0ee46ba..e9f69bb 100644
--- a/src/vs/workbench/services/preferences/test/common/preferencesValidation.test.ts
+++ b/src/vs/workbench/services/preferences/test/common/preferencesValidation.test.ts
@@ -16,12 +16,12 @@ suite('Preferences Validation', () => {
 			this.validator = createValidator(settings)!;
 		}
 
-		public accepts(input: any) {
-			assert.strictEqual(this.validator(input), '', `Expected ${JSON.stringify(this.settings)} to accept \`${JSON.stringify(input)}\`. Got ${this.validator(input)}.`);
+		public accepts(input: string) {
+			assert.strictEqual(this.validator(input), '', `Expected ${JSON.stringify(this.settings)} to accept \`${input}\`. Got ${this.validator(input)}.`);
 		}
 
-		public rejects(input: any) {
-			assert.notStrictEqual(this.validator(input), '', `Expected ${JSON.stringify(this.settings)} to reject \`${JSON.stringify(input)}\`.`);
+		public rejects(input: string) {
+			assert.notStrictEqual(this.validator(input), '', `Expected ${JSON.stringify(this.settings)} to reject \`${input}\`.`);
 			return {
 				withMessage:
 					(message: string) => {
@@ -33,6 +33,7 @@ suite('Preferences Validation', () => {
 			};
 		}
 
+
 		public validatesNumeric() {
 			this.accepts('3');
 			this.accepts('3.');
@@ -41,24 +42,16 @@ suite('Preferences Validation', () => {
 			this.accepts(' 3.0');
 			this.accepts(' 3.0  ');
 			this.rejects('3f');
-			this.accepts(3);
-			this.rejects('test');
 		}
 
 		public validatesNullableNumeric() {
 			this.validatesNumeric();
-			this.accepts(0);
 			this.accepts('');
-			this.accepts(null);
-			this.accepts(undefined);
 		}
 
 		public validatesNonNullableNumeric() {
 			this.validatesNumeric();
-			this.accepts(0);
 			this.rejects('');
-			this.rejects(null);
-			this.rejects(undefined);
 		}
 
 		public validatesString() {
@@ -71,7 +64,6 @@ suite('Preferences Validation', () => {
 			this.accepts('');
 			this.accepts('3f');
 			this.accepts('hello');
-			this.rejects(6);
 		}
 	}
 
@@ -233,52 +225,6 @@ suite('Preferences Validation', () => {
 		}
 	});
 
-	test('objects work', () => {
-		{
-			const obj = new Tester({ type: 'object', properties: { 'a': { type: 'string', maxLength: 2 } }, additionalProperties: false });
-			obj.rejects({ 'a': 'string' });
-			obj.accepts({ 'a': 'st' });
-			obj.rejects({ 'a': null });
-			obj.rejects({ 'a': 7 });
-			obj.accepts({});
-			obj.rejects('test');
-			obj.rejects(7);
-			obj.rejects([1, 2, 3]);
-		}
-		{
-			const pattern = new Tester({ type: 'object', patternProperties: { '^a[a-z]$': { type: 'string', minLength: 2 } }, additionalProperties: false });
-			pattern.accepts({ 'ab': 'string' });
-			pattern.accepts({ 'ab': 'string', 'ac': 'hmm' });
-			pattern.rejects({ 'ab': 'string', 'ac': 'h' });
-			pattern.rejects({ 'ab': 'string', 'ac': 99999 });
-			pattern.rejects({ 'abc': 'string' });
-			pattern.rejects({ 'a0': 'string' });
-			pattern.rejects({ 'ab': 'string', 'bc': 'hmm' });
-			pattern.rejects({ 'be': 'string' });
-			pattern.rejects({ 'be': 'a' });
-			pattern.accepts({});
-		}
-		{
-			const pattern = new Tester({ type: 'object', patternProperties: { '^#': { type: 'string', minLength: 3 } }, additionalProperties: { type: 'string', maxLength: 3 } });
-			pattern.accepts({ '#ab': 'string' });
-			pattern.accepts({ 'ab': 'str' });
-			pattern.rejects({ '#ab': 's' });
-			pattern.rejects({ 'ab': 99999 });
-			pattern.rejects({ '#ab': 99999 });
-			pattern.accepts({});
-		}
-		{
-			const pattern = new Tester({ type: 'object', properties: { 'hello': { type: 'string' } }, additionalProperties: { type: 'boolean' } });
-			pattern.accepts({ 'hello': 'world' });
-			pattern.accepts({ 'hello': 'world', 'bye': false });
-			pattern.rejects({ 'hello': 'world', 'bye': 'false' });
-			pattern.rejects({ 'hello': 'world', 'bye': 1 });
-			pattern.rejects({ 'hello': 'world', 'bye': 'world' });
-			pattern.accepts({ 'hello': 'test' });
-			pattern.accepts({});
-		}
-	});
-
 	test('patterns work', () => {
 		{
 			const urls = new Tester({ pattern: '^(hello)*$', type: 'string' });
@@ -316,7 +262,7 @@ suite('Preferences Validation', () => {
 			assert.strictEqual(this.validator(input), '', `Expected ${JSON.stringify(this.settings)} to accept \`${JSON.stringify(input)}\`. Got ${this.validator(input)}.`);
 		}
 
-		public rejects(input: any) {
+		public rejects(input: any[]) {
 			assert.notStrictEqual(this.validator(input), '', `Expected ${JSON.stringify(this.settings)} to reject \`${JSON.stringify(input)}\`.`);
 			return {
 				withMessage:
@@ -336,8 +282,6 @@ suite('Preferences Validation', () => {
 			arr.accepts([]);
 			arr.accepts(['foo']);
 			arr.accepts(['foo', 'bar']);
-			arr.rejects(76);
-			arr.rejects([6, '3', 7]);
 		}
 	});
 
