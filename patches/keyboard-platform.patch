diff --git a/src/vs/platform/keybinding/common/keybindingsRegistry.ts b/src/vs/platform/keybinding/common/keybindingsRegistry.ts
index 2bf215e..620eba9 100644
--- a/src/vs/platform/keybinding/common/keybindingsRegistry.ts
+++ b/src/vs/platform/keybinding/common/keybindingsRegistry.ts
@@ -75,6 +75,7 @@ export interface IKeybindingsRegistry {
 	setExtensionKeybindings(rules: IKeybindingRule2[]): void;
 	registerCommandAndKeybindingRule(desc: ICommandAndKeybindingRule): void;
 	getDefaultKeybindings(): IKeybindingItem[];
+	setPlatform(platform?: string): void;
 }
 
 class KeybindingsRegistryImpl implements IKeybindingsRegistry {
@@ -82,6 +83,8 @@ class KeybindingsRegistryImpl implements IKeybindingsRegistry {
 	private _coreKeybindings: IKeybindingItem[];
 	private _extensionKeybindings: IKeybindingItem[];
 	private _cachedMergedKeybindings: IKeybindingItem[] | null;
+	private _platform = OS;
+	private _keybindingRuleCache: IKeybindingRule[] | null = []
 
 	constructor() {
 		this._coreKeybindings = [];
@@ -92,12 +95,12 @@ class KeybindingsRegistryImpl implements IKeybindingsRegistry {
 	/**
 	 * Take current platform into account and reduce to primary & secondary.
 	 */
-	private static bindToCurrentPlatform(kb: IKeybindings): { primary?: number; secondary?: number[]; } {
-		if (OS === OperatingSystem.Windows) {
+	private bindToCurrentPlatform(kb: IKeybindings): { primary?: number; secondary?: number[]; } {
+		if (this._platform === OperatingSystem.Windows) {
 			if (kb && kb.win) {
 				return kb.win;
 			}
-		} else if (OS === OperatingSystem.Macintosh) {
+		} else if (this._platform === OperatingSystem.Macintosh) {
 			if (kb && kb.mac) {
 				return kb.mac;
 			}
@@ -113,12 +116,12 @@ class KeybindingsRegistryImpl implements IKeybindingsRegistry {
 	/**
 	 * Take current platform into account and reduce to primary & secondary.
 	 */
-	private static bindToCurrentPlatform2(kb: IKeybindingRule2): { primary?: Keybinding | null; } {
-		if (OS === OperatingSystem.Windows) {
+	private bindToCurrentPlatform2(kb: IKeybindingRule2): { primary?: Keybinding | null; } {
+		if (this._platform === OperatingSystem.Windows) {
 			if (kb && kb.win) {
 				return kb.win;
 			}
-		} else if (OS === OperatingSystem.Macintosh) {
+		} else if (this._platform === OperatingSystem.Macintosh) {
 			if (kb && kb.mac) {
 				return kb.mac;
 			}
@@ -131,11 +134,41 @@ class KeybindingsRegistryImpl implements IKeybindingsRegistry {
 		return kb;
 	}
 
+	public setPlatform(platform?: string): void {
+		if (this._keybindingRuleCache) {
+			if (!platform) {
+				this._platform = OS;
+			} else if (platform === 'linux') {
+				this._platform = OperatingSystem.Linux;
+			} else if (platform === 'mac') {
+				this._platform = OperatingSystem.Macintosh;
+			} else if (platform === 'windows') {
+				this._platform = OperatingSystem.Windows;
+			} else {
+				this._platform = OS;
+			}
+
+			for (const rule of this._keybindingRuleCache) {
+				this._registerKeybindingRule(rule);
+			}
+
+			this._keybindingRuleCache = null;
+		}
+	}
+
 	public registerKeybindingRule(rule: IKeybindingRule): void {
-		const actualKb = KeybindingsRegistryImpl.bindToCurrentPlatform(rule);
+		if (this._keybindingRuleCache) {
+			this._keybindingRuleCache.push(rule)
+		} else {
+			this._registerKeybindingRule(rule);
+		}
+	}
+
+	public _registerKeybindingRule(rule: IKeybindingRule): void {
+		const actualKb = this.bindToCurrentPlatform(rule);
 
 		if (actualKb && actualKb.primary) {
-			const kk = createKeybinding(actualKb.primary, OS);
+			const kk = createKeybinding(actualKb.primary, this._platform);
 			if (kk) {
 				this._registerDefaultKeybinding(kk, rule.id, rule.args, rule.weight, 0, rule.when);
 			}
@@ -144,7 +177,7 @@ class KeybindingsRegistryImpl implements IKeybindingsRegistry {
 		if (actualKb && Array.isArray(actualKb.secondary)) {
 			for (let i = 0, len = actualKb.secondary.length; i < len; i++) {
 				const k = actualKb.secondary[i];
-				const kk = createKeybinding(k, OS);
+				const kk = createKeybinding(k, this._platform);
 				if (kk) {
 					this._registerDefaultKeybinding(kk, rule.id, rule.args, rule.weight, -i - 1, rule.when);
 				}
@@ -156,7 +189,7 @@ class KeybindingsRegistryImpl implements IKeybindingsRegistry {
 		let result: IKeybindingItem[] = [], keybindingsLen = 0;
 		for (let i = 0, len = rules.length; i < len; i++) {
 			const rule = rules[i];
-			let actualKb = KeybindingsRegistryImpl.bindToCurrentPlatform2(rule);
+			let actualKb = this.bindToCurrentPlatform2(rule);
 
 			if (actualKb && actualKb.primary) {
 				result[keybindingsLen++] = {
diff --git a/src/vs/workbench/services/configuration/browser/configurationService.ts b/src/vs/workbench/services/configuration/browser/configurationService.ts
index 5a83f1a..18f355c 100644
--- a/src/vs/workbench/services/configuration/browser/configurationService.ts
+++ b/src/vs/workbench/services/configuration/browser/configurationService.ts
@@ -35,6 +35,7 @@ import { IUriIdentityService } from 'vs/workbench/services/uriIdentity/common/ur
 import { IWorkspaceTrustManagementService } from 'vs/platform/workspace/common/workspaceTrust';
 import { delta, distinct } from 'vs/base/common/arrays';
 import { forEach, IStringDictionary } from 'vs/base/common/collections';
+import { KeybindingsRegistry } from 'vs/platform/keybinding/common/keybindingsRegistry';
 
 class Workspace extends BaseWorkspace {
 	initialized: boolean = false;
@@ -514,6 +515,8 @@ export class WorkspaceService extends Disposable implements IWorkbenchConfigurat
 
 		await this.initializeConfiguration();
 
+		KeybindingsRegistry.setPlatform(this.getValue<string | undefined>('keyboard.platform'));
+
 		// Trigger changes after configuration initialization so that configuration is up to date.
 		if (hasWorkspaceBefore) {
 			const newState = this.getWorkbenchState();
diff --git a/src/vs/workbench/services/keybinding/browser/keybindingService.ts b/src/vs/workbench/services/keybinding/browser/keybindingService.ts
index eea2f00..aa48ebf 100644
--- a/src/vs/workbench/services/keybinding/browser/keybindingService.ts
+++ b/src/vs/workbench/services/keybinding/browser/keybindingService.ts
@@ -849,6 +849,13 @@ const keyboardConfiguration: IConfigurationNode = {
 			default: 'code',
 			markdownDescription: nls.localize('dispatch', "Controls the dispatching logic for key presses to use either `code` (recommended) or `keyCode`."),
 			included: OS === OperatingSystem.Macintosh || OS === OperatingSystem.Linux
+		},
+		'keyboard.platform': {
+			scope: ConfigurationScope.APPLICATION,
+			type: 'string',
+			enum: ['auto', 'linux', 'mac', 'windows'],
+			default: 'auto',
+			markdownDescription: nls.localize('platform', "Set the platform for which the keybindings are built.")
 		}
 	}
 };
