diff --git a/src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts b/src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts
index 66ab203..b09fb0f 100644
--- a/src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts
+++ b/src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts
@@ -10,3 +10,3 @@ import { MenuRegistry, MenuId, registerAction2, Action2, ISubmenuItem, IMenuItem
 import { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';
-import { ExtensionsLocalizedLabel, IExtensionManagementService, IExtensionGalleryService, PreferencesLocalizedLabel, InstallOperation, InstallOptions } from 'vs/platform/extensionManagement/common/extensionManagement';
+import { ExtensionsLocalizedLabel, IExtensionManagementService, IExtensionGalleryService, PreferencesLocalizedLabel, InstallOperation, InstallOptions, IGlobalExtensionEnablementService } from 'vs/platform/extensionManagement/common/extensionManagement';
 import { EnablementState, IExtensionManagementServerService, IWorkbenchExtensionEnablementService, IWorkbenchExtensionManagementService } from 'vs/workbench/services/extensionManagement/common/extensionManagement';
@@ -418,2 +418,46 @@ CommandsRegistry.registerCommand({
 
+CommandsRegistry.registerCommand({
+	id: 'workbench.extensions.disableExtension',
+	description: {
+		description: localize('workbench.extensions.disableExtension.description', "Disable the given extension"),
+		args: [
+			{
+				name: localize('workbench.extensions.disableExtension.arg.name', "Id of the extension to disable"),
+				schema: {
+					'type': 'string'
+				}
+			}
+		]
+	},
+	handler: async (accessor, id: string) => {
+		if (!id) {
+			throw new Error(localize('id required', "Extension id required."));
+		}
+		const extensionManagementService = accessor.get(IGlobalExtensionEnablementService);
+		extensionManagementService.disableExtension({ id });
+	}
+});
+
+CommandsRegistry.registerCommand({
+	id: 'workbench.extensions.enableExtension',
+	description: {
+		description: localize('workbench.extensions.enableExtension.description', "Enable the given extension"),
+		args: [
+			{
+				name: localize('workbench.extensions.enableExtension.arg.name', "Id of the extension to enable"),
+				schema: {
+					'type': 'string'
+				}
+			}
+		]
+	},
+	handler: async (accessor, id: string) => {
+		if (!id) {
+			throw new Error(localize('id required', "Extension id required."));
+		}
+		const extensionManagementService = accessor.get(IGlobalExtensionEnablementService);
+		extensionManagementService.enableExtension({ id });
+	}
+});
+
 function overrideActionForActiveExtensionEditorWebview(command: MultiCommand | undefined, f: (webview: IWebview) => void) {
